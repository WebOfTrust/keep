// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"ed9V9":[function(require,module,exports) {
"use strict";
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "8732df0c5437dead";
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {
            };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = o[Symbol.iterator]();
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            if (typeof document !== 'undefined') removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                }
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            if (typeof document !== 'undefined') {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>").concat(stack, "</pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>💡 ' + hint + '</div>';
            }).join(''), "\n        </div>\n        ").concat(diagnostic.documentation ? "<div>\uD83D\uDCDD <a style=\"color: violet\" href=\"".concat(diagnostic.documentation, "\" target=\"_blank\">Learn more</a></div>") : '', "\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            var fn = new Function('require', 'module', 'exports', asset.output);
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) return true;
    var parents = getParents(module.bundle.root, id); // If no parents, the asset is new. Prevent reloading the page.
    if (!parents.length) return true;
    return parents.some(function(v) {
        return hmrAcceptCheck(v[0], v[1], null);
    });
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"i3Ovo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("./components");
var _services = require("./services");
var _views = require("./views");
var _tasks = require("../../tasks");
var _tasksDefault = parcelHelpers.interopDefault(_tasks);
var _defaultsScss = require("../scss/defaults.scss");
var _typographyScss = require("../scss/typography.scss");
var _globalsScss = require("../scss/globals.scss");
var _navRailScss = require("../scss/nav-rail.scss");
_services.Tasks.all = _tasksDefault.default;
let root = document.body;
const MainLayout = {
    view: (vnode)=>{
        return _mithrilDefault.default('[', null, _mithrilDefault.default(_components.ToastOutlet, null), _mithrilDefault.default(_components.Nav, null), vnode.children);
    }
};
const documentTitle = 'KEEP';
_mithrilDefault.default.route(root, '/dashboard', {
    '/dashboard': {
        oninit: ()=>{
            document.title = documentTitle + ' | Dashboard';
        },
        view: ()=>{
            return _mithrilDefault.default(MainLayout, null, _mithrilDefault.default(_views.Dashboard, null));
        }
    },
    '/contacts': {
        oninit: ()=>{
            document.title = documentTitle + ' | Contacts';
        },
        view: ()=>{
            return _mithrilDefault.default(MainLayout, null, _mithrilDefault.default(_views.Contacts, null));
        }
    },
    '/profile': {
        oninit: ()=>{
            document.title = documentTitle + ' | Profile';
        },
        view: ()=>{
            return _mithrilDefault.default(MainLayout, null, _mithrilDefault.default(_views.Profile, null));
        }
    },
    '/settings': {
        oninit: ()=>{
            document.title = documentTitle + ' | Settings';
        },
        view: ()=>{
            return _mithrilDefault.default(MainLayout, null, _mithrilDefault.default(_views.Settings, null));
        }
    },
    '/:404': {
        oninit: ()=>{
            document.title = documentTitle + ' | Error';
        },
        view: ()=>{
            return _mithrilDefault.default(MainLayout, null, _mithrilDefault.default(_views.Error, null));
        }
    }
});

},{"mithril":"1zcoP","./components":"iBBNK","./services":"i9qdV","./views":"2yIRZ","../../tasks":"2s3FK","../scss/defaults.scss":"gijJP","../scss/typography.scss":"9xOQR","../scss/globals.scss":"1OQwU","../scss/nav-rail.scss":"79aXD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1zcoP":[function(require,module,exports) {
"use strict";
var hyperscript = require("./hyperscript");
var request = require("./request");
var mountRedraw = require("./mount-redraw");
var m = function m() {
    return hyperscript.apply(this, arguments);
};
m.m = hyperscript;
m.trust = hyperscript.trust;
m.fragment = hyperscript.fragment;
m.mount = mountRedraw.mount;
m.route = require("./route");
m.render = require("./render");
m.redraw = mountRedraw.redraw;
m.request = request.request;
m.jsonp = request.jsonp;
m.parseQueryString = require("./querystring/parse");
m.buildQueryString = require("./querystring/build");
m.parsePathname = require("./pathname/parse");
m.buildPathname = require("./pathname/build");
m.vnode = require("./render/vnode");
m.PromisePolyfill = require("./promise/polyfill");
module.exports = m;

},{"./hyperscript":"bDjZC","./request":"5poAh","./mount-redraw":"jh7iq","./route":"4SNaV","./render":"lR5T8","./querystring/parse":"ZeRxY","./querystring/build":"fbqKb","./pathname/parse":"jK2nr","./pathname/build":"k2dgA","./render/vnode":"5c56e","./promise/polyfill":"tOBdH"}],"bDjZC":[function(require,module,exports) {
"use strict";
var hyperscript = require("./render/hyperscript");
hyperscript.trust = require("./render/trust");
hyperscript.fragment = require("./render/fragment");
module.exports = hyperscript;

},{"./render/hyperscript":"js0vQ","./render/trust":"6vpah","./render/fragment":"gax7g"}],"js0vQ":[function(require,module,exports) {
"use strict";
var Vnode = require("../render/vnode");
var hyperscriptVnode = require("./hyperscriptVnode");
var selectorParser = /(?:(^|#|\.)([^#\.\[\]]+))|(\[(.+?)(?:\s*=\s*("|'|)((?:\\["'\]]|.)*?)\5)?\])/g;
var selectorCache = {
};
var hasOwn = {
}.hasOwnProperty;
function isEmpty(object) {
    for(var key in object)if (hasOwn.call(object, key)) return false;
    return true;
}
function compileSelector(selector) {
    var match, tag = "div", classes = [], attrs = {
    };
    while(match = selectorParser.exec(selector)){
        var type = match[1], value = match[2];
        if (type === "" && value !== "") tag = value;
        else if (type === "#") attrs.id = value;
        else if (type === ".") classes.push(value);
        else if (match[3][0] === "[") {
            var attrValue = match[6];
            if (attrValue) attrValue = attrValue.replace(/\\(["'])/g, "$1").replace(/\\\\/g, "\\");
            if (match[4] === "class") classes.push(attrValue);
            else attrs[match[4]] = attrValue === "" ? attrValue : attrValue || true;
        }
    }
    if (classes.length > 0) attrs.className = classes.join(" ");
    return selectorCache[selector] = {
        tag: tag,
        attrs: attrs
    };
}
function execSelector(state, vnode) {
    var attrs = vnode.attrs;
    var children = Vnode.normalizeChildren(vnode.children);
    var hasClass = hasOwn.call(attrs, "class");
    var className = hasClass ? attrs.class : attrs.className;
    vnode.tag = state.tag;
    vnode.attrs = null;
    vnode.children = undefined;
    if (!isEmpty(state.attrs) && !isEmpty(attrs)) {
        var newAttrs = {
        };
        for(var key in attrs)if (hasOwn.call(attrs, key)) newAttrs[key] = attrs[key];
        attrs = newAttrs;
    }
    for(var key in state.attrs)if (hasOwn.call(state.attrs, key) && key !== "className" && !hasOwn.call(attrs, key)) attrs[key] = state.attrs[key];
    if (className != null || state.attrs.className != null) attrs.className = className != null ? state.attrs.className != null ? String(state.attrs.className) + " " + String(className) : className : state.attrs.className != null ? state.attrs.className : null;
    if (hasClass) attrs.class = null;
    for(var key in attrs)if (hasOwn.call(attrs, key) && key !== "key") {
        vnode.attrs = attrs;
        break;
    }
    if (Array.isArray(children) && children.length === 1 && children[0] != null && children[0].tag === "#") vnode.text = children[0].children;
    else vnode.children = children;
    return vnode;
}
function hyperscript(selector) {
    if (selector == null || typeof selector !== "string" && typeof selector !== "function" && typeof selector.view !== "function") throw Error("The selector must be either a string or a component.");
    var vnode = hyperscriptVnode.apply(1, arguments);
    if (typeof selector === "string") {
        vnode.children = Vnode.normalizeChildren(vnode.children);
        if (selector !== "[") return execSelector(selectorCache[selector] || compileSelector(selector), vnode);
    }
    vnode.tag = selector;
    return vnode;
}
module.exports = hyperscript;

},{"../render/vnode":"5c56e","./hyperscriptVnode":"bU2ny"}],"5c56e":[function(require,module,exports) {
"use strict";
function Vnode(tag, key, attrs, children, text, dom) {
    return {
        tag: tag,
        key: key,
        attrs: attrs,
        children: children,
        text: text,
        dom: dom,
        domSize: undefined,
        state: undefined,
        events: undefined,
        instance: undefined
    };
}
Vnode.normalize = function(node) {
    if (Array.isArray(node)) return Vnode("[", undefined, undefined, Vnode.normalizeChildren(node), undefined, undefined);
    if (node == null || typeof node === "boolean") return null;
    if (typeof node === "object") return node;
    return Vnode("#", undefined, undefined, String(node), undefined, undefined);
};
Vnode.normalizeChildren = function(input) {
    var children = [];
    if (input.length) {
        var isKeyed = input[0] != null && input[0].key != null;
        // Note: this is a *very* perf-sensitive check.
        // Fun fact: merging the loop like this is somehow faster than splitting
        // it, noticeably so.
        for(var i = 1; i < input.length; i++){
            if ((input[i] != null && input[i].key != null) !== isKeyed) throw new TypeError("Vnodes must either always have keys or never have keys!");
        }
        for(var i = 0; i < input.length; i++)children[i] = Vnode.normalize(input[i]);
    }
    return children;
};
module.exports = Vnode;

},{}],"bU2ny":[function(require,module,exports) {
"use strict";
var Vnode = require("../render/vnode");
// Call via `hyperscriptVnode.apply(startOffset, arguments)`
//
// The reason I do it this way, forwarding the arguments and passing the start
// offset in `this`, is so I don't have to create a temporary array in a
// performance-critical path.
//
// In native ES6, I'd instead add a final `...args` parameter to the
// `hyperscript` and `fragment` factories and define this as
// `hyperscriptVnode(...args)`, since modern engines do optimize that away. But
// ES5 (what Mithril requires thanks to IE support) doesn't give me that luxury,
// and engines aren't nearly intelligent enough to do either of these:
//
// 1. Elide the allocation for `[].slice.call(arguments, 1)` when it's passed to
//    another function only to be indexed.
// 2. Elide an `arguments` allocation when it's passed to any function other
//    than `Function.prototype.apply` or `Reflect.apply`.
//
// In ES6, it'd probably look closer to this (I'd need to profile it, though):
// module.exports = function(attrs, ...children) {
//     if (attrs == null || typeof attrs === "object" && attrs.tag == null && !Array.isArray(attrs)) {
//         if (children.length === 1 && Array.isArray(children[0])) children = children[0]
//     } else {
//         children = children.length === 0 && Array.isArray(attrs) ? attrs : [attrs, ...children]
//         attrs = undefined
//     }
//
//     if (attrs == null) attrs = {}
//     return Vnode("", attrs.key, attrs, children)
// }
module.exports = function() {
    var attrs = arguments[this], start = this + 1, children;
    if (attrs == null) attrs = {
    };
    else if (typeof attrs !== "object" || attrs.tag != null || Array.isArray(attrs)) {
        attrs = {
        };
        start = this;
    }
    if (arguments.length === start + 1) {
        children = arguments[start];
        if (!Array.isArray(children)) children = [
            children
        ];
    } else {
        children = [];
        while(start < arguments.length)children.push(arguments[start++]);
    }
    return Vnode("", attrs.key, attrs, children);
};

},{"../render/vnode":"5c56e"}],"6vpah":[function(require,module,exports) {
"use strict";
var Vnode = require("../render/vnode");
module.exports = function(html) {
    if (html == null) html = "";
    return Vnode("<", undefined, undefined, html, undefined, undefined);
};

},{"../render/vnode":"5c56e"}],"gax7g":[function(require,module,exports) {
"use strict";
var Vnode = require("../render/vnode");
var hyperscriptVnode = require("./hyperscriptVnode");
module.exports = function() {
    var vnode = hyperscriptVnode.apply(0, arguments);
    vnode.tag = "[";
    vnode.children = Vnode.normalizeChildren(vnode.children);
    return vnode;
};

},{"../render/vnode":"5c56e","./hyperscriptVnode":"bU2ny"}],"5poAh":[function(require,module,exports) {
"use strict";
var PromisePolyfill = require("./promise/promise");
var mountRedraw = require("./mount-redraw");
module.exports = require("./request/request")(window, PromisePolyfill, mountRedraw.redraw);

},{"./promise/promise":"298EJ","./mount-redraw":"jh7iq","./request/request":"8fm7T"}],"298EJ":[function(require,module,exports) {
var global = arguments[3];
"use strict";
var PromisePolyfill = require("./polyfill");
if (typeof window !== "undefined") {
    if (typeof window.Promise === "undefined") window.Promise = PromisePolyfill;
    else if (!window.Promise.prototype.finally) window.Promise.prototype.finally = PromisePolyfill.prototype.finally;
    module.exports = window.Promise;
} else if (typeof global !== "undefined") {
    if (typeof global.Promise === "undefined") global.Promise = PromisePolyfill;
    else if (!global.Promise.prototype.finally) global.Promise.prototype.finally = PromisePolyfill.prototype.finally;
    module.exports = global.Promise;
} else module.exports = PromisePolyfill;

},{"./polyfill":"tOBdH"}],"tOBdH":[function(require,module,exports) {
"use strict";
/** @constructor */ var PromisePolyfill = function(executor) {
    if (!(this instanceof PromisePolyfill)) throw new Error("Promise must be called with `new`");
    if (typeof executor !== "function") throw new TypeError("executor must be a function");
    var self = this, resolvers = [], rejectors = [], resolveCurrent = handler(resolvers, true), rejectCurrent = handler(rejectors, false);
    var instance = self._instance = {
        resolvers: resolvers,
        rejectors: rejectors
    };
    var callAsync = typeof setImmediate === "function" ? setImmediate : setTimeout;
    function handler(list, shouldAbsorb) {
        return function execute(value) {
            var then;
            try {
                if (shouldAbsorb && value != null && (typeof value === "object" || typeof value === "function") && typeof (then = value.then) === "function") {
                    if (value === self) throw new TypeError("Promise can't be resolved w/ itself");
                    executeOnce(then.bind(value));
                } else callAsync(function() {
                    if (!shouldAbsorb && list.length === 0) console.error("Possible unhandled promise rejection:", value);
                    for(var i = 0; i < list.length; i++)list[i](value);
                    resolvers.length = 0, rejectors.length = 0;
                    instance.state = shouldAbsorb;
                    instance.retry = function() {
                        execute(value);
                    };
                });
            } catch (e) {
                rejectCurrent(e);
            }
        };
    }
    function executeOnce(then) {
        var runs = 0;
        function run(fn) {
            return function(value) {
                if (runs++ > 0) return;
                fn(value);
            };
        }
        var onerror = run(rejectCurrent);
        try {
            then(run(resolveCurrent), onerror);
        } catch (e) {
            onerror(e);
        }
    }
    executeOnce(executor);
};
PromisePolyfill.prototype.then = function(onFulfilled, onRejection) {
    var self = this, instance = self._instance;
    function handle(callback, list, next, state) {
        list.push(function(value) {
            if (typeof callback !== "function") next(value);
            else try {
                resolveNext(callback(value));
            } catch (e) {
                if (rejectNext) rejectNext(e);
            }
        });
        if (typeof instance.retry === "function" && state === instance.state) instance.retry();
    }
    var resolveNext, rejectNext;
    var promise = new PromisePolyfill(function(resolve, reject) {
        resolveNext = resolve, rejectNext = reject;
    });
    handle(onFulfilled, instance.resolvers, resolveNext, true), handle(onRejection, instance.rejectors, rejectNext, false);
    return promise;
};
PromisePolyfill.prototype.catch = function(onRejection) {
    return this.then(null, onRejection);
};
PromisePolyfill.prototype.finally = function(callback) {
    return this.then(function(value) {
        return PromisePolyfill.resolve(callback()).then(function() {
            return value;
        });
    }, function(reason) {
        return PromisePolyfill.resolve(callback()).then(function() {
            return PromisePolyfill.reject(reason);
        });
    });
};
PromisePolyfill.resolve = function(value) {
    if (value instanceof PromisePolyfill) return value;
    return new PromisePolyfill(function(resolve) {
        resolve(value);
    });
};
PromisePolyfill.reject = function(value) {
    return new PromisePolyfill(function(resolve, reject) {
        reject(value);
    });
};
PromisePolyfill.all = function(list) {
    return new PromisePolyfill(function(resolve, reject) {
        var total = list.length, count = 0, values = [];
        if (list.length === 0) resolve([]);
        else for(var i = 0; i < list.length; i++)(function(i) {
            function consume(value) {
                count++;
                values[i] = value;
                if (count === total) resolve(values);
            }
            if (list[i] != null && (typeof list[i] === "object" || typeof list[i] === "function") && typeof list[i].then === "function") list[i].then(consume, reject);
            else consume(list[i]);
        })(i);
    });
};
PromisePolyfill.race = function(list) {
    return new PromisePolyfill(function(resolve, reject) {
        for(var i = 0; i < list.length; i++)list[i].then(resolve, reject);
    });
};
module.exports = PromisePolyfill;

},{}],"jh7iq":[function(require,module,exports) {
"use strict";
var render = require("./render");
module.exports = require("./api/mount-redraw")(render, requestAnimationFrame, console);

},{"./render":"lR5T8","./api/mount-redraw":"8CHiL"}],"lR5T8":[function(require,module,exports) {
"use strict";
module.exports = require("./render/render")(window);

},{"./render/render":"cS6qC"}],"cS6qC":[function(require,module,exports) {
"use strict";
var Vnode = require("../render/vnode");
module.exports = function($window) {
    var $doc = $window && $window.document;
    var currentRedraw;
    var nameSpace = {
        svg: "http://www.w3.org/2000/svg",
        math: "http://www.w3.org/1998/Math/MathML"
    };
    function getNameSpace(vnode) {
        return vnode.attrs && vnode.attrs.xmlns || nameSpace[vnode.tag];
    }
    //sanity check to discourage people from doing `vnode.state = ...`
    function checkState(vnode, original) {
        if (vnode.state !== original) throw new Error("`vnode.state` must not be modified");
    }
    //Note: the hook is passed as the `this` argument to allow proxying the
    //arguments without requiring a full array allocation to do so. It also
    //takes advantage of the fact the current `vnode` is the first argument in
    //all lifecycle methods.
    function callHook(vnode) {
        var original = vnode.state;
        try {
            return this.apply(original, arguments);
        } finally{
            checkState(vnode, original);
        }
    }
    // IE11 (at least) throws an UnspecifiedError when accessing document.activeElement when
    // inside an iframe. Catch and swallow this error, and heavy-handidly return null.
    function activeElement() {
        try {
            return $doc.activeElement;
        } catch (e) {
            return null;
        }
    }
    //create
    function createNodes(parent, vnodes, start, end, hooks, nextSibling, ns) {
        for(var i = start; i < end; i++){
            var vnode = vnodes[i];
            if (vnode != null) createNode(parent, vnode, hooks, ns, nextSibling);
        }
    }
    function createNode(parent, vnode, hooks, ns, nextSibling) {
        var tag = vnode.tag;
        if (typeof tag === "string") {
            vnode.state = {
            };
            if (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks);
            switch(tag){
                case "#":
                    createText(parent, vnode, nextSibling);
                    break;
                case "<":
                    createHTML(parent, vnode, ns, nextSibling);
                    break;
                case "[":
                    createFragment(parent, vnode, hooks, ns, nextSibling);
                    break;
                default:
                    createElement(parent, vnode, hooks, ns, nextSibling);
            }
        } else createComponent(parent, vnode, hooks, ns, nextSibling);
    }
    function createText(parent, vnode, nextSibling) {
        vnode.dom = $doc.createTextNode(vnode.children);
        insertNode(parent, vnode.dom, nextSibling);
    }
    var possibleParents = {
        caption: "table",
        thead: "table",
        tbody: "table",
        tfoot: "table",
        tr: "tbody",
        th: "tr",
        td: "tr",
        colgroup: "table",
        col: "colgroup"
    };
    function createHTML(parent, vnode, ns, nextSibling) {
        var match = vnode.children.match(/^\s*?<(\w+)/im) || [];
        // not using the proper parent makes the child element(s) vanish.
        //     var div = document.createElement("div")
        //     div.innerHTML = "<td>i</td><td>j</td>"
        //     console.log(div.innerHTML)
        // --> "ij", no <td> in sight.
        var temp = $doc.createElement(possibleParents[match[1]] || "div");
        if (ns === "http://www.w3.org/2000/svg") {
            temp.innerHTML = "<svg xmlns=\"http://www.w3.org/2000/svg\">" + vnode.children + "</svg>";
            temp = temp.firstChild;
        } else temp.innerHTML = vnode.children;
        vnode.dom = temp.firstChild;
        vnode.domSize = temp.childNodes.length;
        // Capture nodes to remove, so we don't confuse them.
        vnode.instance = [];
        var fragment = $doc.createDocumentFragment();
        var child;
        while(child = temp.firstChild){
            vnode.instance.push(child);
            fragment.appendChild(child);
        }
        insertNode(parent, fragment, nextSibling);
    }
    function createFragment(parent, vnode, hooks, ns, nextSibling) {
        var fragment = $doc.createDocumentFragment();
        if (vnode.children != null) {
            var children = vnode.children;
            createNodes(fragment, children, 0, children.length, hooks, null, ns);
        }
        vnode.dom = fragment.firstChild;
        vnode.domSize = fragment.childNodes.length;
        insertNode(parent, fragment, nextSibling);
    }
    function createElement(parent, vnode, hooks, ns, nextSibling) {
        var tag = vnode.tag;
        var attrs = vnode.attrs;
        var is = attrs && attrs.is;
        ns = getNameSpace(vnode) || ns;
        var element = ns ? is ? $doc.createElementNS(ns, tag, {
            is: is
        }) : $doc.createElementNS(ns, tag) : is ? $doc.createElement(tag, {
            is: is
        }) : $doc.createElement(tag);
        vnode.dom = element;
        if (attrs != null) setAttrs(vnode, attrs, ns);
        insertNode(parent, element, nextSibling);
        if (!maybeSetContentEditable(vnode)) {
            if (vnode.text != null) {
                if (vnode.text !== "") element.textContent = vnode.text;
                else vnode.children = [
                    Vnode("#", undefined, undefined, vnode.text, undefined, undefined)
                ];
            }
            if (vnode.children != null) {
                var children = vnode.children;
                createNodes(element, children, 0, children.length, hooks, null, ns);
                if (vnode.tag === "select" && attrs != null) setLateSelectAttrs(vnode, attrs);
            }
        }
    }
    function initComponent(vnode, hooks) {
        var sentinel;
        if (typeof vnode.tag.view === "function") {
            vnode.state = Object.create(vnode.tag);
            sentinel = vnode.state.view;
            if (sentinel.$$reentrantLock$$ != null) return;
            sentinel.$$reentrantLock$$ = true;
        } else {
            vnode.state = void 0;
            sentinel = vnode.tag;
            if (sentinel.$$reentrantLock$$ != null) return;
            sentinel.$$reentrantLock$$ = true;
            vnode.state = vnode.tag.prototype != null && typeof vnode.tag.prototype.view === "function" ? new vnode.tag(vnode) : vnode.tag(vnode);
        }
        initLifecycle(vnode.state, vnode, hooks);
        if (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks);
        vnode.instance = Vnode.normalize(callHook.call(vnode.state.view, vnode));
        if (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument");
        sentinel.$$reentrantLock$$ = null;
    }
    function createComponent(parent, vnode, hooks, ns, nextSibling) {
        initComponent(vnode, hooks);
        if (vnode.instance != null) {
            createNode(parent, vnode.instance, hooks, ns, nextSibling);
            vnode.dom = vnode.instance.dom;
            vnode.domSize = vnode.dom != null ? vnode.instance.domSize : 0;
        } else vnode.domSize = 0;
    }
    //update
    /**
	 * @param {Element|Fragment} parent - the parent element
	 * @param {Vnode[] | null} old - the list of vnodes of the last `render()` call for
	 *                               this part of the tree
	 * @param {Vnode[] | null} vnodes - as above, but for the current `render()` call.
	 * @param {Function[]} hooks - an accumulator of post-render hooks (oncreate/onupdate)
	 * @param {Element | null} nextSibling - the next DOM node if we're dealing with a
	 *                                       fragment that is not the last item in its
	 *                                       parent
	 * @param {'svg' | 'math' | String | null} ns) - the current XML namespace, if any
	 * @returns void
	 */ // This function diffs and patches lists of vnodes, both keyed and unkeyed.
    //
    // We will:
    //
    // 1. describe its general structure
    // 2. focus on the diff algorithm optimizations
    // 3. discuss DOM node operations.
    // ## Overview:
    //
    // The updateNodes() function:
    // - deals with trivial cases
    // - determines whether the lists are keyed or unkeyed based on the first non-null node
    //   of each list.
    // - diffs them and patches the DOM if needed (that's the brunt of the code)
    // - manages the leftovers: after diffing, are there:
    //   - old nodes left to remove?
    // 	 - new nodes to insert?
    // 	 deal with them!
    //
    // The lists are only iterated over once, with an exception for the nodes in `old` that
    // are visited in the fourth part of the diff and in the `removeNodes` loop.
    // ## Diffing
    //
    // Reading https://github.com/localvoid/ivi/blob/ddc09d06abaef45248e6133f7040d00d3c6be853/packages/ivi/src/vdom/implementation.ts#L617-L837
    // may be good for context on longest increasing subsequence-based logic for moving nodes.
    //
    // In order to diff keyed lists, one has to
    //
    // 1) match nodes in both lists, per key, and update them accordingly
    // 2) create the nodes present in the new list, but absent in the old one
    // 3) remove the nodes present in the old list, but absent in the new one
    // 4) figure out what nodes in 1) to move in order to minimize the DOM operations.
    //
    // To achieve 1) one can create a dictionary of keys => index (for the old list), then iterate
    // over the new list and for each new vnode, find the corresponding vnode in the old list using
    // the map.
    // 2) is achieved in the same step: if a new node has no corresponding entry in the map, it is new
    // and must be created.
    // For the removals, we actually remove the nodes that have been updated from the old list.
    // The nodes that remain in that list after 1) and 2) have been performed can be safely removed.
    // The fourth step is a bit more complex and relies on the longest increasing subsequence (LIS)
    // algorithm.
    //
    // the longest increasing subsequence is the list of nodes that can remain in place. Imagine going
    // from `1,2,3,4,5` to `4,5,1,2,3` where the numbers are not necessarily the keys, but the indices
    // corresponding to the keyed nodes in the old list (keyed nodes `e,d,c,b,a` => `b,a,e,d,c` would
    //  match the above lists, for example).
    //
    // In there are two increasing subsequences: `4,5` and `1,2,3`, the latter being the longest. We
    // can update those nodes without moving them, and only call `insertNode` on `4` and `5`.
    //
    // @localvoid adapted the algo to also support node deletions and insertions (the `lis` is actually
    // the longest increasing subsequence *of old nodes still present in the new list*).
    //
    // It is a general algorithm that is fireproof in all circumstances, but it requires the allocation
    // and the construction of a `key => oldIndex` map, and three arrays (one with `newIndex => oldIndex`,
    // the `LIS` and a temporary one to create the LIS).
    //
    // So we cheat where we can: if the tails of the lists are identical, they are guaranteed to be part of
    // the LIS and can be updated without moving them.
    //
    // If two nodes are swapped, they are guaranteed not to be part of the LIS, and must be moved (with
    // the exception of the last node if the list is fully reversed).
    //
    // ## Finding the next sibling.
    //
    // `updateNode()` and `createNode()` expect a nextSibling parameter to perform DOM operations.
    // When the list is being traversed top-down, at any index, the DOM nodes up to the previous
    // vnode reflect the content of the new list, whereas the rest of the DOM nodes reflect the old
    // list. The next sibling must be looked for in the old list using `getNextSibling(... oldStart + 1 ...)`.
    //
    // In the other scenarios (swaps, upwards traversal, map-based diff),
    // the new vnodes list is traversed upwards. The DOM nodes at the bottom of the list reflect the
    // bottom part of the new vnodes list, and we can use the `v.dom`  value of the previous node
    // as the next sibling (cached in the `nextSibling` variable).
    // ## DOM node moves
    //
    // In most scenarios `updateNode()` and `createNode()` perform the DOM operations. However,
    // this is not the case if the node moved (second and fourth part of the diff algo). We move
    // the old DOM nodes before updateNode runs because it enables us to use the cached `nextSibling`
    // variable rather than fetching it using `getNextSibling()`.
    //
    // The fourth part of the diff currently inserts nodes unconditionally, leading to issues
    // like #1791 and #1999. We need to be smarter about those situations where adjascent old
    // nodes remain together in the new list in a way that isn't covered by parts one and
    // three of the diff algo.
    function updateNodes(parent, old, vnodes, hooks, nextSibling, ns) {
        if (old === vnodes || old == null && vnodes == null) return;
        else if (old == null || old.length === 0) createNodes(parent, vnodes, 0, vnodes.length, hooks, nextSibling, ns);
        else if (vnodes == null || vnodes.length === 0) removeNodes(parent, old, 0, old.length);
        else {
            var isOldKeyed = old[0] != null && old[0].key != null;
            var isKeyed = vnodes[0] != null && vnodes[0].key != null;
            var start = 0, oldStart = 0;
            if (!isOldKeyed) while(oldStart < old.length && old[oldStart] == null)oldStart++;
            if (!isKeyed) while(start < vnodes.length && vnodes[start] == null)start++;
            if (isKeyed === null && isOldKeyed == null) return; // both lists are full of nulls
            if (isOldKeyed !== isKeyed) {
                removeNodes(parent, old, oldStart, old.length);
                createNodes(parent, vnodes, start, vnodes.length, hooks, nextSibling, ns);
            } else if (!isKeyed) {
                // Don't index past the end of either list (causes deopts).
                var commonLength = old.length < vnodes.length ? old.length : vnodes.length;
                // Rewind if necessary to the first non-null index on either side.
                // We could alternatively either explicitly create or remove nodes when `start !== oldStart`
                // but that would be optimizing for sparse lists which are more rare than dense ones.
                start = start < oldStart ? start : oldStart;
                for(; start < commonLength; start++){
                    o = old[start];
                    v = vnodes[start];
                    if (o === v || o == null && v == null) continue;
                    else if (o == null) createNode(parent, v, hooks, ns, getNextSibling(old, start + 1, nextSibling));
                    else if (v == null) removeNode(parent, o);
                    else updateNode(parent, o, v, hooks, getNextSibling(old, start + 1, nextSibling), ns);
                }
                if (old.length > commonLength) removeNodes(parent, old, start, old.length);
                if (vnodes.length > commonLength) createNodes(parent, vnodes, start, vnodes.length, hooks, nextSibling, ns);
            } else {
                // keyed diff
                var oldEnd = old.length - 1, end = vnodes.length - 1, map, o, v, oe, ve, topSibling;
                // bottom-up
                while(oldEnd >= oldStart && end >= start){
                    oe = old[oldEnd];
                    ve = vnodes[end];
                    if (oe.key !== ve.key) break;
                    if (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns);
                    if (ve.dom != null) nextSibling = ve.dom;
                    oldEnd--, end--;
                }
                // top-down
                while(oldEnd >= oldStart && end >= start){
                    o = old[oldStart];
                    v = vnodes[start];
                    if (o.key !== v.key) break;
                    oldStart++, start++;
                    if (o !== v) updateNode(parent, o, v, hooks, getNextSibling(old, oldStart, nextSibling), ns);
                }
                // swaps and list reversals
                while(oldEnd >= oldStart && end >= start){
                    if (start === end) break;
                    if (o.key !== ve.key || oe.key !== v.key) break;
                    topSibling = getNextSibling(old, oldStart, nextSibling);
                    moveNodes(parent, oe, topSibling);
                    if (oe !== v) updateNode(parent, oe, v, hooks, topSibling, ns);
                    if (++start <= --end) moveNodes(parent, o, nextSibling);
                    if (o !== ve) updateNode(parent, o, ve, hooks, nextSibling, ns);
                    if (ve.dom != null) nextSibling = ve.dom;
                    oldStart++;
                    oldEnd--;
                    oe = old[oldEnd];
                    ve = vnodes[end];
                    o = old[oldStart];
                    v = vnodes[start];
                }
                // bottom up once again
                while(oldEnd >= oldStart && end >= start){
                    if (oe.key !== ve.key) break;
                    if (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns);
                    if (ve.dom != null) nextSibling = ve.dom;
                    oldEnd--, end--;
                    oe = old[oldEnd];
                    ve = vnodes[end];
                }
                if (start > end) removeNodes(parent, old, oldStart, oldEnd + 1);
                else if (oldStart > oldEnd) createNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns);
                else {
                    // inspired by ivi https://github.com/ivijs/ivi/ by Boris Kaul
                    var originalNextSibling = nextSibling, vnodesLength = end - start + 1, oldIndices = new Array(vnodesLength), li = 0, i = 0, pos = 2147483647, matched = 0, map, lisIndices;
                    for(i = 0; i < vnodesLength; i++)oldIndices[i] = -1;
                    for(i = end; i >= start; i--){
                        if (map == null) map = getKeyMap(old, oldStart, oldEnd + 1);
                        ve = vnodes[i];
                        var oldIndex = map[ve.key];
                        if (oldIndex != null) {
                            pos = oldIndex < pos ? oldIndex : -1 // becomes -1 if nodes were re-ordered
                            ;
                            oldIndices[i - start] = oldIndex;
                            oe = old[oldIndex];
                            old[oldIndex] = null;
                            if (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns);
                            if (ve.dom != null) nextSibling = ve.dom;
                            matched++;
                        }
                    }
                    nextSibling = originalNextSibling;
                    if (matched !== oldEnd - oldStart + 1) removeNodes(parent, old, oldStart, oldEnd + 1);
                    if (matched === 0) createNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns);
                    else {
                        if (pos === -1) {
                            // the indices of the indices of the items that are part of the
                            // longest increasing subsequence in the oldIndices list
                            lisIndices = makeLisIndices(oldIndices);
                            li = lisIndices.length - 1;
                            for(i = end; i >= start; i--){
                                v = vnodes[i];
                                if (oldIndices[i - start] === -1) createNode(parent, v, hooks, ns, nextSibling);
                                else if (lisIndices[li] === i - start) li--;
                                else moveNodes(parent, v, nextSibling);
                                if (v.dom != null) nextSibling = vnodes[i].dom;
                            }
                        } else for(i = end; i >= start; i--){
                            v = vnodes[i];
                            if (oldIndices[i - start] === -1) createNode(parent, v, hooks, ns, nextSibling);
                            if (v.dom != null) nextSibling = vnodes[i].dom;
                        }
                    }
                }
            }
        }
    }
    function updateNode(parent, old, vnode, hooks, nextSibling, ns) {
        var oldTag = old.tag, tag = vnode.tag;
        if (oldTag === tag) {
            vnode.state = old.state;
            vnode.events = old.events;
            if (shouldNotUpdate(vnode, old)) return;
            if (typeof oldTag === "string") {
                if (vnode.attrs != null) updateLifecycle(vnode.attrs, vnode, hooks);
                switch(oldTag){
                    case "#":
                        updateText(old, vnode);
                        break;
                    case "<":
                        updateHTML(parent, old, vnode, ns, nextSibling);
                        break;
                    case "[":
                        updateFragment(parent, old, vnode, hooks, nextSibling, ns);
                        break;
                    default:
                        updateElement(old, vnode, hooks, ns);
                }
            } else updateComponent(parent, old, vnode, hooks, nextSibling, ns);
        } else {
            removeNode(parent, old);
            createNode(parent, vnode, hooks, ns, nextSibling);
        }
    }
    function updateText(old, vnode) {
        if (old.children.toString() !== vnode.children.toString()) old.dom.nodeValue = vnode.children;
        vnode.dom = old.dom;
    }
    function updateHTML(parent, old, vnode, ns, nextSibling) {
        if (old.children !== vnode.children) {
            removeHTML(parent, old);
            createHTML(parent, vnode, ns, nextSibling);
        } else {
            vnode.dom = old.dom;
            vnode.domSize = old.domSize;
            vnode.instance = old.instance;
        }
    }
    function updateFragment(parent, old, vnode, hooks, nextSibling, ns) {
        updateNodes(parent, old.children, vnode.children, hooks, nextSibling, ns);
        var domSize = 0, children = vnode.children;
        vnode.dom = null;
        if (children != null) {
            for(var i = 0; i < children.length; i++){
                var child = children[i];
                if (child != null && child.dom != null) {
                    if (vnode.dom == null) vnode.dom = child.dom;
                    domSize += child.domSize || 1;
                }
            }
            if (domSize !== 1) vnode.domSize = domSize;
        }
    }
    function updateElement(old, vnode, hooks, ns) {
        var element = vnode.dom = old.dom;
        ns = getNameSpace(vnode) || ns;
        if (vnode.tag === "textarea") {
            if (vnode.attrs == null) vnode.attrs = {
            };
            if (vnode.text != null) {
                vnode.attrs.value = vnode.text //FIXME handle multiple children
                ;
                vnode.text = undefined;
            }
        }
        updateAttrs(vnode, old.attrs, vnode.attrs, ns);
        if (!maybeSetContentEditable(vnode)) {
            if (old.text != null && vnode.text != null && vnode.text !== "") {
                if (old.text.toString() !== vnode.text.toString()) old.dom.firstChild.nodeValue = vnode.text;
            } else {
                if (old.text != null) old.children = [
                    Vnode("#", undefined, undefined, old.text, undefined, old.dom.firstChild)
                ];
                if (vnode.text != null) vnode.children = [
                    Vnode("#", undefined, undefined, vnode.text, undefined, undefined)
                ];
                updateNodes(element, old.children, vnode.children, hooks, null, ns);
            }
        }
    }
    function updateComponent(parent, old, vnode, hooks, nextSibling, ns) {
        vnode.instance = Vnode.normalize(callHook.call(vnode.state.view, vnode));
        if (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument");
        updateLifecycle(vnode.state, vnode, hooks);
        if (vnode.attrs != null) updateLifecycle(vnode.attrs, vnode, hooks);
        if (vnode.instance != null) {
            if (old.instance == null) createNode(parent, vnode.instance, hooks, ns, nextSibling);
            else updateNode(parent, old.instance, vnode.instance, hooks, nextSibling, ns);
            vnode.dom = vnode.instance.dom;
            vnode.domSize = vnode.instance.domSize;
        } else if (old.instance != null) {
            removeNode(parent, old.instance);
            vnode.dom = undefined;
            vnode.domSize = 0;
        } else {
            vnode.dom = old.dom;
            vnode.domSize = old.domSize;
        }
    }
    function getKeyMap(vnodes, start, end) {
        var map = Object.create(null);
        for(; start < end; start++){
            var vnode = vnodes[start];
            if (vnode != null) {
                var key = vnode.key;
                if (key != null) map[key] = start;
            }
        }
        return map;
    }
    // Lifted from ivi https://github.com/ivijs/ivi/
    // takes a list of unique numbers (-1 is special and can
    // occur multiple times) and returns an array with the indices
    // of the items that are part of the longest increasing
    // subsequece
    var lisTemp = [];
    function makeLisIndices(a) {
        var result = [
            0
        ];
        var u = 0, v = 0, i = 0;
        var il = lisTemp.length = a.length;
        for(var i = 0; i < il; i++)lisTemp[i] = a[i];
        for(var i = 0; i < il; ++i){
            if (a[i] === -1) continue;
            var j = result[result.length - 1];
            if (a[j] < a[i]) {
                lisTemp[i] = j;
                result.push(i);
                continue;
            }
            u = 0;
            v = result.length - 1;
            while(u < v){
                // Fast integer average without overflow.
                // eslint-disable-next-line no-bitwise
                var c = (u >>> 1) + (v >>> 1) + (u & v & 1);
                if (a[result[c]] < a[i]) u = c + 1;
                else v = c;
            }
            if (a[i] < a[result[u]]) {
                if (u > 0) lisTemp[i] = result[u - 1];
                result[u] = i;
            }
        }
        u = result.length;
        v = result[u - 1];
        while(u-- > 0){
            result[u] = v;
            v = lisTemp[v];
        }
        lisTemp.length = 0;
        return result;
    }
    function getNextSibling(vnodes, i, nextSibling) {
        for(; i < vnodes.length; i++){
            if (vnodes[i] != null && vnodes[i].dom != null) return vnodes[i].dom;
        }
        return nextSibling;
    }
    // This covers a really specific edge case:
    // - Parent node is keyed and contains child
    // - Child is removed, returns unresolved promise in `onbeforeremove`
    // - Parent node is moved in keyed diff
    // - Remaining children still need moved appropriately
    //
    // Ideally, I'd track removed nodes as well, but that introduces a lot more
    // complexity and I'm not exactly interested in doing that.
    function moveNodes(parent, vnode, nextSibling) {
        var frag = $doc.createDocumentFragment();
        moveChildToFrag(parent, frag, vnode);
        insertNode(parent, frag, nextSibling);
    }
    function moveChildToFrag(parent, frag, vnode) {
        // Dodge the recursion overhead in a few of the most common cases.
        while(vnode.dom != null && vnode.dom.parentNode === parent){
            if (typeof vnode.tag !== "string") {
                vnode = vnode.instance;
                if (vnode != null) continue;
            } else if (vnode.tag === "<") for(var i = 0; i < vnode.instance.length; i++)frag.appendChild(vnode.instance[i]);
            else if (vnode.tag !== "[") // Don't recurse for text nodes *or* elements, just fragments
            frag.appendChild(vnode.dom);
            else if (vnode.children.length === 1) {
                vnode = vnode.children[0];
                if (vnode != null) continue;
            } else for(var i = 0; i < vnode.children.length; i++){
                var child = vnode.children[i];
                if (child != null) moveChildToFrag(parent, frag, child);
            }
            break;
        }
    }
    function insertNode(parent, dom, nextSibling) {
        if (nextSibling != null) parent.insertBefore(dom, nextSibling);
        else parent.appendChild(dom);
    }
    function maybeSetContentEditable(vnode) {
        if (vnode.attrs == null || vnode.attrs.contenteditable == null && vnode.attrs.contentEditable == null // property
        ) return false;
        var children = vnode.children;
        if (children != null && children.length === 1 && children[0].tag === "<") {
            var content = children[0].children;
            if (vnode.dom.innerHTML !== content) vnode.dom.innerHTML = content;
        } else if (vnode.text != null || children != null && children.length !== 0) throw new Error("Child node of a contenteditable must be trusted");
        return true;
    }
    //remove
    function removeNodes(parent, vnodes, start, end) {
        for(var i = start; i < end; i++){
            var vnode = vnodes[i];
            if (vnode != null) removeNode(parent, vnode);
        }
    }
    function removeNode(parent, vnode) {
        var mask = 0;
        var original = vnode.state;
        var stateResult, attrsResult;
        if (typeof vnode.tag !== "string" && typeof vnode.state.onbeforeremove === "function") {
            var result = callHook.call(vnode.state.onbeforeremove, vnode);
            if (result != null && typeof result.then === "function") {
                mask = 1;
                stateResult = result;
            }
        }
        if (vnode.attrs && typeof vnode.attrs.onbeforeremove === "function") {
            var result = callHook.call(vnode.attrs.onbeforeremove, vnode);
            if (result != null && typeof result.then === "function") {
                // eslint-disable-next-line no-bitwise
                mask |= 2;
                attrsResult = result;
            }
        }
        checkState(vnode, original);
        // If we can, try to fast-path it and avoid all the overhead of awaiting
        if (!mask) {
            onremove(vnode);
            removeChild(parent, vnode);
        } else {
            if (stateResult != null) {
                var next = function() {
                    // eslint-disable-next-line no-bitwise
                    if (mask & 1) {
                        mask &= 2;
                        if (!mask) reallyRemove();
                    }
                };
                stateResult.then(next, next);
            }
            if (attrsResult != null) {
                var next = function() {
                    // eslint-disable-next-line no-bitwise
                    if (mask & 2) {
                        mask &= 1;
                        if (!mask) reallyRemove();
                    }
                };
                attrsResult.then(next, next);
            }
        }
        function reallyRemove() {
            checkState(vnode, original);
            onremove(vnode);
            removeChild(parent, vnode);
        }
    }
    function removeHTML(parent, vnode) {
        for(var i = 0; i < vnode.instance.length; i++)parent.removeChild(vnode.instance[i]);
    }
    function removeChild(parent, vnode) {
        // Dodge the recursion overhead in a few of the most common cases.
        while(vnode.dom != null && vnode.dom.parentNode === parent){
            if (typeof vnode.tag !== "string") {
                vnode = vnode.instance;
                if (vnode != null) continue;
            } else if (vnode.tag === "<") removeHTML(parent, vnode);
            else {
                if (vnode.tag !== "[") {
                    parent.removeChild(vnode.dom);
                    if (!Array.isArray(vnode.children)) break;
                }
                if (vnode.children.length === 1) {
                    vnode = vnode.children[0];
                    if (vnode != null) continue;
                } else for(var i = 0; i < vnode.children.length; i++){
                    var child = vnode.children[i];
                    if (child != null) removeChild(parent, child);
                }
            }
            break;
        }
    }
    function onremove(vnode) {
        if (typeof vnode.tag !== "string" && typeof vnode.state.onremove === "function") callHook.call(vnode.state.onremove, vnode);
        if (vnode.attrs && typeof vnode.attrs.onremove === "function") callHook.call(vnode.attrs.onremove, vnode);
        if (typeof vnode.tag !== "string") {
            if (vnode.instance != null) onremove(vnode.instance);
        } else {
            var children = vnode.children;
            if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
                var child = children[i];
                if (child != null) onremove(child);
            }
        }
    }
    //attrs
    function setAttrs(vnode, attrs, ns) {
        for(var key in attrs)setAttr(vnode, key, null, attrs[key], ns);
    }
    function setAttr(vnode, key, old, value, ns) {
        if (key === "key" || key === "is" || value == null || isLifecycleMethod(key) || old === value && !isFormAttribute(vnode, key) && typeof value !== "object") return;
        if (key[0] === "o" && key[1] === "n") return updateEvent(vnode, key, value);
        if (key.slice(0, 6) === "xlink:") vnode.dom.setAttributeNS("http://www.w3.org/1999/xlink", key.slice(6), value);
        else if (key === "style") updateStyle(vnode.dom, old, value);
        else if (hasPropertyKey(vnode, key, ns)) {
            if (key === "value") {
                // Only do the coercion if we're actually going to check the value.
                /* eslint-disable no-implicit-coercion */ //setting input[value] to same value by typing on focused element moves cursor to end in Chrome
                if ((vnode.tag === "input" || vnode.tag === "textarea") && vnode.dom.value === "" + value && vnode.dom === activeElement()) return;
                //setting select[value] to same value while having select open blinks select dropdown in Chrome
                if (vnode.tag === "select" && old !== null && vnode.dom.value === "" + value) return;
                //setting option[value] to same value while having select open blinks select dropdown in Chrome
                if (vnode.tag === "option" && old !== null && vnode.dom.value === "" + value) return;
            /* eslint-enable no-implicit-coercion */ }
            // If you assign an input type that is not supported by IE 11 with an assignment expression, an error will occur.
            if (vnode.tag === "input" && key === "type") vnode.dom.setAttribute(key, value);
            else vnode.dom[key] = value;
        } else if (typeof value === "boolean") {
            if (value) vnode.dom.setAttribute(key, "");
            else vnode.dom.removeAttribute(key);
        } else vnode.dom.setAttribute(key === "className" ? "class" : key, value);
    }
    function removeAttr(vnode, key, old, ns) {
        if (key === "key" || key === "is" || old == null || isLifecycleMethod(key)) return;
        if (key[0] === "o" && key[1] === "n" && !isLifecycleMethod(key)) updateEvent(vnode, key, undefined);
        else if (key === "style") updateStyle(vnode.dom, old, null);
        else if (hasPropertyKey(vnode, key, ns) && key !== "className" && !(key === "value" && (vnode.tag === "option" || vnode.tag === "select" && vnode.dom.selectedIndex === -1 && vnode.dom === activeElement())) && !(vnode.tag === "input" && key === "type")) vnode.dom[key] = null;
        else {
            var nsLastIndex = key.indexOf(":");
            if (nsLastIndex !== -1) key = key.slice(nsLastIndex + 1);
            if (old !== false) vnode.dom.removeAttribute(key === "className" ? "class" : key);
        }
    }
    function setLateSelectAttrs(vnode, attrs) {
        if ("value" in attrs) {
            if (attrs.value === null) {
                if (vnode.dom.selectedIndex !== -1) vnode.dom.value = null;
            } else {
                var normalized = "" + attrs.value // eslint-disable-line no-implicit-coercion
                ;
                if (vnode.dom.value !== normalized || vnode.dom.selectedIndex === -1) vnode.dom.value = normalized;
            }
        }
        if ("selectedIndex" in attrs) setAttr(vnode, "selectedIndex", null, attrs.selectedIndex, undefined);
    }
    function updateAttrs(vnode, old, attrs, ns) {
        if (attrs != null) for(var key in attrs)setAttr(vnode, key, old && old[key], attrs[key], ns);
        var val;
        if (old != null) {
            for(var key in old)if ((val = old[key]) != null && (attrs == null || attrs[key] == null)) removeAttr(vnode, key, val, ns);
        }
    }
    function isFormAttribute(vnode, attr) {
        return attr === "value" || attr === "checked" || attr === "selectedIndex" || attr === "selected" && vnode.dom === activeElement() || vnode.tag === "option" && vnode.dom.parentNode === $doc.activeElement;
    }
    function isLifecycleMethod(attr) {
        return attr === "oninit" || attr === "oncreate" || attr === "onupdate" || attr === "onremove" || attr === "onbeforeremove" || attr === "onbeforeupdate";
    }
    function hasPropertyKey(vnode, key, ns) {
        // Filter out namespaced keys
        return ns === undefined && // If it's a custom element, just keep it.
        (vnode.tag.indexOf("-") > -1 || vnode.attrs != null && vnode.attrs.is || // If it's a normal element, let's try to avoid a few browser bugs.
        key !== "href" && key !== "list" && key !== "form" && key !== "width" && key !== "height" // && key !== "type"
        ) && key in vnode.dom;
    }
    //style
    var uppercaseRegex = /[A-Z]/g;
    function toLowerCase(capital) {
        return "-" + capital.toLowerCase();
    }
    function normalizeKey(key) {
        return key[0] === "-" && key[1] === "-" ? key : key === "cssFloat" ? "float" : key.replace(uppercaseRegex, toLowerCase);
    }
    function updateStyle(element, old, style) {
        if (old === style) ;
        else if (style == null) // New style is missing, just clear it.
        element.style.cssText = "";
        else if (typeof style !== "object") // New style is a string, let engine deal with patching.
        element.style.cssText = style;
        else if (old == null || typeof old !== "object") {
            // `old` is missing or a string, `style` is an object.
            element.style.cssText = "";
            // Add new style properties
            for(var key in style){
                var value = style[key];
                if (value != null) element.style.setProperty(normalizeKey(key), String(value));
            }
        } else {
            // Both old & new are (different) objects.
            // Update style properties that have changed
            for(var key in style){
                var value = style[key];
                if (value != null && (value = String(value)) !== String(old[key])) element.style.setProperty(normalizeKey(key), value);
            }
            // Remove style properties that no longer exist
            for(var key in old)if (old[key] != null && style[key] == null) element.style.removeProperty(normalizeKey(key));
        }
    }
    // Here's an explanation of how this works:
    // 1. The event names are always (by design) prefixed by `on`.
    // 2. The EventListener interface accepts either a function or an object
    //    with a `handleEvent` method.
    // 3. The object does not inherit from `Object.prototype`, to avoid
    //    any potential interference with that (e.g. setters).
    // 4. The event name is remapped to the handler before calling it.
    // 5. In function-based event handlers, `ev.target === this`. We replicate
    //    that below.
    // 6. In function-based event handlers, `return false` prevents the default
    //    action and stops event propagation. We replicate that below.
    function EventDict() {
        // Save this, so the current redraw is correctly tracked.
        this._ = currentRedraw;
    }
    EventDict.prototype = Object.create(null);
    EventDict.prototype.handleEvent = function(ev) {
        var handler = this["on" + ev.type];
        var result;
        if (typeof handler === "function") result = handler.call(ev.currentTarget, ev);
        else if (typeof handler.handleEvent === "function") handler.handleEvent(ev);
        if (this._ && ev.redraw !== false) (0, this._)();
        if (result === false) {
            ev.preventDefault();
            ev.stopPropagation();
        }
    };
    //event
    function updateEvent(vnode, key, value) {
        if (vnode.events != null) {
            if (vnode.events[key] === value) return;
            if (value != null && (typeof value === "function" || typeof value === "object")) {
                if (vnode.events[key] == null) vnode.dom.addEventListener(key.slice(2), vnode.events, false);
                vnode.events[key] = value;
            } else {
                if (vnode.events[key] != null) vnode.dom.removeEventListener(key.slice(2), vnode.events, false);
                vnode.events[key] = undefined;
            }
        } else if (value != null && (typeof value === "function" || typeof value === "object")) {
            vnode.events = new EventDict();
            vnode.dom.addEventListener(key.slice(2), vnode.events, false);
            vnode.events[key] = value;
        }
    }
    //lifecycle
    function initLifecycle(source, vnode, hooks) {
        if (typeof source.oninit === "function") callHook.call(source.oninit, vnode);
        if (typeof source.oncreate === "function") hooks.push(callHook.bind(source.oncreate, vnode));
    }
    function updateLifecycle(source, vnode, hooks) {
        if (typeof source.onupdate === "function") hooks.push(callHook.bind(source.onupdate, vnode));
    }
    function shouldNotUpdate(vnode, old) {
        do {
            if (vnode.attrs != null && typeof vnode.attrs.onbeforeupdate === "function") {
                var force = callHook.call(vnode.attrs.onbeforeupdate, vnode, old);
                if (force !== undefined && !force) break;
            }
            if (typeof vnode.tag !== "string" && typeof vnode.state.onbeforeupdate === "function") {
                var force = callHook.call(vnode.state.onbeforeupdate, vnode, old);
                if (force !== undefined && !force) break;
            }
            return false;
        }while (false) // eslint-disable-line no-constant-condition
        vnode.dom = old.dom;
        vnode.domSize = old.domSize;
        vnode.instance = old.instance;
        // One would think having the actual latest attributes would be ideal,
        // but it doesn't let us properly diff based on our current internal
        // representation. We have to save not only the old DOM info, but also
        // the attributes used to create it, as we diff *that*, not against the
        // DOM directly (with a few exceptions in `setAttr`). And, of course, we
        // need to save the children and text as they are conceptually not
        // unlike special "attributes" internally.
        vnode.attrs = old.attrs;
        vnode.children = old.children;
        vnode.text = old.text;
        return true;
    }
    return function(dom, vnodes, redraw) {
        if (!dom) throw new TypeError("Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.");
        var hooks = [];
        var active = activeElement();
        var namespace = dom.namespaceURI;
        // First time rendering into a node clears it out
        if (dom.vnodes == null) dom.textContent = "";
        vnodes = Vnode.normalizeChildren(Array.isArray(vnodes) ? vnodes : [
            vnodes
        ]);
        var prevRedraw = currentRedraw;
        try {
            currentRedraw = typeof redraw === "function" ? redraw : undefined;
            updateNodes(dom, dom.vnodes, vnodes, hooks, null, namespace === "http://www.w3.org/1999/xhtml" ? undefined : namespace);
        } finally{
            currentRedraw = prevRedraw;
        }
        dom.vnodes = vnodes;
        // `document.activeElement` can return null: https://html.spec.whatwg.org/multipage/interaction.html#dom-document-activeelement
        if (active != null && activeElement() !== active && typeof active.focus === "function") active.focus();
        for(var i = 0; i < hooks.length; i++)hooks[i]();
    };
};

},{"../render/vnode":"5c56e"}],"8CHiL":[function(require,module,exports) {
"use strict";
var Vnode = require("../render/vnode");
module.exports = function(render, schedule, console) {
    var subscriptions = [];
    var rendering = false;
    var pending = false;
    function sync() {
        if (rendering) throw new Error("Nested m.redraw.sync() call");
        rendering = true;
        for(var i = 0; i < subscriptions.length; i += 2)try {
            render(subscriptions[i], Vnode(subscriptions[i + 1]), redraw);
        } catch (e) {
            console.error(e);
        }
        rendering = false;
    }
    function redraw() {
        if (!pending) {
            pending = true;
            schedule(function() {
                pending = false;
                sync();
            });
        }
    }
    redraw.sync = sync;
    function mount(root, component) {
        if (component != null && component.view == null && typeof component !== "function") throw new TypeError("m.mount(element, component) expects a component, not a vnode");
        var index = subscriptions.indexOf(root);
        if (index >= 0) {
            subscriptions.splice(index, 2);
            render(root, [], redraw);
        }
        if (component != null) {
            subscriptions.push(root, component);
            render(root, Vnode(component), redraw);
        }
    }
    return {
        mount: mount,
        redraw: redraw
    };
};

},{"../render/vnode":"5c56e"}],"8fm7T":[function(require,module,exports) {
"use strict";
var buildPathname = require("../pathname/build");
module.exports = function($window, Promise, oncompletion) {
    var callbackCount = 0;
    function PromiseProxy(executor) {
        return new Promise(executor);
    }
    // In case the global Promise is some userland library's where they rely on
    // `foo instanceof this.constructor`, `this.constructor.resolve(value)`, or
    // similar. Let's *not* break them.
    PromiseProxy.prototype = Promise.prototype;
    PromiseProxy.__proto__ = Promise // eslint-disable-line no-proto
    ;
    function makeRequest(factory) {
        return function(url, args) {
            if (typeof url !== "string") {
                args = url;
                url = url.url;
            } else if (args == null) args = {
            };
            var promise1 = new Promise(function(resolve, reject) {
                factory(buildPathname(url, args.params), args, function(data) {
                    if (typeof args.type === "function") {
                        if (Array.isArray(data)) for(var i = 0; i < data.length; i++)data[i] = new args.type(data[i]);
                        else data = new args.type(data);
                    }
                    resolve(data);
                }, reject);
            });
            if (args.background === true) return promise1;
            var count = 0;
            function complete() {
                if (--count === 0 && typeof oncompletion === "function") oncompletion();
            }
            function wrap(promise) {
                var then = promise.then;
                // Set the constructor, so engines know to not await or resolve
                // this as a native promise. At the time of writing, this is
                // only necessary for V8, but their behavior is the correct
                // behavior per spec. See this spec issue for more details:
                // https://github.com/tc39/ecma262/issues/1577. Also, see the
                // corresponding comment in `request/tests/test-request.js` for
                // a bit more background on the issue at hand.
                promise.constructor = PromiseProxy;
                promise.then = function() {
                    count++;
                    var next = then.apply(promise, arguments);
                    next.then(complete, function(e) {
                        complete();
                        if (count === 0) throw e;
                    });
                    return wrap(next);
                };
                return promise;
            }
            return wrap(promise1);
        };
    }
    function hasHeader(args, name) {
        for(var key in args.headers){
            if (({
            }).hasOwnProperty.call(args.headers, key) && name.test(key)) return true;
        }
        return false;
    }
    return {
        request: makeRequest(function(url, args, resolve, reject) {
            var method = args.method != null ? args.method.toUpperCase() : "GET";
            var body = args.body;
            var assumeJSON = (args.serialize == null || args.serialize === JSON.serialize) && !(body instanceof $window.FormData);
            var responseType = args.responseType || (typeof args.extract === "function" ? "" : "json");
            var xhr = new $window.XMLHttpRequest(), aborted = false;
            var original = xhr, replacedAbort;
            var abort = xhr.abort;
            xhr.abort = function() {
                aborted = true;
                abort.call(this);
            };
            xhr.open(method, url, args.async !== false, typeof args.user === "string" ? args.user : undefined, typeof args.password === "string" ? args.password : undefined);
            if (assumeJSON && body != null && !hasHeader(args, /^content-type$/i)) xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            if (typeof args.deserialize !== "function" && !hasHeader(args, /^accept$/i)) xhr.setRequestHeader("Accept", "application/json, text/*");
            if (args.withCredentials) xhr.withCredentials = args.withCredentials;
            if (args.timeout) xhr.timeout = args.timeout;
            xhr.responseType = responseType;
            for(var key in args.headers)if (({
            }).hasOwnProperty.call(args.headers, key)) xhr.setRequestHeader(key, args.headers[key]);
            xhr.onreadystatechange = function(ev) {
                // Don't throw errors on xhr.abort().
                if (aborted) return;
                if (ev.target.readyState === 4) try {
                    var success = ev.target.status >= 200 && ev.target.status < 300 || ev.target.status === 304 || /^file:\/\//i.test(url);
                    // When the response type isn't "" or "text",
                    // `xhr.responseText` is the wrong thing to use.
                    // Browsers do the right thing and throw here, and we
                    // should honor that and do the right thing by
                    // preferring `xhr.response` where possible/practical.
                    var response = ev.target.response, message;
                    if (responseType === "json") // For IE and Edge, which don't implement
                    // `responseType: "json"`.
                    {
                        if (!ev.target.responseType && typeof args.extract !== "function") response = JSON.parse(ev.target.responseText);
                    } else if (!responseType || responseType === "text") // Only use this default if it's text. If a parsed
                    // document is needed on old IE and friends (all
                    // unsupported), the user should use a custom
                    // `config` instead. They're already using this at
                    // their own risk.
                    {
                        if (response == null) response = ev.target.responseText;
                    }
                    if (typeof args.extract === "function") {
                        response = args.extract(ev.target, args);
                        success = true;
                    } else if (typeof args.deserialize === "function") response = args.deserialize(response);
                    if (success) resolve(response);
                    else {
                        try {
                            message = ev.target.responseText;
                        } catch (e) {
                            message = response;
                        }
                        var error = new Error(message);
                        error.code = ev.target.status;
                        error.response = response;
                        reject(error);
                    }
                } catch (e) {
                    reject(e);
                }
            };
            if (typeof args.config === "function") {
                xhr = args.config(xhr, args, url) || xhr;
                // Propagate the `abort` to any replacement XHR as well.
                if (xhr !== original) {
                    replacedAbort = xhr.abort;
                    xhr.abort = function() {
                        aborted = true;
                        replacedAbort.call(this);
                    };
                }
            }
            if (body == null) xhr.send();
            else if (typeof args.serialize === "function") xhr.send(args.serialize(body));
            else if (body instanceof $window.FormData) xhr.send(body);
            else xhr.send(JSON.stringify(body));
        }),
        jsonp: makeRequest(function(url, args, resolve, reject) {
            var callbackName = args.callbackName || "_mithril_" + Math.round(Math.random() * 10000000000000000) + "_" + callbackCount++;
            var script = $window.document.createElement("script");
            $window[callbackName] = function(data) {
                delete $window[callbackName];
                script.parentNode.removeChild(script);
                resolve(data);
            };
            script.onerror = function() {
                delete $window[callbackName];
                script.parentNode.removeChild(script);
                reject(new Error("JSONP request failed"));
            };
            script.src = url + (url.indexOf("?") < 0 ? "?" : "&") + encodeURIComponent(args.callbackKey || "callback") + "=" + encodeURIComponent(callbackName);
            $window.document.documentElement.appendChild(script);
        })
    };
};

},{"../pathname/build":"k2dgA"}],"k2dgA":[function(require,module,exports) {
"use strict";
var buildQueryString = require("../querystring/build");
var assign = require("./assign");
// Returns `path` from `template` + `params`
module.exports = function(template, params) {
    if (/:([^\/\.-]+)(\.{3})?:/.test(template)) throw new SyntaxError("Template parameter names *must* be separated");
    if (params == null) return template;
    var queryIndex = template.indexOf("?");
    var hashIndex = template.indexOf("#");
    var queryEnd = hashIndex < 0 ? template.length : hashIndex;
    var pathEnd = queryIndex < 0 ? queryEnd : queryIndex;
    var path = template.slice(0, pathEnd);
    var query = {
    };
    assign(query, params);
    var resolved = path.replace(/:([^\/\.-]+)(\.{3})?/g, function(m, key, variadic) {
        delete query[key];
        // If no such parameter exists, don't interpolate it.
        if (params[key] == null) return m;
        // Escape normal parameters, but not variadic ones.
        return variadic ? params[key] : encodeURIComponent(String(params[key]));
    });
    // In case the template substitution adds new query/hash parameters.
    var newQueryIndex = resolved.indexOf("?");
    var newHashIndex = resolved.indexOf("#");
    var newQueryEnd = newHashIndex < 0 ? resolved.length : newHashIndex;
    var newPathEnd = newQueryIndex < 0 ? newQueryEnd : newQueryIndex;
    var result = resolved.slice(0, newPathEnd);
    if (queryIndex >= 0) result += template.slice(queryIndex, queryEnd);
    if (newQueryIndex >= 0) result += (queryIndex < 0 ? "?" : "&") + resolved.slice(newQueryIndex, newQueryEnd);
    var querystring = buildQueryString(query);
    if (querystring) result += (queryIndex < 0 && newQueryIndex < 0 ? "?" : "&") + querystring;
    if (hashIndex >= 0) result += template.slice(hashIndex);
    if (newHashIndex >= 0) result += (hashIndex < 0 ? "" : "&") + resolved.slice(newHashIndex);
    return result;
};

},{"../querystring/build":"fbqKb","./assign":"asFVn"}],"fbqKb":[function(require,module,exports) {
"use strict";
module.exports = function(object) {
    if (Object.prototype.toString.call(object) !== "[object Object]") return "";
    var args = [];
    for(var key1 in object)destructure(key1, object[key1]);
    function destructure(key, value) {
        if (Array.isArray(value)) {
            for(var i = 0; i < value.length; i++){
                destructure(key + "[" + i + "]", value[i]);
            }
        } else if (Object.prototype.toString.call(value) === "[object Object]") {
            for(var i in value){
                destructure(key + "[" + i + "]", value[i]);
            }
        } else args.push(encodeURIComponent(key) + (value != null && value !== "" ? "=" + encodeURIComponent(value) : ""));
    }
    return args.join("&");
};

},{}],"asFVn":[function(require,module,exports) {
"use strict";
module.exports = Object.assign || function(target, source) {
    if (source) Object.keys(source).forEach(function(key) {
        target[key] = source[key];
    });
};

},{}],"4SNaV":[function(require,module,exports) {
"use strict";
var mountRedraw = require("./mount-redraw");
module.exports = require("./api/router")(window, mountRedraw);

},{"./mount-redraw":"jh7iq","./api/router":"iaKFj"}],"iaKFj":[function(require,module,exports) {
"use strict";
var Vnode = require("../render/vnode");
var m = require("../render/hyperscript");
var Promise = require("../promise/promise");
var buildPathname = require("../pathname/build");
var parsePathname = require("../pathname/parse");
var compileTemplate = require("../pathname/compileTemplate");
var assign = require("../pathname/assign");
var sentinel = {
};
module.exports = function($window, mountRedraw) {
    var fireAsync;
    function setPath(path, data, options) {
        path = buildPathname(path, data);
        if (fireAsync != null) {
            fireAsync();
            var state = options ? options.state : null;
            var title = options ? options.title : null;
            if (options && options.replace) $window.history.replaceState(state, title, route1.prefix + path);
            else $window.history.pushState(state, title, route1.prefix + path);
        } else $window.location.href = route1.prefix + path;
    }
    var currentResolver = sentinel, component, attrs1, currentPath, lastUpdate;
    var SKIP = route1.SKIP = {
    };
    function route1(root, defaultRoute, routes) {
        if (root == null) throw new Error("Ensure the DOM element that was passed to `m.route` is not undefined");
        // 0 = start
        // 1 = init
        // 2 = ready
        var state = 0;
        var compiled = Object.keys(routes).map(function(route) {
            if (route[0] !== "/") throw new SyntaxError("Routes must start with a `/`");
            if (/:([^\/\.-]+)(\.{3})?:/.test(route)) throw new SyntaxError("Route parameter names must be separated with either `/`, `.`, or `-`");
            return {
                route: route,
                component: routes[route],
                check: compileTemplate(route)
            };
        });
        var callAsync = typeof setImmediate === "function" ? setImmediate : setTimeout;
        var p = Promise.resolve();
        var scheduled = false;
        var onremove;
        fireAsync = null;
        if (defaultRoute != null) {
            var defaultData = parsePathname(defaultRoute);
            if (!compiled.some(function(i) {
                return i.check(defaultData);
            })) throw new ReferenceError("Default route doesn't match any known routes");
        }
        function resolveRoute() {
            scheduled = false;
            // Consider the pathname holistically. The prefix might even be invalid,
            // but that's not our problem.
            var prefix = $window.location.hash;
            if (route1.prefix[0] !== "#") {
                prefix = $window.location.search + prefix;
                if (route1.prefix[0] !== "?") {
                    prefix = $window.location.pathname + prefix;
                    if (prefix[0] !== "/") prefix = "/" + prefix;
                }
            }
            // This seemingly useless `.concat()` speeds up the tests quite a bit,
            // since the representation is consistently a relatively poorly
            // optimized cons string.
            var path = prefix.concat().replace(/(?:%[a-f89][a-f0-9])+/gim, decodeURIComponent).slice(route1.prefix.length);
            var data = parsePathname(path);
            assign(data.params, $window.history.state);
            function fail() {
                if (path === defaultRoute) throw new Error("Could not resolve default route " + defaultRoute);
                setPath(defaultRoute, null, {
                    replace: true
                });
            }
            loop(0);
            function loop(i) {
                // 0 = init
                // 1 = scheduled
                // 2 = done
                for(; i < compiled.length; i++)if (compiled[i].check(data)) {
                    var payload = compiled[i].component;
                    var matchedRoute = compiled[i].route;
                    var localComp = payload;
                    var update = lastUpdate = function(comp) {
                        if (update !== lastUpdate) return;
                        if (comp === SKIP) return loop(i + 1);
                        component = comp != null && (typeof comp.view === "function" || typeof comp === "function") ? comp : "div";
                        attrs1 = data.params, currentPath = path, lastUpdate = null;
                        currentResolver = payload.render ? payload : null;
                        if (state === 2) mountRedraw.redraw();
                        else {
                            state = 2;
                            mountRedraw.redraw.sync();
                        }
                    };
                    // There's no understating how much I *wish* I could
                    // use `async`/`await` here...
                    if (payload.view || typeof payload === "function") {
                        payload = {
                        };
                        update(localComp);
                    } else if (payload.onmatch) p.then(function() {
                        return payload.onmatch(data.params, path, matchedRoute);
                    }).then(update, fail);
                    else update("div");
                    return;
                }
                fail();
            }
        }
        // Set it unconditionally so `m.route.set` and `m.route.Link` both work,
        // even if neither `pushState` nor `hashchange` are supported. It's
        // cleared if `hashchange` is used, since that makes it automatically
        // async.
        fireAsync = function() {
            if (!scheduled) {
                scheduled = true;
                callAsync(resolveRoute);
            }
        };
        if (typeof $window.history.pushState === "function") {
            onremove = function() {
                $window.removeEventListener("popstate", fireAsync, false);
            };
            $window.addEventListener("popstate", fireAsync, false);
        } else if (route1.prefix[0] === "#") {
            fireAsync = null;
            onremove = function() {
                $window.removeEventListener("hashchange", resolveRoute, false);
            };
            $window.addEventListener("hashchange", resolveRoute, false);
        }
        return mountRedraw.mount(root, {
            onbeforeupdate: function() {
                state = state ? 2 : 1;
                return !(!state || sentinel === currentResolver);
            },
            oncreate: resolveRoute,
            onremove: onremove,
            view: function() {
                if (!state || sentinel === currentResolver) return;
                // Wrap in a fragment to preserve existing key semantics
                var vnode = [
                    Vnode(component, attrs1.key, attrs1)
                ];
                if (currentResolver) vnode = currentResolver.render(vnode[0]);
                return vnode;
            }
        });
    }
    route1.set = function(path, data, options) {
        if (lastUpdate != null) {
            options = options || {
            };
            options.replace = true;
        }
        lastUpdate = null;
        setPath(path, data, options);
    };
    route1.get = function() {
        return currentPath;
    };
    route1.prefix = "#!";
    route1.Link = {
        view: function(vnode) {
            var options = vnode.attrs.options;
            // Remove these so they don't get overwritten
            var attrs = {
            }, onclick, href;
            assign(attrs, vnode.attrs);
            // The first two are internal, but the rest are magic attributes
            // that need censored to not screw up rendering.
            attrs.selector = attrs.options = attrs.key = attrs.oninit = attrs.oncreate = attrs.onbeforeupdate = attrs.onupdate = attrs.onbeforeremove = attrs.onremove = null;
            // Do this now so we can get the most current `href` and `disabled`.
            // Those attributes may also be specified in the selector, and we
            // should honor that.
            var child = m(vnode.attrs.selector || "a", attrs, vnode.children);
            // Let's provide a *right* way to disable a route link, rather than
            // letting people screw up accessibility on accident.
            //
            // The attribute is coerced so users don't get surprised over
            // `disabled: 0` resulting in a button that's somehow routable
            // despite being visibly disabled.
            if (child.attrs.disabled = Boolean(child.attrs.disabled)) {
                child.attrs.href = null;
                child.attrs["aria-disabled"] = "true";
                // If you *really* do want to do this on a disabled link, use
                // an `oncreate` hook to add it.
                child.attrs.onclick = null;
            } else {
                onclick = child.attrs.onclick;
                href = child.attrs.href;
                child.attrs.href = route1.prefix + href;
                child.attrs.onclick = function(e) {
                    var result;
                    if (typeof onclick === "function") result = onclick.call(e.currentTarget, e);
                    else if (onclick == null || typeof onclick !== "object") ;
                    else if (typeof onclick.handleEvent === "function") onclick.handleEvent(e);
                    // Adapted from React Router's implementation:
                    // https://github.com/ReactTraining/react-router/blob/520a0acd48ae1b066eb0b07d6d4d1790a1d02482/packages/react-router-dom/modules/Link.js
                    //
                    // Try to be flexible and intuitive in how we handle links.
                    // Fun fact: links aren't as obvious to get right as you
                    // would expect. There's a lot more valid ways to click a
                    // link than this, and one might want to not simply click a
                    // link, but right click or command-click it to copy the
                    // link target, etc. Nope, this isn't just for blind people.
                    if (// Skip if `onclick` prevented default
                    result !== false && !e.defaultPrevented && (e.button === 0 || e.which === 0 || e.which === 1) && (!e.currentTarget.target || e.currentTarget.target === "_self") && // No modifier keys
                    !e.ctrlKey && !e.metaKey && !e.shiftKey && !e.altKey) {
                        e.preventDefault();
                        e.redraw = false;
                        route1.set(href, null, options);
                    }
                };
            }
            return child;
        }
    };
    route1.param = function(key) {
        return attrs1 && key != null ? attrs1[key] : attrs1;
    };
    return route1;
};

},{"../render/vnode":"5c56e","../render/hyperscript":"js0vQ","../promise/promise":"298EJ","../pathname/build":"k2dgA","../pathname/parse":"jK2nr","../pathname/compileTemplate":"cVcAy","../pathname/assign":"asFVn"}],"jK2nr":[function(require,module,exports) {
"use strict";
var parseQueryString = require("../querystring/parse");
// Returns `{path, params}` from `url`
module.exports = function(url) {
    var queryIndex = url.indexOf("?");
    var hashIndex = url.indexOf("#");
    var queryEnd = hashIndex < 0 ? url.length : hashIndex;
    var pathEnd = queryIndex < 0 ? queryEnd : queryIndex;
    var path = url.slice(0, pathEnd).replace(/\/{2,}/g, "/");
    if (!path) path = "/";
    else {
        if (path[0] !== "/") path = "/" + path;
        if (path.length > 1 && path[path.length - 1] === "/") path = path.slice(0, -1);
    }
    return {
        path: path,
        params: queryIndex < 0 ? {
        } : parseQueryString(url.slice(queryIndex + 1, queryEnd))
    };
};

},{"../querystring/parse":"ZeRxY"}],"ZeRxY":[function(require,module,exports) {
"use strict";
module.exports = function(string) {
    if (string === "" || string == null) return {
    };
    if (string.charAt(0) === "?") string = string.slice(1);
    var entries = string.split("&"), counters = {
    }, data = {
    };
    for(var i = 0; i < entries.length; i++){
        var entry = entries[i].split("=");
        var key = decodeURIComponent(entry[0]);
        var value = entry.length === 2 ? decodeURIComponent(entry[1]) : "";
        if (value === "true") value = true;
        else if (value === "false") value = false;
        var levels = key.split(/\]\[?|\[/);
        var cursor = data;
        if (key.indexOf("[") > -1) levels.pop();
        for(var j = 0; j < levels.length; j++){
            var level = levels[j], nextLevel = levels[j + 1];
            var isNumber = nextLevel == "" || !isNaN(parseInt(nextLevel, 10));
            if (level === "") {
                var key = levels.slice(0, j).join();
                if (counters[key] == null) counters[key] = Array.isArray(cursor) ? cursor.length : 0;
                level = counters[key]++;
            } else if (level === "__proto__") break;
            if (j === levels.length - 1) cursor[level] = value;
            else {
                // Read own properties exclusively to disallow indirect
                // prototype pollution
                var desc = Object.getOwnPropertyDescriptor(cursor, level);
                if (desc != null) desc = desc.value;
                if (desc == null) cursor[level] = desc = isNumber ? [] : {
                };
                cursor = desc;
            }
        }
    }
    return data;
};

},{}],"cVcAy":[function(require,module,exports) {
"use strict";
var parsePathname = require("./parse");
// Compiles a template into a function that takes a resolved path (without query
// strings) and returns an object containing the template parameters with their
// parsed values. This expects the input of the compiled template to be the
// output of `parsePathname`. Note that it does *not* remove query parameters
// specified in the template.
module.exports = function(template) {
    var templateData = parsePathname(template);
    var templateKeys = Object.keys(templateData.params);
    var keys = [];
    var regexp = new RegExp("^" + templateData.path.replace(// I escape literal text so people can use things like `:file.:ext` or
    // `:lang-:locale` in routes. This is all merged into one pass so I
    // don't also accidentally escape `-` and make it harder to detect it to
    // ban it from template parameters.
    /:([^\/.-]+)(\.{3}|\.(?!\.)|-)?|[\\^$*+.()|\[\]{}]/g, function(m, key, extra) {
        if (key == null) return "\\" + m;
        keys.push({
            k: key,
            r: extra === "..."
        });
        if (extra === "...") return "(.*)";
        if (extra === ".") return "([^/]+)\\.";
        return "([^/]+)" + (extra || "");
    }) + "$");
    return function(data) {
        // First, check the params. Usually, there isn't any, and it's just
        // checking a static set.
        for(var i = 0; i < templateKeys.length; i++){
            if (templateData.params[templateKeys[i]] !== data.params[templateKeys[i]]) return false;
        }
        // If no interpolations exist, let's skip all the ceremony
        if (!keys.length) return regexp.test(data.path);
        var values = regexp.exec(data.path);
        if (values == null) return false;
        for(var i = 0; i < keys.length; i++)data.params[keys[i].k] = keys[i].r ? values[i + 1] : decodeURIComponent(values[i + 1]);
        return true;
    };
};

},{"./parse":"jK2nr"}],"iBBNK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _buttonJsx = require("./button/button.jsx");
var _buttonJsxDefault = parcelHelpers.interopDefault(_buttonJsx);
var _breadcrumbJsx = require("./breadcrumb/breadcrumb.jsx");
var _breadcrumbJsxDefault = parcelHelpers.interopDefault(_breadcrumbJsx);
var _cardJsx = require("./card/card.jsx");
var _cardJsxDefault = parcelHelpers.interopDefault(_cardJsx);
var _checkboxJsx = require("./checkbox/checkbox.jsx");
var _checkboxJsxDefault = parcelHelpers.interopDefault(_checkboxJsx);
var _containerJsx = require("./container/container.jsx");
var _containerJsxDefault = parcelHelpers.interopDefault(_containerJsx);
var _datePickerJsx = require("./date-picker/date-picker.jsx");
var _datePickerJsxDefault = parcelHelpers.interopDefault(_datePickerJsx);
var _dateRangeJsx = require("./date-range/date-range.jsx");
var _dateRangeJsxDefault = parcelHelpers.interopDefault(_dateRangeJsx);
var _iconButtonJsx = require("./icon-button/icon-button.jsx");
var _iconButtonJsxDefault = parcelHelpers.interopDefault(_iconButtonJsx);
var _modalJsx = require("./modal/modal.jsx");
var _modalJsxDefault = parcelHelpers.interopDefault(_modalJsx);
var _navJsx = require("./nav/nav.jsx");
var _navJsxDefault = parcelHelpers.interopDefault(_navJsx);
var _navRailJsx = require("./nav-rail/nav-rail.jsx");
var _navRailJsxDefault = parcelHelpers.interopDefault(_navRailJsx);
var _popoverJsx = require("./popover/popover.jsx");
var _popoverJsxDefault = parcelHelpers.interopDefault(_popoverJsx);
var _radioJsx = require("./radio/radio.jsx");
var _radioJsxDefault = parcelHelpers.interopDefault(_radioJsx);
var _selectJsx = require("./select/select.jsx");
var _selectJsxDefault = parcelHelpers.interopDefault(_selectJsx);
var _spinnerJsx = require("./spinner/spinner.jsx");
var _spinnerJsxDefault = parcelHelpers.interopDefault(_spinnerJsx);
var _stepsJsx = require("./steps/steps.jsx");
var _stepsJsxDefault = parcelHelpers.interopDefault(_stepsJsx);
var _textFieldJsx = require("./text-field/text-field.jsx");
var _textFieldJsxDefault = parcelHelpers.interopDefault(_textFieldJsx);
var _textTooltipJsx = require("./text-tooltip/text-tooltip.jsx");
var _textTooltipJsxDefault = parcelHelpers.interopDefault(_textTooltipJsx);
var _toastOutletJsx = require("./toast-outlet/toast-outlet.jsx");
var _toastOutletJsxDefault = parcelHelpers.interopDefault(_toastOutletJsx);
module.exports = {
    Button: _buttonJsxDefault.default,
    Breadcrumb: _breadcrumbJsxDefault.default,
    Card: _cardJsxDefault.default,
    Checkbox: _checkboxJsxDefault.default,
    Container: _containerJsxDefault.default,
    DatePicker: _datePickerJsxDefault.default,
    DateRange: _dateRangeJsxDefault.default,
    IconButton: _iconButtonJsxDefault.default,
    Modal: _modalJsxDefault.default,
    Nav: _navJsxDefault.default,
    NavRail: _navRailJsxDefault.default,
    Popover: _popoverJsxDefault.default,
    Radio: _radioJsxDefault.default,
    Select: _selectJsxDefault.default,
    Spinner: _spinnerJsxDefault.default,
    Steps: _stepsJsxDefault.default,
    TextField: _textFieldJsxDefault.default,
    TextTooltip: _textTooltipJsxDefault.default,
    ToastOutlet: _toastOutletJsxDefault.default
};

},{"./button/button.jsx":"5XQAq","./breadcrumb/breadcrumb.jsx":"ewPxH","./card/card.jsx":"ko7Hg","./checkbox/checkbox.jsx":"7WNMs","./container/container.jsx":"b7kB2","./date-picker/date-picker.jsx":"gL37S","./date-range/date-range.jsx":"9YHt0","./icon-button/icon-button.jsx":"lIf9M","./modal/modal.jsx":"e4wIh","./nav/nav.jsx":"fJxCj","./nav-rail/nav-rail.jsx":"4j3WA","./popover/popover.jsx":"1gePv","./radio/radio.jsx":"8A58i","./select/select.jsx":"lxUUx","./spinner/spinner.jsx":"8O6sG","./steps/steps.jsx":"1cD4S","./text-field/text-field.jsx":"ifkQA","./text-tooltip/text-tooltip.jsx":"kRDDv","./toast-outlet/toast-outlet.jsx":"aFNYX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5XQAq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _ripple = require("@material/ripple");
class Button {
    constructor(){
        this.buttonClass = 'mdc-button';
        this.optionDefaults = {
            class: null,
            disabled: false,
            iconLeading: null,
            iconTrailing: null,
            label: '',
            onclick: null,
            outlined: false,
            raised: false,
            ripple: true,
            style: null
        };
        this.options = null;
        this.mdcRipple = null;
    }
    assignOptions(vnode) {
        this.options = Object.assign({
        }, this.optionDefaults, vnode.attrs);
    }
    setClass() {
        this.buttonClass = 'mdc-button';
        if (this.options.raised) this.buttonClass += ' mdc-button--raised';
        if (this.options.outlined) this.buttonClass += ' mdc-button--outlined';
        if (this.options.iconLeading) this.buttonClass += ' mdc-button--icon-leading';
        if (this.options.iconTrailing) this.buttonClass += ' mdc-button--icon-trailing';
        if (this.options.class) this.buttonClass += ` ${this.options.class}`;
    }
    oninit(vnode1) {
        this.assignOptions(vnode1);
        this.setClass();
    }
    oncreate(vnode2) {
        if (this.options.ripple) try {
            this.mdcRipple = new _ripple.MDCRipple(vnode2.dom);
        } catch (e) {
        }
    }
    onbeforeupdate(vnode3) {
        this.assignOptions(vnode3);
        this.setClass();
    }
    view(vnode4) {
        return _mithrilDefault.default("button", {
            class: this.buttonClass,
            style: this.options.style,
            disabled: this.options.disabled,
            onclick: this.options.onclick
        }, _mithrilDefault.default("div", {
            class: "mdc-button__ripple"
        }), this.options.iconLeading && _mithrilDefault.default("div", {
            class: "mdc-button__icon"
        }, _mithrilDefault.default("span", {
            class: "material-icons md-18"
        }, this.options.iconLeading)), _mithrilDefault.default("span", {
            class: "mdc-button__label"
        }, this.options.label), this.options.iconTrailing && _mithrilDefault.default("div", {
            class: "mdc-button__icon"
        }, _mithrilDefault.default("span", {
            class: "material-icons md-18"
        }, this.options.iconTrailing)));
    }
}
module.exports = Button;

},{"mithril":"1zcoP","@material/ripple":"jRAE3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jRAE3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "util", ()=>_util
);
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _util = require("./util");
var _adapter = require("./adapter");
parcelHelpers.exportAll(_adapter, exports);
var _component = require("./component");
parcelHelpers.exportAll(_component, exports);
var _constants = require("./constants");
parcelHelpers.exportAll(_constants, exports);
var _foundation = require("./foundation");
parcelHelpers.exportAll(_foundation, exports);
var _types = require("./types");
parcelHelpers.exportAll(_types, exports);

},{"./util":"l3az5","./adapter":"9CpwK","./component":"035sE","./constants":"lg1jP","./foundation":"7frpT","./types":"xrl7V","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l3az5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "supportsCssVariables", ()=>supportsCssVariables
);
parcelHelpers.export(exports, "getNormalizedEventCoords", ()=>getNormalizedEventCoords
);
/**
 * Stores result from supportsCssVariables to avoid redundant processing to
 * detect CSS custom variable support.
 */ var supportsCssVariables_;
function supportsCssVariables(windowObj, forceRefresh) {
    if (forceRefresh === void 0) forceRefresh = false;
    var CSS = windowObj.CSS;
    var supportsCssVars = supportsCssVariables_;
    if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) return supportsCssVariables_;
    var supportsFunctionPresent = CSS && typeof CSS.supports === 'function';
    if (!supportsFunctionPresent) return false;
    var explicitlySupportsCssVars = CSS.supports('--css-vars', 'yes');
    // See: https://bugs.webkit.org/show_bug.cgi?id=154669
    // See: README section on Safari
    var weAreFeatureDetectingSafari10plus = CSS.supports('(--css-vars: yes)') && CSS.supports('color', '#00000000');
    supportsCssVars = explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus;
    if (!forceRefresh) supportsCssVariables_ = supportsCssVars;
    return supportsCssVars;
}
function getNormalizedEventCoords(evt, pageOffset, clientRect) {
    if (!evt) return {
        x: 0,
        y: 0
    };
    var x = pageOffset.x, y = pageOffset.y;
    var documentX = x + clientRect.left;
    var documentY = y + clientRect.top;
    var normalizedX;
    var normalizedY;
    // Determine touch point relative to the ripple container.
    if (evt.type === 'touchstart') {
        var touchEvent = evt;
        normalizedX = touchEvent.changedTouches[0].pageX - documentX;
        normalizedY = touchEvent.changedTouches[0].pageY - documentY;
    } else {
        var mouseEvent = evt;
        normalizedX = mouseEvent.pageX - documentX;
        normalizedY = mouseEvent.pageY - documentY;
    }
    return {
        x: normalizedX,
        y: normalizedY
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"9CpwK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"035sE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCRipple", ()=>MDCRipple1
);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _component = require("@material/base/component");
var _events = require("@material/dom/events");
var _ponyfill = require("@material/dom/ponyfill");
var _foundation = require("./foundation");
var _util = require("./util");
var MDCRipple1 = function(_super) {
    _tslib.__extends(MDCRipple, _super);
    function MDCRipple() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.disabled = false;
        return _this;
    }
    MDCRipple.attachTo = function(root, opts) {
        if (opts === void 0) opts = {
            isUnbounded: undefined
        };
        var ripple = new MDCRipple(root);
        // Only override unbounded behavior if option is explicitly specified
        if (opts.isUnbounded !== undefined) ripple.unbounded = opts.isUnbounded;
        return ripple;
    };
    MDCRipple.createAdapter = function(instance) {
        return {
            addClass: function(className) {
                return instance.root.classList.add(className);
            },
            browserSupportsCssVars: function() {
                return _util.supportsCssVariables(window);
            },
            computeBoundingRect: function() {
                return instance.root.getBoundingClientRect();
            },
            containsEventTarget: function(target) {
                return instance.root.contains(target);
            },
            deregisterDocumentInteractionHandler: function(evtType, handler) {
                return document.documentElement.removeEventListener(evtType, handler, _events.applyPassive());
            },
            deregisterInteractionHandler: function(evtType, handler) {
                return instance.root.removeEventListener(evtType, handler, _events.applyPassive());
            },
            deregisterResizeHandler: function(handler) {
                return window.removeEventListener('resize', handler);
            },
            getWindowPageOffset: function() {
                return {
                    x: window.pageXOffset,
                    y: window.pageYOffset
                };
            },
            isSurfaceActive: function() {
                return _ponyfill.matches(instance.root, ':active');
            },
            isSurfaceDisabled: function() {
                return Boolean(instance.disabled);
            },
            isUnbounded: function() {
                return Boolean(instance.unbounded);
            },
            registerDocumentInteractionHandler: function(evtType, handler) {
                return document.documentElement.addEventListener(evtType, handler, _events.applyPassive());
            },
            registerInteractionHandler: function(evtType, handler) {
                return instance.root.addEventListener(evtType, handler, _events.applyPassive());
            },
            registerResizeHandler: function(handler) {
                return window.addEventListener('resize', handler);
            },
            removeClass: function(className) {
                return instance.root.classList.remove(className);
            },
            updateCssVariable: function(varName, value) {
                return instance.root.style.setProperty(varName, value);
            }
        };
    };
    Object.defineProperty(MDCRipple.prototype, "unbounded", {
        get: function() {
            return Boolean(this.isUnbounded);
        },
        set: function(unbounded) {
            this.isUnbounded = Boolean(unbounded);
            this.setUnbounded();
        },
        enumerable: false,
        configurable: true
    });
    MDCRipple.prototype.activate = function() {
        this.foundation.activate();
    };
    MDCRipple.prototype.deactivate = function() {
        this.foundation.deactivate();
    };
    MDCRipple.prototype.layout = function() {
        this.foundation.layout();
    };
    MDCRipple.prototype.getDefaultFoundation = function() {
        return new _foundation.MDCRippleFoundation(MDCRipple.createAdapter(this));
    };
    MDCRipple.prototype.initialSyncWithDOM = function() {
        var root = this.root;
        this.isUnbounded = 'mdcRippleIsUnbounded' in root.dataset;
    };
    /**
     * Closure Compiler throws an access control error when directly accessing a
     * protected or private property inside a getter/setter, like unbounded above.
     * By accessing the protected property inside a method, we solve that problem.
     * That's why this function exists.
     */ MDCRipple.prototype.setUnbounded = function() {
        this.foundation.setUnbounded(Boolean(this.isUnbounded));
    };
    return MDCRipple;
}(_component.MDCComponent);

},{"tslib":"lRdW5","@material/base/component":"jLptS","@material/dom/events":"87xmx","@material/dom/ponyfill":"8pLcv","./foundation":"7frpT","./util":"l3az5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lRdW5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends
);
parcelHelpers.export(exports, "__assign", ()=>__assign
);
parcelHelpers.export(exports, "__rest", ()=>__rest
);
parcelHelpers.export(exports, "__decorate", ()=>__decorate
);
parcelHelpers.export(exports, "__param", ()=>__param
);
parcelHelpers.export(exports, "__metadata", ()=>__metadata
);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter
);
parcelHelpers.export(exports, "__generator", ()=>__generator
);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding
);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar
);
parcelHelpers.export(exports, "__values", ()=>__values
);
parcelHelpers.export(exports, "__read", ()=>__read
);
/** @deprecated */ parcelHelpers.export(exports, "__spread", ()=>__spread
);
/** @deprecated */ parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays
);
parcelHelpers.export(exports, "__spreadArray", ()=>__spreadArray
);
parcelHelpers.export(exports, "__await", ()=>__await
);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator
);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator
);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues
);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject
);
parcelHelpers.export(exports, "__importStar", ()=>__importStar
);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault
);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet
);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet
);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d1, b1) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return extendStatics(d1, b1);
};
function __extends(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {
    };
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
}
var __createBinding = Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function __exportStar(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
    return i = {
    }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
}
function __asyncDelegator(o) {
    var i, p;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
    return i = {
    }, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v1) {
        Promise.resolve(v1).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {
    }, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
var __setModuleDefault = Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {
    };
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jLptS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCComponent", ()=>MDCComponent1
);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _foundation = require("./foundation");
var MDCComponent1 = function() {
    function MDCComponent(root, foundation) {
        var args = [];
        for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
        this.root = root;
        this.initialize.apply(this, _tslib.__spreadArray([], _tslib.__read(args)));
        // Note that we initialize foundation here and not within the constructor's
        // default param so that this.root is defined and can be used within the
        // foundation class.
        this.foundation = foundation === undefined ? this.getDefaultFoundation() : foundation;
        this.foundation.init();
        this.initialSyncWithDOM();
    }
    MDCComponent.attachTo = function(root) {
        // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and
        // returns an instantiated component with its root set to that element. Also note that in the cases of
        // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized
        // from getDefaultFoundation().
        return new MDCComponent(root, new _foundation.MDCFoundation({
        }));
    };
    /* istanbul ignore next: method param only exists for typing purposes; it does not need to be unit tested */ MDCComponent.prototype.initialize = function() {
        var _args = [];
        for(var _i = 0; _i < arguments.length; _i++)_args[_i] = arguments[_i];
    // Subclasses can override this to do any additional setup work that would be considered part of a
    // "constructor". Essentially, it is a hook into the parent constructor before the foundation is
    // initialized. Any additional arguments besides root and foundation will be passed in here.
    };
    MDCComponent.prototype.getDefaultFoundation = function() {
        // Subclasses must override this method to return a properly configured foundation class for the
        // component.
        throw new Error("Subclasses must override getDefaultFoundation to return a properly configured foundation class");
    };
    MDCComponent.prototype.initialSyncWithDOM = function() {
    // Subclasses should override this method if they need to perform work to synchronize with a host DOM
    // object. An example of this would be a form control wrapper that needs to synchronize its internal state
    // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM
    // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.
    };
    MDCComponent.prototype.destroy = function() {
        // Subclasses may implement this method to release any resources / deregister any listeners they have
        // attached. An example of this might be deregistering a resize event from the window object.
        this.foundation.destroy();
    };
    MDCComponent.prototype.listen = function(evtType, handler, options) {
        this.root.addEventListener(evtType, handler, options);
    };
    MDCComponent.prototype.unlisten = function(evtType, handler, options) {
        this.root.removeEventListener(evtType, handler, options);
    };
    /**
     * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
     */ MDCComponent.prototype.emit = function(evtType, evtData, shouldBubble) {
        if (shouldBubble === void 0) shouldBubble = false;
        var evt;
        if (typeof CustomEvent === 'function') evt = new CustomEvent(evtType, {
            bubbles: shouldBubble,
            detail: evtData
        });
        else {
            evt = document.createEvent('CustomEvent');
            evt.initCustomEvent(evtType, shouldBubble, false, evtData);
        }
        this.root.dispatchEvent(evt);
    };
    return MDCComponent;
}();
exports.default = MDCComponent1;

},{"tslib":"lRdW5","./foundation":"kC5Yw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kC5Yw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCFoundation", ()=>MDCFoundation1
);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var MDCFoundation1 = function() {
    function MDCFoundation(adapter) {
        if (adapter === void 0) adapter = {
        };
        this.adapter = adapter;
    }
    Object.defineProperty(MDCFoundation, "cssClasses", {
        get: function() {
            // Classes extending MDCFoundation should implement this method to return an object which exports every
            // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
            return {
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCFoundation, "strings", {
        get: function() {
            // Classes extending MDCFoundation should implement this method to return an object which exports all
            // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
            return {
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCFoundation, "numbers", {
        get: function() {
            // Classes extending MDCFoundation should implement this method to return an object which exports all
            // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
            return {
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCFoundation, "defaultAdapter", {
        get: function() {
            // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
            // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
            // validation.
            return {
            };
        },
        enumerable: false,
        configurable: true
    });
    MDCFoundation.prototype.init = function() {
    // Subclasses should override this method to perform initialization routines (registering events, etc.)
    };
    MDCFoundation.prototype.destroy = function() {
    // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
    };
    return MDCFoundation;
}();
exports.default = MDCFoundation1;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"87xmx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ /**
 * Determine whether the current browser supports passive event listeners, and
 * if so, use them.
 */ parcelHelpers.export(exports, "applyPassive", ()=>applyPassive
);
function applyPassive(globalObj) {
    if (globalObj === void 0) globalObj = window;
    return supportsPassiveOption(globalObj) ? {
        passive: true
    } : false;
}
function supportsPassiveOption(globalObj) {
    if (globalObj === void 0) globalObj = window;
    // See
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
    var passiveSupported = false;
    try {
        var options = {
            // This function will be called when the browser
            // attempts to access the passive property.
            get passive () {
                passiveSupported = true;
                return false;
            }
        };
        var handler = function() {
        };
        globalObj.document.addEventListener('test', handler, options);
        globalObj.document.removeEventListener('test', handler, options);
    } catch (err) {
        passiveSupported = false;
    }
    return passiveSupported;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8pLcv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ /**
 * @fileoverview A "ponyfill" is a polyfill that doesn't modify the global prototype chain.
 * This makes ponyfills safer than traditional polyfills, especially for libraries like MDC.
 */ parcelHelpers.export(exports, "closest", ()=>closest
);
parcelHelpers.export(exports, "matches", ()=>matches
);
/**
 * Used to compute the estimated scroll width of elements. When an element is
 * hidden due to display: none; being applied to a parent element, the width is
 * returned as 0. However, the element will have a true width once no longer
 * inside a display: none context. This method computes an estimated width when
 * the element is hidden or returns the true width when the element is visble.
 * @param {Element} element the element whose width to estimate
 */ parcelHelpers.export(exports, "estimateScrollWidth", ()=>estimateScrollWidth
);
function closest(element, selector) {
    if (element.closest) return element.closest(selector);
    var el = element;
    while(el){
        if (matches(el, selector)) return el;
        el = el.parentElement;
    }
    return null;
}
function matches(element, selector) {
    var nativeMatches = element.matches || element.webkitMatchesSelector || element.msMatchesSelector;
    return nativeMatches.call(element, selector);
}
function estimateScrollWidth(element) {
    // Check the offsetParent. If the element inherits display: none from any
    // parent, the offsetParent property will be null (see
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent).
    // This check ensures we only clone the node when necessary.
    var htmlEl = element;
    if (htmlEl.offsetParent !== null) return htmlEl.scrollWidth;
    var clone = htmlEl.cloneNode(true);
    clone.style.setProperty('position', 'absolute');
    clone.style.setProperty('transform', 'translate(-9999px, -9999px)');
    document.documentElement.appendChild(clone);
    var scrollWidth = clone.scrollWidth;
    document.documentElement.removeChild(clone);
    return scrollWidth;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7frpT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCRippleFoundation", ()=>MDCRippleFoundation1
);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _foundation = require("@material/base/foundation");
var _constants = require("./constants");
var _util = require("./util");
// Activation events registered on the root element of each instance for activation
var ACTIVATION_EVENT_TYPES = [
    'touchstart',
    'pointerdown',
    'mousedown',
    'keydown', 
];
// Deactivation events registered on documentElement when a pointer-related down event occurs
var POINTER_DEACTIVATION_EVENT_TYPES = [
    'touchend',
    'pointerup',
    'mouseup',
    'contextmenu', 
];
// simultaneous nested activations
var activatedTargets = [];
var MDCRippleFoundation1 = function(_super) {
    _tslib.__extends(MDCRippleFoundation, _super);
    function MDCRippleFoundation(adapter) {
        var _this = _super.call(this, _tslib.__assign(_tslib.__assign({
        }, MDCRippleFoundation.defaultAdapter), adapter)) || this;
        _this.activationAnimationHasEnded = false;
        _this.activationTimer = 0;
        _this.fgDeactivationRemovalTimer = 0;
        _this.fgScale = '0';
        _this.frame = {
            width: 0,
            height: 0
        };
        _this.initialSize = 0;
        _this.layoutFrame = 0;
        _this.maxRadius = 0;
        _this.unboundedCoords = {
            left: 0,
            top: 0
        };
        _this.activationState = _this.defaultActivationState();
        _this.activationTimerCallback = function() {
            _this.activationAnimationHasEnded = true;
            _this.runDeactivationUXLogicIfReady();
        };
        _this.activateHandler = function(e) {
            _this.activateImpl(e);
        };
        _this.deactivateHandler = function() {
            _this.deactivateImpl();
        };
        _this.focusHandler = function() {
            _this.handleFocus();
        };
        _this.blurHandler = function() {
            _this.handleBlur();
        };
        _this.resizeHandler = function() {
            _this.layout();
        };
        return _this;
    }
    Object.defineProperty(MDCRippleFoundation, "cssClasses", {
        get: function() {
            return _constants.cssClasses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCRippleFoundation, "strings", {
        get: function() {
            return _constants.strings;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCRippleFoundation, "numbers", {
        get: function() {
            return _constants.numbers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCRippleFoundation, "defaultAdapter", {
        get: function() {
            return {
                addClass: function() {
                    return undefined;
                },
                browserSupportsCssVars: function() {
                    return true;
                },
                computeBoundingRect: function() {
                    return {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0,
                        width: 0,
                        height: 0
                    };
                },
                containsEventTarget: function() {
                    return true;
                },
                deregisterDocumentInteractionHandler: function() {
                    return undefined;
                },
                deregisterInteractionHandler: function() {
                    return undefined;
                },
                deregisterResizeHandler: function() {
                    return undefined;
                },
                getWindowPageOffset: function() {
                    return {
                        x: 0,
                        y: 0
                    };
                },
                isSurfaceActive: function() {
                    return true;
                },
                isSurfaceDisabled: function() {
                    return true;
                },
                isUnbounded: function() {
                    return true;
                },
                registerDocumentInteractionHandler: function() {
                    return undefined;
                },
                registerInteractionHandler: function() {
                    return undefined;
                },
                registerResizeHandler: function() {
                    return undefined;
                },
                removeClass: function() {
                    return undefined;
                },
                updateCssVariable: function() {
                    return undefined;
                }
            };
        },
        enumerable: false,
        configurable: true
    });
    MDCRippleFoundation.prototype.init = function() {
        var _this = this;
        var supportsPressRipple = this.supportsPressRipple();
        this.registerRootHandlers(supportsPressRipple);
        if (supportsPressRipple) {
            var _a = MDCRippleFoundation.cssClasses, ROOT_1 = _a.ROOT, UNBOUNDED_1 = _a.UNBOUNDED;
            requestAnimationFrame(function() {
                _this.adapter.addClass(ROOT_1);
                if (_this.adapter.isUnbounded()) {
                    _this.adapter.addClass(UNBOUNDED_1);
                    // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple
                    _this.layoutInternal();
                }
            });
        }
    };
    MDCRippleFoundation.prototype.destroy = function() {
        var _this = this;
        if (this.supportsPressRipple()) {
            if (this.activationTimer) {
                clearTimeout(this.activationTimer);
                this.activationTimer = 0;
                this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);
            }
            if (this.fgDeactivationRemovalTimer) {
                clearTimeout(this.fgDeactivationRemovalTimer);
                this.fgDeactivationRemovalTimer = 0;
                this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);
            }
            var _a = MDCRippleFoundation.cssClasses, ROOT_2 = _a.ROOT, UNBOUNDED_2 = _a.UNBOUNDED;
            requestAnimationFrame(function() {
                _this.adapter.removeClass(ROOT_2);
                _this.adapter.removeClass(UNBOUNDED_2);
                _this.removeCssVars();
            });
        }
        this.deregisterRootHandlers();
        this.deregisterDeactivationHandlers();
    };
    /**
     * @param evt Optional event containing position information.
     */ MDCRippleFoundation.prototype.activate = function(evt) {
        this.activateImpl(evt);
    };
    MDCRippleFoundation.prototype.deactivate = function() {
        this.deactivateImpl();
    };
    MDCRippleFoundation.prototype.layout = function() {
        var _this = this;
        if (this.layoutFrame) cancelAnimationFrame(this.layoutFrame);
        this.layoutFrame = requestAnimationFrame(function() {
            _this.layoutInternal();
            _this.layoutFrame = 0;
        });
    };
    MDCRippleFoundation.prototype.setUnbounded = function(unbounded) {
        var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;
        if (unbounded) this.adapter.addClass(UNBOUNDED);
        else this.adapter.removeClass(UNBOUNDED);
    };
    MDCRippleFoundation.prototype.handleFocus = function() {
        var _this = this;
        requestAnimationFrame(function() {
            return _this.adapter.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);
        });
    };
    MDCRippleFoundation.prototype.handleBlur = function() {
        var _this = this;
        requestAnimationFrame(function() {
            return _this.adapter.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);
        });
    };
    /**
     * We compute this property so that we are not querying information about the client
     * until the point in time where the foundation requests it. This prevents scenarios where
     * client-side feature-detection may happen too early, such as when components are rendered on the server
     * and then initialized at mount time on the client.
     */ MDCRippleFoundation.prototype.supportsPressRipple = function() {
        return this.adapter.browserSupportsCssVars();
    };
    MDCRippleFoundation.prototype.defaultActivationState = function() {
        return {
            activationEvent: undefined,
            hasDeactivationUXRun: false,
            isActivated: false,
            isProgrammatic: false,
            wasActivatedByPointer: false,
            wasElementMadeActive: false
        };
    };
    /**
     * supportsPressRipple Passed from init to save a redundant function call
     */ MDCRippleFoundation.prototype.registerRootHandlers = function(supportsPressRipple) {
        var e_1, _a;
        if (supportsPressRipple) {
            try {
                for(var ACTIVATION_EVENT_TYPES_1 = _tslib.__values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next(); !ACTIVATION_EVENT_TYPES_1_1.done; ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next()){
                    var evtType = ACTIVATION_EVENT_TYPES_1_1.value;
                    this.adapter.registerInteractionHandler(evtType, this.activateHandler);
                }
            } catch (e_1_1) {
                e_1 = {
                    error: e_1_1
                };
            } finally{
                try {
                    if (ACTIVATION_EVENT_TYPES_1_1 && !ACTIVATION_EVENT_TYPES_1_1.done && (_a = ACTIVATION_EVENT_TYPES_1.return)) _a.call(ACTIVATION_EVENT_TYPES_1);
                } finally{
                    if (e_1) throw e_1.error;
                }
            }
            if (this.adapter.isUnbounded()) this.adapter.registerResizeHandler(this.resizeHandler);
        }
        this.adapter.registerInteractionHandler('focus', this.focusHandler);
        this.adapter.registerInteractionHandler('blur', this.blurHandler);
    };
    MDCRippleFoundation.prototype.registerDeactivationHandlers = function(evt) {
        var e_2, _a;
        if (evt.type === 'keydown') this.adapter.registerInteractionHandler('keyup', this.deactivateHandler);
        else try {
            for(var POINTER_DEACTIVATION_EVENT_TYPES_1 = _tslib.__values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next(); !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done; POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next()){
                var evtType = POINTER_DEACTIVATION_EVENT_TYPES_1_1.value;
                this.adapter.registerDocumentInteractionHandler(evtType, this.deactivateHandler);
            }
        } catch (e_2_1) {
            e_2 = {
                error: e_2_1
            };
        } finally{
            try {
                if (POINTER_DEACTIVATION_EVENT_TYPES_1_1 && !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_1.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_1);
            } finally{
                if (e_2) throw e_2.error;
            }
        }
    };
    MDCRippleFoundation.prototype.deregisterRootHandlers = function() {
        var e_3, _a;
        try {
            for(var ACTIVATION_EVENT_TYPES_2 = _tslib.__values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next(); !ACTIVATION_EVENT_TYPES_2_1.done; ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next()){
                var evtType = ACTIVATION_EVENT_TYPES_2_1.value;
                this.adapter.deregisterInteractionHandler(evtType, this.activateHandler);
            }
        } catch (e_3_1) {
            e_3 = {
                error: e_3_1
            };
        } finally{
            try {
                if (ACTIVATION_EVENT_TYPES_2_1 && !ACTIVATION_EVENT_TYPES_2_1.done && (_a = ACTIVATION_EVENT_TYPES_2.return)) _a.call(ACTIVATION_EVENT_TYPES_2);
            } finally{
                if (e_3) throw e_3.error;
            }
        }
        this.adapter.deregisterInteractionHandler('focus', this.focusHandler);
        this.adapter.deregisterInteractionHandler('blur', this.blurHandler);
        if (this.adapter.isUnbounded()) this.adapter.deregisterResizeHandler(this.resizeHandler);
    };
    MDCRippleFoundation.prototype.deregisterDeactivationHandlers = function() {
        var e_4, _a;
        this.adapter.deregisterInteractionHandler('keyup', this.deactivateHandler);
        try {
            for(var POINTER_DEACTIVATION_EVENT_TYPES_2 = _tslib.__values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next(); !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done; POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next()){
                var evtType = POINTER_DEACTIVATION_EVENT_TYPES_2_1.value;
                this.adapter.deregisterDocumentInteractionHandler(evtType, this.deactivateHandler);
            }
        } catch (e_4_1) {
            e_4 = {
                error: e_4_1
            };
        } finally{
            try {
                if (POINTER_DEACTIVATION_EVENT_TYPES_2_1 && !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_2.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_2);
            } finally{
                if (e_4) throw e_4.error;
            }
        }
    };
    MDCRippleFoundation.prototype.removeCssVars = function() {
        var _this = this;
        var rippleStrings = MDCRippleFoundation.strings;
        var keys = Object.keys(rippleStrings);
        keys.forEach(function(key) {
            if (key.indexOf('VAR_') === 0) _this.adapter.updateCssVariable(rippleStrings[key], null);
        });
    };
    MDCRippleFoundation.prototype.activateImpl = function(evt) {
        var _this = this;
        if (this.adapter.isSurfaceDisabled()) return;
        var activationState = this.activationState;
        if (activationState.isActivated) return;
        // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction
        var previousActivationEvent = this.previousActivationEvent;
        var isSameInteraction = previousActivationEvent && evt !== undefined && previousActivationEvent.type !== evt.type;
        if (isSameInteraction) return;
        activationState.isActivated = true;
        activationState.isProgrammatic = evt === undefined;
        activationState.activationEvent = evt;
        activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : evt !== undefined && (evt.type === 'mousedown' || evt.type === 'touchstart' || evt.type === 'pointerdown');
        var hasActivatedChild = evt !== undefined && activatedTargets.length > 0 && activatedTargets.some(function(target) {
            return _this.adapter.containsEventTarget(target);
        });
        if (hasActivatedChild) {
            // Immediately reset activation state, while preserving logic that prevents touch follow-on events
            this.resetActivationState();
            return;
        }
        if (evt !== undefined) {
            activatedTargets.push(evt.target);
            this.registerDeactivationHandlers(evt);
        }
        activationState.wasElementMadeActive = this.checkElementMadeActive(evt);
        if (activationState.wasElementMadeActive) this.animateActivation();
        requestAnimationFrame(function() {
            // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples
            activatedTargets = [];
            if (!activationState.wasElementMadeActive && evt !== undefined && (evt.key === ' ' || evt.keyCode === 32)) {
                // If space was pressed, try again within an rAF call to detect :active, because different UAs report
                // active states inconsistently when they're called within event handling code:
                // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971
                // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741
                // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS
                // variable is set within a rAF callback for a submit button interaction (#2241).
                activationState.wasElementMadeActive = _this.checkElementMadeActive(evt);
                if (activationState.wasElementMadeActive) _this.animateActivation();
            }
            if (!activationState.wasElementMadeActive) // Reset activation state immediately if element was not made active.
            _this.activationState = _this.defaultActivationState();
        });
    };
    MDCRippleFoundation.prototype.checkElementMadeActive = function(evt) {
        return evt !== undefined && evt.type === 'keydown' ? this.adapter.isSurfaceActive() : true;
    };
    MDCRippleFoundation.prototype.animateActivation = function() {
        var _this = this;
        var _a = MDCRippleFoundation.strings, VAR_FG_TRANSLATE_START = _a.VAR_FG_TRANSLATE_START, VAR_FG_TRANSLATE_END = _a.VAR_FG_TRANSLATE_END;
        var _b = MDCRippleFoundation.cssClasses, FG_DEACTIVATION = _b.FG_DEACTIVATION, FG_ACTIVATION = _b.FG_ACTIVATION;
        var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;
        this.layoutInternal();
        var translateStart = '';
        var translateEnd = '';
        if (!this.adapter.isUnbounded()) {
            var _c = this.getFgTranslationCoordinates(), startPoint = _c.startPoint, endPoint = _c.endPoint;
            translateStart = startPoint.x + "px, " + startPoint.y + "px";
            translateEnd = endPoint.x + "px, " + endPoint.y + "px";
        }
        this.adapter.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);
        this.adapter.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);
        // Cancel any ongoing activation/deactivation animations
        clearTimeout(this.activationTimer);
        clearTimeout(this.fgDeactivationRemovalTimer);
        this.rmBoundedActivationClasses();
        this.adapter.removeClass(FG_DEACTIVATION);
        // Force layout in order to re-trigger the animation.
        this.adapter.computeBoundingRect();
        this.adapter.addClass(FG_ACTIVATION);
        this.activationTimer = setTimeout(function() {
            _this.activationTimerCallback();
        }, DEACTIVATION_TIMEOUT_MS);
    };
    MDCRippleFoundation.prototype.getFgTranslationCoordinates = function() {
        var _a = this.activationState, activationEvent = _a.activationEvent, wasActivatedByPointer = _a.wasActivatedByPointer;
        var startPoint;
        if (wasActivatedByPointer) startPoint = _util.getNormalizedEventCoords(activationEvent, this.adapter.getWindowPageOffset(), this.adapter.computeBoundingRect());
        else startPoint = {
            x: this.frame.width / 2,
            y: this.frame.height / 2
        };
        // Center the element around the start point.
        startPoint = {
            x: startPoint.x - this.initialSize / 2,
            y: startPoint.y - this.initialSize / 2
        };
        var endPoint = {
            x: this.frame.width / 2 - this.initialSize / 2,
            y: this.frame.height / 2 - this.initialSize / 2
        };
        return {
            startPoint: startPoint,
            endPoint: endPoint
        };
    };
    MDCRippleFoundation.prototype.runDeactivationUXLogicIfReady = function() {
        var _this = this;
        // This method is called both when a pointing device is released, and when the activation animation ends.
        // The deactivation animation should only run after both of those occur.
        var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;
        var _a = this.activationState, hasDeactivationUXRun = _a.hasDeactivationUXRun, isActivated = _a.isActivated;
        var activationHasEnded = hasDeactivationUXRun || !isActivated;
        if (activationHasEnded && this.activationAnimationHasEnded) {
            this.rmBoundedActivationClasses();
            this.adapter.addClass(FG_DEACTIVATION);
            this.fgDeactivationRemovalTimer = setTimeout(function() {
                _this.adapter.removeClass(FG_DEACTIVATION);
            }, _constants.numbers.FG_DEACTIVATION_MS);
        }
    };
    MDCRippleFoundation.prototype.rmBoundedActivationClasses = function() {
        var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;
        this.adapter.removeClass(FG_ACTIVATION);
        this.activationAnimationHasEnded = false;
        this.adapter.computeBoundingRect();
    };
    MDCRippleFoundation.prototype.resetActivationState = function() {
        var _this = this;
        this.previousActivationEvent = this.activationState.activationEvent;
        this.activationState = this.defaultActivationState();
        // Touch devices may fire additional events for the same interaction within a short time.
        // Store the previous event until it's safe to assume that subsequent events are for new interactions.
        setTimeout(function() {
            return _this.previousActivationEvent = undefined;
        }, MDCRippleFoundation.numbers.TAP_DELAY_MS);
    };
    MDCRippleFoundation.prototype.deactivateImpl = function() {
        var _this = this;
        var activationState = this.activationState;
        // This can happen in scenarios such as when you have a keyup event that blurs the element.
        if (!activationState.isActivated) return;
        var state = _tslib.__assign({
        }, activationState);
        if (activationState.isProgrammatic) {
            requestAnimationFrame(function() {
                _this.animateDeactivation(state);
            });
            this.resetActivationState();
        } else {
            this.deregisterDeactivationHandlers();
            requestAnimationFrame(function() {
                _this.activationState.hasDeactivationUXRun = true;
                _this.animateDeactivation(state);
                _this.resetActivationState();
            });
        }
    };
    MDCRippleFoundation.prototype.animateDeactivation = function(_a) {
        var wasActivatedByPointer = _a.wasActivatedByPointer, wasElementMadeActive = _a.wasElementMadeActive;
        if (wasActivatedByPointer || wasElementMadeActive) this.runDeactivationUXLogicIfReady();
    };
    MDCRippleFoundation.prototype.layoutInternal = function() {
        var _this = this;
        this.frame = this.adapter.computeBoundingRect();
        var maxDim = Math.max(this.frame.height, this.frame.width);
        // Surface diameter is treated differently for unbounded vs. bounded ripples.
        // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately
        // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically
        // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter
        // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via
        // `overflow: hidden`.
        var getBoundedRadius = function() {
            var hypotenuse = Math.sqrt(Math.pow(_this.frame.width, 2) + Math.pow(_this.frame.height, 2));
            return hypotenuse + MDCRippleFoundation.numbers.PADDING;
        };
        this.maxRadius = this.adapter.isUnbounded() ? maxDim : getBoundedRadius();
        // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform
        var initialSize = Math.floor(maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE);
        // Unbounded ripple size should always be even number to equally center align.
        if (this.adapter.isUnbounded() && initialSize % 2 !== 0) this.initialSize = initialSize - 1;
        else this.initialSize = initialSize;
        this.fgScale = "" + this.maxRadius / this.initialSize;
        this.updateLayoutCssVars();
    };
    MDCRippleFoundation.prototype.updateLayoutCssVars = function() {
        var _a = MDCRippleFoundation.strings, VAR_FG_SIZE = _a.VAR_FG_SIZE, VAR_LEFT = _a.VAR_LEFT, VAR_TOP = _a.VAR_TOP, VAR_FG_SCALE = _a.VAR_FG_SCALE;
        this.adapter.updateCssVariable(VAR_FG_SIZE, this.initialSize + "px");
        this.adapter.updateCssVariable(VAR_FG_SCALE, this.fgScale);
        if (this.adapter.isUnbounded()) {
            this.unboundedCoords = {
                left: Math.round(this.frame.width / 2 - this.initialSize / 2),
                top: Math.round(this.frame.height / 2 - this.initialSize / 2)
            };
            this.adapter.updateCssVariable(VAR_LEFT, this.unboundedCoords.left + "px");
            this.adapter.updateCssVariable(VAR_TOP, this.unboundedCoords.top + "px");
        }
    };
    return MDCRippleFoundation;
}(_foundation.MDCFoundation);
exports.default = MDCRippleFoundation1;

},{"tslib":"lRdW5","@material/base/foundation":"kC5Yw","./constants":"lg1jP","./util":"l3az5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lg1jP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cssClasses", ()=>cssClasses
);
parcelHelpers.export(exports, "strings", ()=>strings
);
parcelHelpers.export(exports, "numbers", ()=>numbers
);
var cssClasses = {
    // Ripple is a special case where the "root" component is really a "mixin" of sorts,
    // given that it's an 'upgrade' to an existing component. That being said it is the root
    // CSS class that all other CSS classes derive from.
    BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',
    FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',
    FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation',
    ROOT: 'mdc-ripple-upgraded',
    UNBOUNDED: 'mdc-ripple-upgraded--unbounded'
};
var strings = {
    VAR_FG_SCALE: '--mdc-ripple-fg-scale',
    VAR_FG_SIZE: '--mdc-ripple-fg-size',
    VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end',
    VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',
    VAR_LEFT: '--mdc-ripple-left',
    VAR_TOP: '--mdc-ripple-top'
};
var numbers = {
    DEACTIVATION_TIMEOUT_MS: 225,
    FG_DEACTIVATION_MS: 150,
    INITIAL_ORIGIN_SCALE: 0.6,
    PADDING: 10,
    TAP_DELAY_MS: 300
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"xrl7V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ewPxH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _breadcrumbScss = require("./breadcrumb.scss");
class Breadcrumb {
    view(vnode) {
        return _mithrilDefault.default("ul", {
            class: "breadcrumb",
            style: vnode.attrs.style
        }, vnode.attrs.items && vnode.attrs.items.map((item)=>{
            return _mithrilDefault.default("li", null, item.href ? _mithrilDefault.default("a", {
                onclick: ()=>{
                    if (item.params) _mithrilDefault.default.route.set(item.href, item.params);
                    else _mithrilDefault.default.route.set(item.href);
                }
            }, item.text) : _mithrilDefault.default("span", null, item.text));
        }));
    }
}
module.exports = Breadcrumb;

},{"mithril":"1zcoP","./breadcrumb.scss":"9rxLe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9rxLe":[function() {},{}],"ko7Hg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
class Card {
    constructor(){
        this.cardClass = 'mdc-card';
        this.optionDefaults = {
            class: null,
            outlined: false,
            padding: '16px',
            style: {
            },
            onclick: null
        };
        this.options = null;
    }
    assignOptions(vnode) {
        this.options = Object.assign({
        }, this.optionDefaults, vnode.attrs);
        this.options.style = Object.assign({
        }, this.options.style, {
            padding: this.options.padding
        });
    }
    setClass() {
        this.cardClass = 'mdc-card';
        if (this.options.outlined) this.cardClass += ' mdc-card--outlined';
        if (this.options.class) this.cardClass += ` ${this.options.class}`;
    }
    oninit(vnode1) {
        this.assignOptions(vnode1);
        this.setClass();
    }
    onbeforeupdate(vnode2) {
        this.assignOptions(vnode2);
        this.setClass();
    }
    view(vnode3) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
            class: this.cardClass,
            style: this.options.style,
            onclick: this.options.onclick
        }, _mithrilDefault.default("div", {
            class: "mdc-card__content"
        }, vnode3.children)));
    }
}
module.exports = Card;

},{"mithril":"1zcoP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7WNMs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril"); // import { MDCFormField } from '@material/form-field';
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _checkbox = require("@material/checkbox");
class Checkbox {
    constructor(){
        this.checkboxClass = 'mdc-checkbox mdc-checkbox--touch';
        this.optionDefaults = {
            id: null,
            class: null,
            checked: false,
            onclick: null,
            disabled: false
        };
        this.options = null;
    }
    assignOptions(vnode) {
        this.options = Object.assign({
        }, this.optionDefaults, vnode.attrs);
    }
    setClass() {
        this.checkboxClass = 'mdc-checkbox mdc-checkbox--touch';
        if (this.options.class) this.checkboxClass += ` ${this.options.class}`;
    }
    oninit(vnode1) {
        this.assignOptions(vnode1);
        this.setClass();
    }
    oncreate(vnode2) {
        try {
            this.checkbox = new _checkbox.MDCCheckbox(vnode2.dom);
        } catch (e) {
            console.log(e);
        }
    }
    onbeforeupdate(vnode3) {
        this.assignOptions(vnode3);
        this.setClass();
    }
    view(vnode4) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
            class: "mdc-touch-target-wrapper"
        }, _mithrilDefault.default("div", {
            class: this.checkboxClass,
            onclick: this.options.onclick
        }, _mithrilDefault.default("input", {
            type: "checkbox",
            class: "mdc-checkbox__native-control",
            id: this.options.id,
            checked: this.options.checked,
            disabled: this.options.disabled
        }), _mithrilDefault.default("div", {
            class: "mdc-checkbox__background"
        }, _mithrilDefault.default("svg", {
            class: "mdc-checkbox__checkmark",
            viewBox: "0 0 24 24"
        }, _mithrilDefault.default("path", {
            class: "mdc-checkbox__checkmark-path",
            fill: "none",
            d: "M1.73,12.91 8.1,19.28 22.79,4.59"
        })), _mithrilDefault.default("div", {
            class: "mdc-checkbox__mixedmark"
        })), _mithrilDefault.default("div", {
            class: "mdc-checkbox__ripple"
        }))));
    }
}
module.exports = Checkbox;

},{"mithril":"1zcoP","@material/checkbox":"5CWyn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5CWyn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _adapter = require("./adapter");
parcelHelpers.exportAll(_adapter, exports);
var _component = require("./component");
parcelHelpers.exportAll(_component, exports);
var _constants = require("./constants");
parcelHelpers.exportAll(_constants, exports);
var _foundation = require("./foundation");
parcelHelpers.exportAll(_foundation, exports);

},{"./adapter":"d1e6K","./component":"cQUNQ","./constants":"jVLcG","./foundation":"6CO6x","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d1e6K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cQUNQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCCheckbox", ()=>MDCCheckbox1
);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _util = require("@material/animation/util");
var _component = require("@material/base/component");
var _events = require("@material/dom/events");
var _ponyfill = require("@material/dom/ponyfill");
var _component1 = require("@material/ripple/component");
var _foundation = require("@material/ripple/foundation");
var _constants = require("./constants");
var _foundation1 = require("./foundation");
var CB_PROTO_PROPS = [
    'checked',
    'indeterminate'
];
var MDCCheckbox1 = function(_super) {
    _tslib.__extends(MDCCheckbox, _super);
    function MDCCheckbox() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.rippleSurface = _this.createRipple();
        return _this;
    }
    MDCCheckbox.attachTo = function(root) {
        return new MDCCheckbox(root);
    };
    Object.defineProperty(MDCCheckbox.prototype, "ripple", {
        get: function() {
            return this.rippleSurface;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCCheckbox.prototype, "checked", {
        get: function() {
            return this.getNativeControl().checked;
        },
        set: function(checked) {
            this.getNativeControl().checked = checked;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCCheckbox.prototype, "indeterminate", {
        get: function() {
            return this.getNativeControl().indeterminate;
        },
        set: function(indeterminate) {
            this.getNativeControl().indeterminate = indeterminate;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCCheckbox.prototype, "disabled", {
        get: function() {
            return this.getNativeControl().disabled;
        },
        set: function(disabled) {
            this.foundation.setDisabled(disabled);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCCheckbox.prototype, "value", {
        get: function() {
            return this.getNativeControl().value;
        },
        set: function(value) {
            this.getNativeControl().value = value;
        },
        enumerable: false,
        configurable: true
    });
    MDCCheckbox.prototype.initialize = function() {
        var DATA_INDETERMINATE_ATTR = _constants.strings.DATA_INDETERMINATE_ATTR;
        this.getNativeControl().indeterminate = this.getNativeControl().getAttribute(DATA_INDETERMINATE_ATTR) === 'true';
        this.getNativeControl().removeAttribute(DATA_INDETERMINATE_ATTR);
    };
    MDCCheckbox.prototype.initialSyncWithDOM = function() {
        var _this = this;
        this.handleChange = function() {
            _this.foundation.handleChange();
        };
        this.handleAnimationEnd = function() {
            _this.foundation.handleAnimationEnd();
        };
        this.getNativeControl().addEventListener('change', this.handleChange);
        this.listen(_util.getCorrectEventName(window, 'animationend'), this.handleAnimationEnd);
        this.installPropertyChangeHooks();
    };
    MDCCheckbox.prototype.destroy = function() {
        this.rippleSurface.destroy();
        this.getNativeControl().removeEventListener('change', this.handleChange);
        this.unlisten(_util.getCorrectEventName(window, 'animationend'), this.handleAnimationEnd);
        this.uninstallPropertyChangeHooks();
        _super.prototype.destroy.call(this);
    };
    MDCCheckbox.prototype.getDefaultFoundation = function() {
        var _this = this;
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        var adapter = {
            addClass: function(className) {
                return _this.root.classList.add(className);
            },
            forceLayout: function() {
                return _this.root.offsetWidth;
            },
            hasNativeControl: function() {
                return !!_this.getNativeControl();
            },
            isAttachedToDOM: function() {
                return Boolean(_this.root.parentNode);
            },
            isChecked: function() {
                return _this.checked;
            },
            isIndeterminate: function() {
                return _this.indeterminate;
            },
            removeClass: function(className) {
                _this.root.classList.remove(className);
            },
            removeNativeControlAttr: function(attr) {
                _this.getNativeControl().removeAttribute(attr);
            },
            setNativeControlAttr: function(attr, value) {
                _this.getNativeControl().setAttribute(attr, value);
            },
            setNativeControlDisabled: function(disabled) {
                _this.getNativeControl().disabled = disabled;
            }
        };
        return new _foundation1.MDCCheckboxFoundation(adapter);
    };
    MDCCheckbox.prototype.createRipple = function() {
        var _this = this;
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        var adapter = _tslib.__assign(_tslib.__assign({
        }, _component1.MDCRipple.createAdapter(this)), {
            deregisterInteractionHandler: function(evtType, handler) {
                _this.getNativeControl().removeEventListener(evtType, handler, _events.applyPassive());
            },
            isSurfaceActive: function() {
                return _ponyfill.matches(_this.getNativeControl(), ':active');
            },
            isUnbounded: function() {
                return true;
            },
            registerInteractionHandler: function(evtType, handler) {
                _this.getNativeControl().addEventListener(evtType, handler, _events.applyPassive());
            }
        });
        return new _component1.MDCRipple(this.root, new _foundation.MDCRippleFoundation(adapter));
    };
    MDCCheckbox.prototype.installPropertyChangeHooks = function() {
        var e_1, _a;
        var _this = this;
        var nativeCb = this.getNativeControl();
        var cbProto = Object.getPrototypeOf(nativeCb);
        var _loop_1 = function(controlState) {
            var desc = Object.getOwnPropertyDescriptor(cbProto, controlState);
            // We have to check for this descriptor, since some browsers (Safari) don't support its return.
            // See: https://bugs.webkit.org/show_bug.cgi?id=49739
            if (!validDescriptor(desc)) return {
                value: void 0
            };
            // Type cast is needed for compatibility with Closure Compiler.
            var nativeGetter = desc.get;
            var nativeCbDesc = {
                configurable: desc.configurable,
                enumerable: desc.enumerable,
                get: nativeGetter,
                set: function(state) {
                    desc.set.call(nativeCb, state);
                    _this.foundation.handleChange();
                }
            };
            Object.defineProperty(nativeCb, controlState, nativeCbDesc);
        };
        try {
            for(var CB_PROTO_PROPS_1 = _tslib.__values(CB_PROTO_PROPS), CB_PROTO_PROPS_1_1 = CB_PROTO_PROPS_1.next(); !CB_PROTO_PROPS_1_1.done; CB_PROTO_PROPS_1_1 = CB_PROTO_PROPS_1.next()){
                var controlState1 = CB_PROTO_PROPS_1_1.value;
                var state_1 = _loop_1(controlState1);
                if (typeof state_1 === "object") return state_1.value;
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (CB_PROTO_PROPS_1_1 && !CB_PROTO_PROPS_1_1.done && (_a = CB_PROTO_PROPS_1.return)) _a.call(CB_PROTO_PROPS_1);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
    };
    MDCCheckbox.prototype.uninstallPropertyChangeHooks = function() {
        var e_2, _a;
        var nativeCb = this.getNativeControl();
        var cbProto = Object.getPrototypeOf(nativeCb);
        try {
            for(var CB_PROTO_PROPS_2 = _tslib.__values(CB_PROTO_PROPS), CB_PROTO_PROPS_2_1 = CB_PROTO_PROPS_2.next(); !CB_PROTO_PROPS_2_1.done; CB_PROTO_PROPS_2_1 = CB_PROTO_PROPS_2.next()){
                var controlState = CB_PROTO_PROPS_2_1.value;
                var desc = Object.getOwnPropertyDescriptor(cbProto, controlState);
                if (!validDescriptor(desc)) return;
                Object.defineProperty(nativeCb, controlState, desc);
            }
        } catch (e_2_1) {
            e_2 = {
                error: e_2_1
            };
        } finally{
            try {
                if (CB_PROTO_PROPS_2_1 && !CB_PROTO_PROPS_2_1.done && (_a = CB_PROTO_PROPS_2.return)) _a.call(CB_PROTO_PROPS_2);
            } finally{
                if (e_2) throw e_2.error;
            }
        }
    };
    MDCCheckbox.prototype.getNativeControl = function() {
        var NATIVE_CONTROL_SELECTOR = _constants.strings.NATIVE_CONTROL_SELECTOR;
        var el = this.root.querySelector(NATIVE_CONTROL_SELECTOR);
        if (!el) throw new Error("Checkbox component requires a " + NATIVE_CONTROL_SELECTOR + " element");
        return el;
    };
    return MDCCheckbox;
}(_component.MDCComponent);
function validDescriptor(inputPropDesc) {
    return !!inputPropDesc && typeof inputPropDesc.set === 'function';
}

},{"tslib":"lRdW5","@material/animation/util":"9bCbd","@material/base/component":"jLptS","@material/dom/events":"87xmx","@material/dom/ponyfill":"8pLcv","@material/ripple/component":"035sE","@material/ripple/foundation":"7frpT","./constants":"jVLcG","./foundation":"6CO6x","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9bCbd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCorrectPropertyName", ()=>getCorrectPropertyName
);
parcelHelpers.export(exports, "getCorrectEventName", ()=>getCorrectEventName
);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var cssPropertyNameMap = {
    animation: {
        prefixed: '-webkit-animation',
        standard: 'animation'
    },
    transform: {
        prefixed: '-webkit-transform',
        standard: 'transform'
    },
    transition: {
        prefixed: '-webkit-transition',
        standard: 'transition'
    }
};
var jsEventTypeMap = {
    animationend: {
        cssProperty: 'animation',
        prefixed: 'webkitAnimationEnd',
        standard: 'animationend'
    },
    animationiteration: {
        cssProperty: 'animation',
        prefixed: 'webkitAnimationIteration',
        standard: 'animationiteration'
    },
    animationstart: {
        cssProperty: 'animation',
        prefixed: 'webkitAnimationStart',
        standard: 'animationstart'
    },
    transitionend: {
        cssProperty: 'transition',
        prefixed: 'webkitTransitionEnd',
        standard: 'transitionend'
    }
};
function isWindow(windowObj) {
    return Boolean(windowObj.document) && typeof windowObj.document.createElement === 'function';
}
function getCorrectPropertyName(windowObj, cssProperty) {
    if (isWindow(windowObj) && cssProperty in cssPropertyNameMap) {
        var el = windowObj.document.createElement('div');
        var _a = cssPropertyNameMap[cssProperty], standard = _a.standard, prefixed = _a.prefixed;
        var isStandard = standard in el.style;
        return isStandard ? standard : prefixed;
    }
    return cssProperty;
}
function getCorrectEventName(windowObj, eventType) {
    if (isWindow(windowObj) && eventType in jsEventTypeMap) {
        var el = windowObj.document.createElement('div');
        var _a = jsEventTypeMap[eventType], standard = _a.standard, prefixed = _a.prefixed, cssProperty = _a.cssProperty;
        var isStandard = cssProperty in el.style;
        return isStandard ? standard : prefixed;
    }
    return eventType;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jVLcG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cssClasses", ()=>cssClasses
);
parcelHelpers.export(exports, "strings", ()=>strings
);
parcelHelpers.export(exports, "numbers", ()=>numbers
);
var cssClasses = {
    ANIM_CHECKED_INDETERMINATE: 'mdc-checkbox--anim-checked-indeterminate',
    ANIM_CHECKED_UNCHECKED: 'mdc-checkbox--anim-checked-unchecked',
    ANIM_INDETERMINATE_CHECKED: 'mdc-checkbox--anim-indeterminate-checked',
    ANIM_INDETERMINATE_UNCHECKED: 'mdc-checkbox--anim-indeterminate-unchecked',
    ANIM_UNCHECKED_CHECKED: 'mdc-checkbox--anim-unchecked-checked',
    ANIM_UNCHECKED_INDETERMINATE: 'mdc-checkbox--anim-unchecked-indeterminate',
    BACKGROUND: 'mdc-checkbox__background',
    CHECKED: 'mdc-checkbox--checked',
    CHECKMARK: 'mdc-checkbox__checkmark',
    CHECKMARK_PATH: 'mdc-checkbox__checkmark-path',
    DISABLED: 'mdc-checkbox--disabled',
    INDETERMINATE: 'mdc-checkbox--indeterminate',
    MIXEDMARK: 'mdc-checkbox__mixedmark',
    NATIVE_CONTROL: 'mdc-checkbox__native-control',
    ROOT: 'mdc-checkbox',
    SELECTED: 'mdc-checkbox--selected',
    UPGRADED: 'mdc-checkbox--upgraded'
};
var strings = {
    ARIA_CHECKED_ATTR: 'aria-checked',
    ARIA_CHECKED_INDETERMINATE_VALUE: 'mixed',
    DATA_INDETERMINATE_ATTR: 'data-indeterminate',
    NATIVE_CONTROL_SELECTOR: '.mdc-checkbox__native-control',
    TRANSITION_STATE_CHECKED: 'checked',
    TRANSITION_STATE_INDETERMINATE: 'indeterminate',
    TRANSITION_STATE_INIT: 'init',
    TRANSITION_STATE_UNCHECKED: 'unchecked'
};
var numbers = {
    ANIM_END_LATCH_MS: 250
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6CO6x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCCheckboxFoundation", ()=>MDCCheckboxFoundation1
);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _foundation = require("@material/base/foundation");
var _constants = require("./constants");
var MDCCheckboxFoundation1 = function(_super) {
    _tslib.__extends(MDCCheckboxFoundation, _super);
    function MDCCheckboxFoundation(adapter) {
        var _this = _super.call(this, _tslib.__assign(_tslib.__assign({
        }, MDCCheckboxFoundation.defaultAdapter), adapter)) || this;
        _this.currentCheckState = _constants.strings.TRANSITION_STATE_INIT;
        _this.currentAnimationClass = '';
        _this.animEndLatchTimer = 0;
        _this.enableAnimationEndHandler = false;
        return _this;
    }
    Object.defineProperty(MDCCheckboxFoundation, "cssClasses", {
        get: function() {
            return _constants.cssClasses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCCheckboxFoundation, "strings", {
        get: function() {
            return _constants.strings;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCCheckboxFoundation, "numbers", {
        get: function() {
            return _constants.numbers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCCheckboxFoundation, "defaultAdapter", {
        get: function() {
            return {
                addClass: function() {
                    return undefined;
                },
                forceLayout: function() {
                    return undefined;
                },
                hasNativeControl: function() {
                    return false;
                },
                isAttachedToDOM: function() {
                    return false;
                },
                isChecked: function() {
                    return false;
                },
                isIndeterminate: function() {
                    return false;
                },
                removeClass: function() {
                    return undefined;
                },
                removeNativeControlAttr: function() {
                    return undefined;
                },
                setNativeControlAttr: function() {
                    return undefined;
                },
                setNativeControlDisabled: function() {
                    return undefined;
                }
            };
        },
        enumerable: false,
        configurable: true
    });
    MDCCheckboxFoundation.prototype.init = function() {
        this.currentCheckState = this.determineCheckState();
        this.updateAriaChecked();
        this.adapter.addClass(_constants.cssClasses.UPGRADED);
    };
    MDCCheckboxFoundation.prototype.destroy = function() {
        clearTimeout(this.animEndLatchTimer);
    };
    MDCCheckboxFoundation.prototype.setDisabled = function(disabled) {
        this.adapter.setNativeControlDisabled(disabled);
        if (disabled) this.adapter.addClass(_constants.cssClasses.DISABLED);
        else this.adapter.removeClass(_constants.cssClasses.DISABLED);
    };
    /**
     * Handles the animationend event for the checkbox
     */ MDCCheckboxFoundation.prototype.handleAnimationEnd = function() {
        var _this = this;
        if (!this.enableAnimationEndHandler) return;
        clearTimeout(this.animEndLatchTimer);
        this.animEndLatchTimer = setTimeout(function() {
            _this.adapter.removeClass(_this.currentAnimationClass);
            _this.enableAnimationEndHandler = false;
        }, _constants.numbers.ANIM_END_LATCH_MS);
    };
    /**
     * Handles the change event for the checkbox
     */ MDCCheckboxFoundation.prototype.handleChange = function() {
        this.transitionCheckState();
    };
    MDCCheckboxFoundation.prototype.transitionCheckState = function() {
        if (!this.adapter.hasNativeControl()) return;
        var oldState = this.currentCheckState;
        var newState = this.determineCheckState();
        if (oldState === newState) return;
        this.updateAriaChecked();
        var TRANSITION_STATE_UNCHECKED = _constants.strings.TRANSITION_STATE_UNCHECKED;
        var SELECTED = _constants.cssClasses.SELECTED;
        if (newState === TRANSITION_STATE_UNCHECKED) this.adapter.removeClass(SELECTED);
        else this.adapter.addClass(SELECTED);
        // Check to ensure that there isn't a previously existing animation class, in case for example
        // the user interacted with the checkbox before the animation was finished.
        if (this.currentAnimationClass.length > 0) {
            clearTimeout(this.animEndLatchTimer);
            this.adapter.forceLayout();
            this.adapter.removeClass(this.currentAnimationClass);
        }
        this.currentAnimationClass = this.getTransitionAnimationClass(oldState, newState);
        this.currentCheckState = newState;
        // Check for parentNode so that animations are only run when the element is attached
        // to the DOM.
        if (this.adapter.isAttachedToDOM() && this.currentAnimationClass.length > 0) {
            this.adapter.addClass(this.currentAnimationClass);
            this.enableAnimationEndHandler = true;
        }
    };
    MDCCheckboxFoundation.prototype.determineCheckState = function() {
        var TRANSITION_STATE_INDETERMINATE = _constants.strings.TRANSITION_STATE_INDETERMINATE, TRANSITION_STATE_CHECKED = _constants.strings.TRANSITION_STATE_CHECKED, TRANSITION_STATE_UNCHECKED = _constants.strings.TRANSITION_STATE_UNCHECKED;
        if (this.adapter.isIndeterminate()) return TRANSITION_STATE_INDETERMINATE;
        return this.adapter.isChecked() ? TRANSITION_STATE_CHECKED : TRANSITION_STATE_UNCHECKED;
    };
    MDCCheckboxFoundation.prototype.getTransitionAnimationClass = function(oldState, newState) {
        var TRANSITION_STATE_INIT = _constants.strings.TRANSITION_STATE_INIT, TRANSITION_STATE_CHECKED = _constants.strings.TRANSITION_STATE_CHECKED, TRANSITION_STATE_UNCHECKED = _constants.strings.TRANSITION_STATE_UNCHECKED;
        var _a = MDCCheckboxFoundation.cssClasses, ANIM_UNCHECKED_CHECKED = _a.ANIM_UNCHECKED_CHECKED, ANIM_UNCHECKED_INDETERMINATE = _a.ANIM_UNCHECKED_INDETERMINATE, ANIM_CHECKED_UNCHECKED = _a.ANIM_CHECKED_UNCHECKED, ANIM_CHECKED_INDETERMINATE = _a.ANIM_CHECKED_INDETERMINATE, ANIM_INDETERMINATE_CHECKED = _a.ANIM_INDETERMINATE_CHECKED, ANIM_INDETERMINATE_UNCHECKED = _a.ANIM_INDETERMINATE_UNCHECKED;
        switch(oldState){
            case TRANSITION_STATE_INIT:
                if (newState === TRANSITION_STATE_UNCHECKED) return '';
                return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;
            case TRANSITION_STATE_UNCHECKED:
                return newState === TRANSITION_STATE_CHECKED ? ANIM_UNCHECKED_CHECKED : ANIM_UNCHECKED_INDETERMINATE;
            case TRANSITION_STATE_CHECKED:
                return newState === TRANSITION_STATE_UNCHECKED ? ANIM_CHECKED_UNCHECKED : ANIM_CHECKED_INDETERMINATE;
            default:
                return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;
        }
    };
    MDCCheckboxFoundation.prototype.updateAriaChecked = function() {
        // Ensure aria-checked is set to mixed if checkbox is in indeterminate state.
        if (this.adapter.isIndeterminate()) this.adapter.setNativeControlAttr(_constants.strings.ARIA_CHECKED_ATTR, _constants.strings.ARIA_CHECKED_INDETERMINATE_VALUE);
        else // The on/off state does not need to keep track of aria-checked, since
        // the screenreader uses the checked property on the checkbox element.
        this.adapter.removeNativeControlAttr(_constants.strings.ARIA_CHECKED_ATTR);
    };
    return MDCCheckboxFoundation;
}(_foundation.MDCFoundation);
exports.default = MDCCheckboxFoundation1;

},{"tslib":"lRdW5","@material/base/foundation":"kC5Yw","./constants":"jVLcG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b7kB2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
class Container {
    view(vnode) {
        return _mithrilDefault.default("div", {
            class: 'container' + (vnode.attrs.class ? ` ${vnode.attrs.class}` : ''),
            style: vnode.attrs.style
        }, vnode.children);
    }
}
module.exports = Container;

},{"mithril":"1zcoP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gL37S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _moment = require("moment");
var _momentDefault = parcelHelpers.interopDefault(_moment);
var _iconButtonJsx = require("../icon-button/icon-button.jsx");
var _iconButtonJsxDefault = parcelHelpers.interopDefault(_iconButtonJsx);
var _datePickerScss = require("./date-picker.scss");
class DatePicker {
    constructor(){
        this.selected = _momentDefault.default();
        this.currentMonth = 0;
        this.currentYear = 0;
        this.firstDayWeekday = 0;
        this.daysInMonth = 0;
    }
    oninit(vnode) {
        let date = null;
        if (!vnode.attrs.initialDate) date = _momentDefault.default();
        else date = _momentDefault.default(vnode.attrs.initialDate);
        this.selected = date;
        this.currentMonth = date.month();
        this.currentYear = date.year();
        this.daysInMonth = date.daysInMonth();
        this.firstDayWeekday = _momentDefault.default(`${this.currentYear}-${this.zeroPad(this.currentMonth + 1)}-01`).day();
    }
    back() {
        let current = _momentDefault.default(`${this.currentYear}-${this.zeroPad(this.currentMonth + 1)}-01`).subtract(1, 'months');
        this.currentMonth = current.month();
        this.currentYear = current.year();
        this.daysInMonth = current.daysInMonth();
        this.firstDayWeekday = _momentDefault.default(`${this.currentYear}-${this.zeroPad(this.currentMonth + 1)}-01`).day();
    }
    forward() {
        let current = _momentDefault.default(`${this.currentYear}-${this.zeroPad(this.currentMonth + 1)}-01`).add(1, 'months');
        this.currentMonth = current.month();
        this.currentYear = current.year();
        this.daysInMonth = current.daysInMonth();
        this.firstDayWeekday = _momentDefault.default(`${this.currentYear}-${this.zeroPad(this.currentMonth + 1)}-01`).day();
    }
    clickDay(vnode1, day3) {
        if (!day3) return;
        this.select(vnode1, day3);
    }
    select(vnode2, day1) {
        this.selected = _momentDefault.default(`${this.currentYear}-${this.zeroPad(this.currentMonth + 1)}-${this.zeroPad(day1)}`);
        vnode2.attrs.selectedChange(this.selected);
    }
    dayIsSelected(day2) {
        if (!day2 || !this.selected) return false;
        let dayAsMoment = _momentDefault.default(`${this.currentYear}-${this.zeroPad(this.currentMonth + 1)}-${this.zeroPad(day2)}`);
        return this.selected.isSame(dayAsMoment, 'day');
    }
    daysInMonthArray() {
        let array = [];
        for(let i = 0; i < this.daysInMonth; i++)array.push(i + 1);
        return array;
    }
    sliceIntoChunks(arr, chunkSize) {
        const res = [];
        for(let i = 0; i < arr.length; i += chunkSize){
            const chunk = arr.slice(i, i + chunkSize);
            res.push(chunk);
        }
        return res;
    }
    weekChunk() {
        let dimArray = this.daysInMonthArray();
        let firstWeek = []; // e.g: [null, null, null, null, null, 1, 2]
        let lastDayInFirstWeek = 0;
        let rest = [];
        for(let i = 0; i < this.firstDayWeekday; i++)firstWeek.push(null);
        for(let i1 = this.firstDayWeekday; i1 < 7; i1++){
            firstWeek.push(dimArray[i1 - this.firstDayWeekday]);
            lastDayInFirstWeek = i1 - this.firstDayWeekday;
        }
        for(let i2 = lastDayInFirstWeek + 1; i2 < dimArray.length; i2++)rest.push(dimArray[i2]);
        return this.sliceIntoChunks(firstWeek.concat(rest), 7);
    }
    formatHeader() {
        return _momentDefault.default(`${this.currentYear}-${this.zeroPad(this.currentMonth + 1)}-01`).format('MMMM YYYY');
    }
    zeroPad(num) {
        return num < 10 ? `0${num}` : `${num}`;
    }
    view(vnode3) {
        return _mithrilDefault.default("div", {
            class: "datePicker"
        }, _mithrilDefault.default("div", {
            class: "datePicker__navigation"
        }, _mithrilDefault.default(_iconButtonJsxDefault.default, {
            icon: "chevron_left",
            onclick: ()=>{
                this.back();
            }
        }), _mithrilDefault.default("div", {
            class: "datePicker__navigation__month"
        }, this.formatHeader()), _mithrilDefault.default(_iconButtonJsxDefault.default, {
            icon: "chevron_right",
            onclick: ()=>{
                this.forward();
            }
        })), _mithrilDefault.default("div", {
            class: "datePicker__calendar"
        }, _mithrilDefault.default("table", null, _mithrilDefault.default("thead", null, _mithrilDefault.default("tr", null, _mithrilDefault.default("th", null, "S"), _mithrilDefault.default("th", null, "M"), _mithrilDefault.default("th", null, "T"), _mithrilDefault.default("th", null, "W"), _mithrilDefault.default("th", null, "T"), _mithrilDefault.default("th", null, "F"), _mithrilDefault.default("th", null, "S"))), _mithrilDefault.default("tbody", null, this.weekChunk().map((week)=>{
            return _mithrilDefault.default("tr", null, week.map((day)=>{
                return _mithrilDefault.default("td", {
                    class: this.dayIsSelected(day) ? 'datePicker__calendar--selected' : '',
                    onclick: ()=>{
                        this.clickDay(vnode3, day);
                    }
                }, day);
            }));
        })))));
    }
}
module.exports = DatePicker;

},{"mithril":"1zcoP","moment":"jwcsj","../icon-button/icon-button.jsx":"lIf9M","./date-picker.scss":"2W8GI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jwcsj":[function(require,module,exports) {
(function(global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory();
})(this, function() {
    'use strict';
    var hookCallback;
    function hooks() {
        return hookCallback.apply(null, arguments);
    }
    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
        hookCallback = callback;
    }
    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }
    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }
    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }
    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) return Object.getOwnPropertyNames(obj).length === 0;
        else {
            var k;
            for(k in obj){
                if (hasOwnProp(obj, k)) return false;
            }
            return true;
        }
    }
    function isUndefined(input) {
        return input === void 0;
    }
    function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }
    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }
    function map(arr, fn) {
        var res = [], i;
        for(i = 0; i < arr.length; ++i)res.push(fn(arr[i], i));
        return res;
    }
    function extend(a, b) {
        for(var i in b)if (hasOwnProp(b, i)) a[i] = b[i];
        if (hasOwnProp(b, 'toString')) a.toString = b.toString;
        if (hasOwnProp(b, 'valueOf')) a.valueOf = b.valueOf;
        return a;
    }
    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }
    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidEra: null,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            era: null,
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false
        };
    }
    function getParsingFlags(m) {
        if (m._pf == null) m._pf = defaultParsingFlags();
        return m._pf;
    }
    var some;
    if (Array.prototype.some) some = Array.prototype.some;
    else some = function(fun) {
        var t = Object(this), len = t.length >>> 0, i;
        for(i = 0; i < len; i++){
            if (i in t && fun.call(this, t[i], i, t)) return true;
        }
        return false;
    };
    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m), parsedParts = some.call(flags.parsedDateParts, function(i) {
                return i != null;
            }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
            if (m._strict) isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
            if (Object.isFrozen == null || !Object.isFrozen(m)) m._isValid = isNowValid;
            else return isNowValid;
        }
        return m._isValid;
    }
    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) extend(getParsingFlags(m), flags);
        else getParsingFlags(m).userInvalidated = true;
        return m;
    }
    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [], updateInProgress = false;
    function copyConfig(to, from) {
        var i, prop, val;
        if (!isUndefined(from._isAMomentObject)) to._isAMomentObject = from._isAMomentObject;
        if (!isUndefined(from._i)) to._i = from._i;
        if (!isUndefined(from._f)) to._f = from._f;
        if (!isUndefined(from._l)) to._l = from._l;
        if (!isUndefined(from._strict)) to._strict = from._strict;
        if (!isUndefined(from._tzm)) to._tzm = from._tzm;
        if (!isUndefined(from._isUTC)) to._isUTC = from._isUTC;
        if (!isUndefined(from._offset)) to._offset = from._offset;
        if (!isUndefined(from._pf)) to._pf = getParsingFlags(from);
        if (!isUndefined(from._locale)) to._locale = from._locale;
        if (momentProperties.length > 0) for(i = 0; i < momentProperties.length; i++){
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) to[prop] = val;
        }
        return to;
    }
    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) this._d = new Date(NaN);
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }
    function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }
    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) console.warn('Deprecation warning: ' + msg);
    }
    function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function() {
            if (hooks.deprecationHandler != null) hooks.deprecationHandler(null, msg);
            if (firstTime) {
                var args = [], arg, i, key;
                for(i = 0; i < arguments.length; i++){
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for(key in arguments[0])if (hasOwnProp(arguments[0], key)) arg += key + ': ' + arguments[0][key] + ', ';
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else arg = arguments[i];
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }
    var deprecations = {
    };
    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) hooks.deprecationHandler(name, msg);
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }
    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;
    function isFunction(input) {
        return typeof Function !== 'undefined' && input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }
    function set(config) {
        var prop, i;
        for(i in config)if (hasOwnProp(config, i)) {
            prop = config[i];
            if (isFunction(prop)) this[i] = prop;
            else this['_' + i] = prop;
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
    }
    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({
        }, parentConfig), prop;
        for(prop in childConfig)if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                res[prop] = {
                };
                extend(res[prop], parentConfig[prop]);
                extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) res[prop] = childConfig[prop];
            else delete res[prop];
        }
        for(prop in parentConfig)if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) // make sure changes to properties don't modify parent config
        res[prop] = extend({
        }, res[prop]);
        return res;
    }
    function Locale(config) {
        if (config != null) this.set(config);
    }
    var keys;
    if (Object.keys) keys = Object.keys;
    else keys = function(obj) {
        var i, res = [];
        for(i in obj)if (hasOwnProp(obj, i)) res.push(i);
        return res;
    };
    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L'
    };
    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }
    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign = number >= 0;
        return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {
    }, formatTokenFunctions = {
    };
    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') func = function() {
            return this[callback]();
        };
        if (token) formatTokenFunctions[token] = func;
        if (padded) formatTokenFunctions[padded[0]] = function() {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
        if (ordinal) formatTokenFunctions[ordinal] = function() {
            return this.localeData().ordinal(func.apply(this, arguments), token);
        };
    }
    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) return input.replace(/^\[|\]$/g, '');
        return input.replace(/\\/g, '');
    }
    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i1, length;
        for(i1 = 0, length = array.length; i1 < length; i1++)if (formatTokenFunctions[array[i1]]) array[i1] = formatTokenFunctions[array[i1]];
        else array[i1] = removeFormattingTokens(array[i1]);
        return function(mom) {
            var output = '', i;
            for(i = 0; i < length; i++)output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            return output;
        };
    }
    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) return m.localeData().invalidDate();
        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
        return formatFunctions[format](m);
    }
    function expandFormat(format, locale) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while(i >= 0 && localFormattingTokens.test(format)){
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }
        return format;
    }
    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A'
    };
    function longDateFormat(key) {
        var format = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format || !formatUpper) return format;
        this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
            if (tok === 'MMMM' || tok === 'MM' || tok === 'DD' || tok === 'dddd') return tok.slice(1);
            return tok;
        }).join('');
        return this._longDateFormat[key];
    }
    var defaultInvalidDate = 'Invalid date';
    function invalidDate() {
        return this._invalidDate;
    }
    var defaultOrdinal = '%d', defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    function ordinal1(number) {
        return this._ordinal.replace('%d', number);
    }
    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        w: 'a week',
        ww: '%d weeks',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years'
    };
    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }
    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }
    var aliases = {
    };
    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }
    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }
    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {
        }, normalizedProp, prop;
        for(prop in inputObject)if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) normalizedInput[normalizedProp] = inputObject[prop];
        }
        return normalizedInput;
    }
    var priorities = {
    };
    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }
    function getPrioritizedUnits(unitsObj) {
        var units = [], u;
        for(u in unitsObj)if (hasOwnProp(unitsObj, u)) units.push({
            unit: u,
            priority: priorities[u]
        });
        units.sort(function(a, b) {
            return a.priority - b.priority;
        });
        return units;
    }
    function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }
    function absFloor(number) {
        if (number < 0) // -0 -> 0
        return Math.ceil(number) || 0;
        else return Math.floor(number);
    }
    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) value = absFloor(coercedNumber);
        return value;
    }
    function makeGetSet(unit, keepTime) {
        return function(value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else return get(this, unit);
        };
    }
    function get(mom, unit) {
        return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }
    function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                value = toInt(value);
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
            } else mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
        }
    }
    // MOMENTS
    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) return this[units]();
        return this;
    }
    function stringSet(units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units), i;
            for(i = 0; i < prioritized.length; i++)this[prioritized[i].unit](units[prioritized[i].unit]);
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) return this[units](value);
        }
        return this;
    }
    var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
    regexes = {
    };
    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function(isStrict, localeData) {
            return isStrict && strictRegex ? strictRegex : regex;
        };
    }
    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) return new RegExp(unescapeFormat(token));
        return regexes[token](config._strict, config._locale);
    }
    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }
    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }
    var tokens1 = {
    };
    function addParseToken(token, callback) {
        var i, func = callback;
        if (typeof token === 'string') token = [
            token
        ];
        if (isNumber(callback)) func = function(input, array) {
            array[callback] = toInt(input);
        };
        for(i = 0; i < token.length; i++)tokens1[token[i]] = func;
    }
    function addWeekParseToken(token2, callback) {
        addParseToken(token2, function(input, array, config, token) {
            config._w = config._w || {
            };
            callback(input, config._w, config, token);
        });
    }
    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens1, token)) tokens1[token](input, config._a, config, token);
    }
    var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
    function mod(n, x) {
        return (n % x + x) % x;
    }
    var indexOf;
    if (Array.prototype.indexOf) indexOf = Array.prototype.indexOf;
    else indexOf = function(o) {
        // I know
        var i;
        for(i = 0; i < this.length; ++i){
            if (this[i] === o) return i;
        }
        return -1;
    };
    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) return NaN;
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
    }
    // FORMATTING
    addFormatToken('M', [
        'MM',
        2
    ], 'Mo', function() {
        return this.month() + 1;
    });
    addFormatToken('MMM', 0, 0, function(format) {
        return this.localeData().monthsShort(this, format);
    });
    addFormatToken('MMMM', 0, 0, function(format) {
        return this.localeData().months(this, format);
    });
    // ALIASES
    addUnitAlias('month', 'M');
    // PRIORITY
    addUnitPriority('month', 8);
    // PARSING
    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function(isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function(isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });
    addParseToken([
        'M',
        'MM'
    ], function(input, array) {
        array[MONTH] = toInt(input) - 1;
    });
    addParseToken([
        'MMM',
        'MMMM'
    ], function(input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) array[MONTH] = month;
        else getParsingFlags(config).invalidMonth = input;
    });
    // LOCALES
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'), defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
    function localeMonths(m, format) {
        if (!m) return isArray(this._months) ? this._months : this._months['standalone'];
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }
    function localeMonthsShort(m, format) {
        if (!m) return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }
    function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for(i = 0; i < 12; ++i){
                mom = createUTC([
                    2000,
                    i
                ]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }
        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else if (format === 'MMM') {
            ii = indexOf.call(this._shortMonthsParse, llc);
            if (ii !== -1) return ii;
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            if (ii !== -1) return ii;
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;
        if (this._monthsParseExact) return handleStrictParse.call(this, monthName, format, strict);
        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }
        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for(i = 0; i < 12; i++){
            // make the regex if we don't have it already
            mom = createUTC([
                2000,
                i
            ]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) return i;
            else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) return i;
            else if (!strict && this._monthsParse[i].test(monthName)) return i;
        }
    }
    // MOMENTS
    function setMonth(mom, value) {
        var dayOfMonth;
        if (!mom.isValid()) // No op
        return mom;
        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) value = toInt(value);
            else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) return mom;
            }
        }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }
    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else return get(this, 'Month');
    }
    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }
    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) computeMonthsParse.call(this);
            if (isStrict) return this._monthsShortStrictRegex;
            else return this._monthsShortRegex;
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) this._monthsShortRegex = defaultMonthsShortRegex;
            return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }
    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) computeMonthsParse.call(this);
            if (isStrict) return this._monthsStrictRegex;
            else return this._monthsRegex;
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) this._monthsRegex = defaultMonthsRegex;
            return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
    }
    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }
        var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
        for(i = 0; i < 12; i++){
            // make the regex if we don't have it already
            mom = createUTC([
                2000,
                i
            ]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for(i = 0; i < 12; i++){
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for(i = 0; i < 24; i++)mixedPieces[i] = regexEscape(mixedPieces[i]);
        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }
    // FORMATTING
    addFormatToken('Y', 0, 0, function() {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
    });
    addFormatToken(0, [
        'YY',
        2
    ], 0, function() {
        return this.year() % 100;
    });
    addFormatToken(0, [
        'YYYY',
        4
    ], 0, 'year');
    addFormatToken(0, [
        'YYYYY',
        5
    ], 0, 'year');
    addFormatToken(0, [
        'YYYYYY',
        6,
        true
    ], 0, 'year');
    // ALIASES
    addUnitAlias('year', 'y');
    // PRIORITIES
    addUnitPriority('year', 1);
    // PARSING
    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);
    addParseToken([
        'YYYYY',
        'YYYYYY'
    ], YEAR);
    addParseToken('YYYY', function(input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function(input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function(input, array) {
        array[YEAR] = parseInt(input, 10);
    });
    // HELPERS
    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }
    // HOOKS
    hooks.parseTwoDigitYear = function(input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };
    // MOMENTS
    var getSetYear = makeGetSet('FullYear', true);
    function getIsLeapYear() {
        return isLeapYear(this.year());
    }
    function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) date.setFullYear(y);
        } else date = new Date(y, m, d, h, M, s, ms);
        return date;
    }
    function createUTCDate(y) {
        var date, args;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) date.setUTCFullYear(y);
        } else date = new Date(Date.UTC.apply(null, arguments));
        return date;
    }
    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var fwd = 7 + dow - doy, // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
    }
    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }
        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }
    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }
        return {
            week: resWeek,
            year: resYear
        };
    }
    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }
    // FORMATTING
    addFormatToken('w', [
        'ww',
        2
    ], 'wo', 'week');
    addFormatToken('W', [
        'WW',
        2
    ], 'Wo', 'isoWeek');
    // ALIASES
    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');
    // PRIORITIES
    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);
    // PARSING
    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);
    addWeekParseToken([
        'w',
        'ww',
        'W',
        'WW'
    ], function(input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });
    // HELPERS
    // LOCALES
    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }
    var defaultLocaleWeek = {
        dow: 0,
        doy: 6
    };
    function localeFirstDayOfWeek() {
        return this._week.dow;
    }
    function localeFirstDayOfYear() {
        return this._week.doy;
    }
    // MOMENTS
    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }
    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }
    // FORMATTING
    addFormatToken('d', 0, 'do', 'day');
    addFormatToken('dd', 0, 0, function(format) {
        return this.localeData().weekdaysMin(this, format);
    });
    addFormatToken('ddd', 0, 0, function(format) {
        return this.localeData().weekdaysShort(this, format);
    });
    addFormatToken('dddd', 0, 0, function(format) {
        return this.localeData().weekdays(this, format);
    });
    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');
    // ALIASES
    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');
    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);
    // PARSING
    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function(isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function(isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function(isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });
    addWeekParseToken([
        'dd',
        'ddd',
        'dddd'
    ], function(input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) week.d = weekday;
        else getParsingFlags(config).invalidWeekday = input;
    });
    addWeekParseToken([
        'd',
        'e',
        'E'
    ], function(input, week, config, token) {
        week[token] = toInt(input);
    });
    // HELPERS
    function parseWeekday(input, locale) {
        if (typeof input !== 'string') return input;
        if (!isNaN(input)) return parseInt(input, 10);
        input = locale.weekdaysParse(input);
        if (typeof input === 'number') return input;
        return null;
    }
    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') return locale.weekdaysParse(input) % 7 || 7;
        return isNaN(input) ? null : input;
    }
    // LOCALES
    function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }
    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'), defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'), defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
    function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? 'format' : 'standalone'];
        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
    }
    function localeWeekdaysShort(m) {
        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }
    function localeWeekdaysMin(m) {
        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }
    function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];
            for(i = 0; i < 7; ++i){
                mom = createUTC([
                    2000,
                    1
                ]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }
        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }
    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;
        if (this._weekdaysParseExact) return handleStrictParse$1.call(this, weekdayName, format, strict);
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }
        for(i = 0; i < 7; i++){
            // make the regex if we don't have it already
            mom = createUTC([
                2000,
                1
            ]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) return i;
            else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) return i;
            else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) return i;
            else if (!strict && this._weekdaysParse[i].test(weekdayName)) return i;
        }
    }
    // MOMENTS
    function getSetDayOfWeek(input) {
        if (!this.isValid()) return input != null ? this : NaN;
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else return day;
    }
    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) return input != null ? this : NaN;
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }
    function getSetISODayOfWeek(input) {
        if (!this.isValid()) return input != null ? this : NaN;
        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.
        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else return this.day() || 7;
    }
    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) computeWeekdaysParse.call(this);
            if (isStrict) return this._weekdaysStrictRegex;
            else return this._weekdaysRegex;
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) this._weekdaysRegex = defaultWeekdaysRegex;
            return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }
    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) computeWeekdaysParse.call(this);
            if (isStrict) return this._weekdaysShortStrictRegex;
            else return this._weekdaysShortRegex;
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }
    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) computeWeekdaysParse.call(this);
            if (isStrict) return this._weekdaysMinStrictRegex;
            else return this._weekdaysMinRegex;
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }
    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
        for(i = 0; i < 7; i++){
            // make the regex if we don't have it already
            mom = createUTC([
                2000,
                1
            ]).day(i);
            minp = regexEscape(this.weekdaysMin(mom, ''));
            shortp = regexEscape(this.weekdaysShort(mom, ''));
            longp = regexEscape(this.weekdays(mom, ''));
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }
    // FORMATTING
    function hFormat() {
        return this.hours() % 12 || 12;
    }
    function kFormat() {
        return this.hours() || 24;
    }
    addFormatToken('H', [
        'HH',
        2
    ], 0, 'hour');
    addFormatToken('h', [
        'hh',
        2
    ], 0, hFormat);
    addFormatToken('k', [
        'kk',
        2
    ], 0, kFormat);
    addFormatToken('hmm', 0, 0, function() {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });
    addFormatToken('hmmss', 0, 0, function() {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    addFormatToken('Hmm', 0, 0, function() {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });
    addFormatToken('Hmmss', 0, 0, function() {
        return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    function meridiem1(token, lowercase) {
        addFormatToken(token, 0, 0, function() {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }
    meridiem1('a', true);
    meridiem1('A', false);
    // ALIASES
    addUnitAlias('hour', 'h');
    // PRIORITY
    addUnitPriority('hour', 13);
    // PARSING
    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }
    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('k', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);
    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);
    addParseToken([
        'H',
        'HH'
    ], HOUR);
    addParseToken([
        'k',
        'kk'
    ], function(input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken([
        'a',
        'A'
    ], function(input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken([
        'h',
        'hh'
    ], function(input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });
    // LOCALES
    function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, // Setting the hour should keep the time, because the user explicitly
    // specified which hour they want. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    getSetHour = makeGetSet('Hours', true);
    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) return isLower ? 'pm' : 'PM';
        else return isLower ? 'am' : 'AM';
    }
    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
    };
    // internal storage for locale config files
    var locales = {
    }, localeFamilies = {
    }, globalLocale;
    function commonPrefix(arr1, arr2) {
        var i, minl = Math.min(arr1.length, arr2.length);
        for(i = 0; i < minl; i += 1){
            if (arr1[i] !== arr2[i]) return i;
        }
        return minl;
    }
    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }
    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;
        while(i < names.length){
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while(j > 0){
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) return locale;
                if (next && next.length >= j && commonPrefix(split, next) >= j - 1) break;
                j--;
            }
            i++;
        }
        return globalLocale;
    }
    function loadLocale(name) {
        var oldLocale = null, aliasedRequire;
        // TODO: Find a better way to register and load all the locales in Node
        if (locales[name] === undefined && typeof module !== 'undefined' && module && module.exports) try {
            oldLocale = globalLocale._abbr;
            aliasedRequire = undefined;
            aliasedRequire('./locale/' + name);
            getSetGlobalLocale(oldLocale);
        } catch (e) {
            // mark as not found to avoid repeating expensive file require call causing high CPU
            // when trying to find en-US, en_US, en-us for every format call
            locales[name] = null; // null means not found
        }
        return locales[name];
    }
    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) data = getLocale(key);
            else data = defineLocale(key, values);
            if (data) // moment.duration._locale = moment._locale = data;
            globalLocale = data;
            else if (typeof console !== 'undefined' && console.warn) //warn user if arguments are passed but the locale could not be set
            console.warn('Locale ' + key + ' not found. Did you forget to load it?');
        }
        return globalLocale._abbr;
    }
    function defineLocale(name, config) {
        if (config !== null) {
            var locale, parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride', "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) parentConfig = locales[config.parentLocale]._config;
                else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) parentConfig = locale._config;
                    else {
                        if (!localeFamilies[config.parentLocale]) localeFamilies[config.parentLocale] = [];
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));
            if (localeFamilies[name]) localeFamilies[name].forEach(function(x) {
                defineLocale(x.name, x.config);
            });
            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);
            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }
    function updateLocale(name, config) {
        if (config != null) {
            var locale, tmpLocale, parentConfig = baseConfig;
            if (locales[name] != null && locales[name].parentLocale != null) // Update existing child locale in-place to avoid memory-leaks
            locales[name].set(mergeConfigs(locales[name]._config, config));
            else {
                // MERGE
                tmpLocale = loadLocale(name);
                if (tmpLocale != null) parentConfig = tmpLocale._config;
                config = mergeConfigs(parentConfig, config);
                if (tmpLocale == null) // updateLocale is called for creating a new locale
                // Set abbr so it will have a name (getters return
                // undefined otherwise).
                config.abbr = name;
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;
            }
            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else // pass null for config to unupdate, useful for tests
        if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
                locales[name] = locales[name].parentLocale;
                if (name === getSetGlobalLocale()) getSetGlobalLocale(name);
            } else if (locales[name] != null) delete locales[name];
        }
        return locales[name];
    }
    // returns locale data
    function getLocale(key) {
        var locale;
        if (key && key._locale && key._locale._abbr) key = key._locale._abbr;
        if (!key) return globalLocale;
        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) return locale;
            key = [
                key
            ];
        }
        return chooseLocale(key);
    }
    function listLocales() {
        return keys(locales);
    }
    function checkOverflow(m) {
        var overflow, a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
            overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) overflow = DATE;
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) overflow = WEEK;
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) overflow = WEEKDAY;
            getParsingFlags(m).overflow = overflow;
        }
        return m;
    }
    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
        [
            'YYYYYY-MM-DD',
            /[+-]\d{6}-\d\d-\d\d/
        ],
        [
            'YYYY-MM-DD',
            /\d{4}-\d\d-\d\d/
        ],
        [
            'GGGG-[W]WW-E',
            /\d{4}-W\d\d-\d/
        ],
        [
            'GGGG-[W]WW',
            /\d{4}-W\d\d/,
            false
        ],
        [
            'YYYY-DDD',
            /\d{4}-\d{3}/
        ],
        [
            'YYYY-MM',
            /\d{4}-\d\d/,
            false
        ],
        [
            'YYYYYYMMDD',
            /[+-]\d{10}/
        ],
        [
            'YYYYMMDD',
            /\d{8}/
        ],
        [
            'GGGG[W]WWE',
            /\d{4}W\d{3}/
        ],
        [
            'GGGG[W]WW',
            /\d{4}W\d{2}/,
            false
        ],
        [
            'YYYYDDD',
            /\d{7}/
        ],
        [
            'YYYYMM',
            /\d{6}/,
            false
        ],
        [
            'YYYY',
            /\d{4}/,
            false
        ], 
    ], // iso time formats and regexes
    isoTimes = [
        [
            'HH:mm:ss.SSSS',
            /\d\d:\d\d:\d\d\.\d+/
        ],
        [
            'HH:mm:ss,SSSS',
            /\d\d:\d\d:\d\d,\d+/
        ],
        [
            'HH:mm:ss',
            /\d\d:\d\d:\d\d/
        ],
        [
            'HH:mm',
            /\d\d:\d\d/
        ],
        [
            'HHmmss.SSSS',
            /\d\d\d\d\d\d\.\d+/
        ],
        [
            'HHmmss,SSSS',
            /\d\d\d\d\d\d,\d+/
        ],
        [
            'HHmmss',
            /\d\d\d\d\d\d/
        ],
        [
            'HHmm',
            /\d\d\d\d/
        ],
        [
            'HH',
            /\d\d/
        ], 
    ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -240,
        EST: -300,
        CDT: -300,
        CST: -360,
        MDT: -360,
        MST: -420,
        PDT: -420,
        PST: -480
    };
    // date from iso format
    function configFromISO(config) {
        var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat;
        if (match) {
            getParsingFlags(config).iso = true;
            for(i = 0, l = isoDates.length; i < l; i++)if (isoDates[i][1].exec(match[1])) {
                dateFormat = isoDates[i][0];
                allowTime = isoDates[i][2] !== false;
                break;
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for(i = 0, l = isoTimes.length; i < l; i++)if (isoTimes[i][1].exec(match[3])) {
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                    break;
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) tzFormat = 'Z';
                else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else config._isValid = false;
    }
    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10), 
        ];
        if (secondStr) result.push(parseInt(secondStr, 10));
        return result;
    }
    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) return 2000 + year;
        else if (year <= 999) return 1900 + year;
        return year;
    }
    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    }
    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }
    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) return obsOffsets[obsOffset];
        else if (militaryOffset) // the only allowed military tz is Z
        return 0;
        else {
            var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
            return h * 60 + m;
        }
    }
    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
        if (match) {
            parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
            if (!checkWeekday(match[1], parsedArray, config)) return;
            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);
            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            getParsingFlags(config).rfc2822 = true;
        } else config._isValid = false;
    }
    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }
        configFromISO(config);
        if (config._isValid === false) delete config._isValid;
        else return;
        configFromRFC2822(config);
        if (config._isValid === false) delete config._isValid;
        else return;
        if (config._strict) config._isValid = false;
        else // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
    }
    hooks.createFromInputFallback = deprecate("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    });
    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) return a;
        if (b != null) return b;
        return c;
    }
    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) return [
            nowValue.getUTCFullYear(),
            nowValue.getUTCMonth(),
            nowValue.getUTCDate(), 
        ];
        return [
            nowValue.getFullYear(),
            nowValue.getMonth(),
            nowValue.getDate()
        ];
    }
    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;
        if (config._d) return;
        currentDate = currentDateArray(config);
        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) dayOfYearFromWeekInfo(config);
        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) getParsingFlags(config)._overflowDayOfYear = true;
            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }
        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for(i = 0; i < 3 && config._a[i] == null; ++i)config._a[i] = input[i] = currentDate[i];
        // Zero out whatever was not defaulted, including time
        for(; i < 7; i++)config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        if (config._nextDay) config._a[HOUR] = 24;
        // check for mismatching day of week
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) getParsingFlags(config).weekdayMismatch = true;
    }
    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;
            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) weekdayOverflow = true;
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;
            curWeek = weekOfYear(createLocal(), dow, doy);
            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
            // Default to current week.
            week = defaults(w.w, curWeek.week);
            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) weekdayOverflow = true;
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) weekdayOverflow = true;
            } else // default to beginning of week
            weekday = dow;
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) getParsingFlags(config)._overflowWeeks = true;
        else if (weekdayOverflow != null) getParsingFlags(config)._overflowWeekday = true;
        else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }
    // constant that refers to the ISO standard
    hooks.ISO_8601 = function() {
    };
    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function() {
    };
    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0, era;
        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        for(i = 0; i < tokens.length; i++){
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) getParsingFlags(config).unusedInput.push(skipped);
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) getParsingFlags(config).empty = false;
                else getParsingFlags(config).unusedTokens.push(token);
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) getParsingFlags(config).unusedTokens.push(token);
        }
        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) getParsingFlags(config).unusedInput.push(string);
        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) getParsingFlags(config).bigHour = undefined;
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
        // handle era
        era = getParsingFlags(config).era;
        if (era !== null) config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        configFromArray(config);
        checkOverflow(config);
    }
    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;
        if (meridiem == null) // nothing to do
        return hour;
        if (locale.meridiemHour != null) return locale.meridiemHour(hour, meridiem);
        else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) hour += 12;
            if (!isPm && hour === 12) hour = 0;
            return hour;
        } else // this is not supposed to happen
        return hour;
    }
    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false;
        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }
        for(i = 0; i < config._f.length; i++){
            currentScore = 0;
            validFormatFound = false;
            tempConfig = copyConfig({
            }, config);
            if (config._useUTC != null) tempConfig._useUTC = config._useUTC;
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);
            if (isValid(tempConfig)) validFormatFound = true;
            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;
            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
            getParsingFlags(tempConfig).score = currentScore;
            if (!bestFormatIsValid) {
                if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                    if (validFormatFound) bestFormatIsValid = true;
                }
            } else if (currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }
        extend(config, bestMoment || tempConfig);
    }
    function configFromObject(config) {
        if (config._d) return;
        var i = normalizeObjectUnits(config._i), dayOrDate = i.day === undefined ? i.date : i.day;
        config._a = map([
            i.year,
            i.month,
            dayOrDate,
            i.hour,
            i.minute,
            i.second,
            i.millisecond
        ], function(obj) {
            return obj && parseInt(obj, 10);
        });
        configFromArray(config);
    }
    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }
        return res;
    }
    function prepareConfig(config) {
        var input = config._i, format = config._f;
        config._locale = config._locale || getLocale(config._l);
        if (input === null || format === undefined && input === '') return createInvalid({
            nullInput: true
        });
        if (typeof input === 'string') config._i = input = config._locale.preparse(input);
        if (isMoment(input)) return new Moment(checkOverflow(input));
        else if (isDate(input)) config._d = input;
        else if (isArray(format)) configFromStringAndArray(config);
        else if (format) configFromStringAndFormat(config);
        else configFromInput(config);
        if (!isValid(config)) config._d = null;
        return config;
    }
    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) config._d = new Date(hooks.now());
        else if (isDate(input)) config._d = new Date(input.valueOf());
        else if (typeof input === 'string') configFromString(config);
        else if (isArray(input)) {
            config._a = map(input.slice(0), function(obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) configFromObject(config);
        else if (isNumber(input)) // from milliseconds
        config._d = new Date(input);
        else hooks.createFromInputFallback(config);
    }
    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {
        };
        if (format === true || format === false) {
            strict = format;
            format = undefined;
        }
        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }
        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) input = undefined;
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        return createFromConfig(c);
    }
    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }
    var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) return other < this ? this : other;
        else return createInvalid();
    }), prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) return other > this ? this : other;
        else return createInvalid();
    });
    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) moments = moments[0];
        if (!moments.length) return createLocal();
        res = moments[0];
        for(i = 1; i < moments.length; ++i)if (!moments[i].isValid() || moments[i][fn](res)) res = moments[i];
        return res;
    }
    // TODO: Use [].sort instead?
    function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isBefore', args);
    }
    function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isAfter', args);
    }
    var now1 = function() {
        return Date.now ? Date.now() : +new Date();
    };
    var ordering = [
        'year',
        'quarter',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second',
        'millisecond', 
    ];
    function isDurationValid(m) {
        var key, unitHasDecimal = false, i;
        for(key in m){
            if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) return false;
        }
        for(i = 0; i < ordering.length; ++i)if (m[ordering[i]]) {
            if (unitHasDecimal) return false; // only allow non-integers for smallest unit
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) unitHasDecimal = true;
        }
        return true;
    }
    function isValid$1() {
        return this._isValid;
    }
    function createInvalid$1() {
        return createDuration(NaN);
    }
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || normalizedInput.isoWeek || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput);
        // representation for dateAddRemove
        this._milliseconds = +milliseconds + seconds * 1000 + minutes * 60000 + hours * 3600000; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;
        this._data = {
        };
        this._locale = getLocale();
        this._bubble();
    }
    function isDuration(obj) {
        return obj instanceof Duration;
    }
    function absRound(number) {
        if (number < 0) return Math.round(-1 * number) * -1;
        else return Math.round(number);
    }
    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
        for(i = 0; i < len; i++)if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) diffs++;
        return diffs + lengthDiff;
    }
    // FORMATTING
    function offset1(token, separator) {
        addFormatToken(token, 0, 0, function() {
            var offset = this.utcOffset(), sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
        });
    }
    offset1('Z', ':');
    offset1('ZZ', '');
    // PARSING
    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken([
        'Z',
        'ZZ'
    ], function(input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });
    // HELPERS
    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher), chunk, parts, minutes;
        if (matches === null) return null;
        chunk = matches[matches.length - 1] || [];
        parts = (chunk + '').match(chunkOffset) || [
            '-',
            0,
            0
        ];
        minutes = +(parts[1] * 60) + toInt(parts[2]);
        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }
    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else return createLocal(input).local();
    }
    function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset());
    }
    // HOOKS
    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function() {
    };
    // MOMENTS
    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0, localAdjust;
        if (!this.isValid()) return input != null ? this : NaN;
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) return this;
            } else if (Math.abs(input) < 16 && !keepMinutes) input = input * 60;
            if (!this._isUTC && keepLocalTime) localAdjust = getDateOffset(this);
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) this.add(localAdjust, 'm');
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else return this._isUTC ? offset : getDateOffset(this);
    }
    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') input = -input;
            this.utcOffset(input, keepLocalTime);
            return this;
        } else return -this.utcOffset();
    }
    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }
    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;
            if (keepLocalTime) this.subtract(getDateOffset(this), 'm');
        }
        return this;
    }
    function setOffsetToParsedOffset() {
        if (this._tzm != null) this.utcOffset(this._tzm, false, true);
        else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) this.utcOffset(tZone);
            else this.utcOffset(0, true);
        }
        return this;
    }
    function hasAlignedHourOffset(input) {
        if (!this.isValid()) return false;
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
    }
    function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }
    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) return this._isDSTShifted;
        var c = {
        }, other;
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else this._isDSTShifted = false;
        return this._isDSTShifted;
    }
    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }
    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }
    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }
    // ASP.NET json date format regex
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    function createDuration(input, key) {
        var duration = input, // matching against regexp is expensive, do it on demand
        match = null, sign, ret, diffRes;
        if (isDuration(input)) duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
        };
        else if (isNumber(input) || !isNaN(+input)) {
            duration = {
            };
            if (key) duration[key] = +input;
            else duration.milliseconds = +input;
        } else if (match = aspNetRegex.exec(input)) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign
            };
        } else if (match = isoRegex.exec(input)) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign)
            };
        } else if (duration == null) // checks for null or undefined
        duration = {
        };
        else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
            duration = {
            };
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, '_locale')) ret._locale = input._locale;
        if (isDuration(input) && hasOwnProp(input, '_isValid')) ret._isValid = input._isValid;
        return ret;
    }
    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;
    function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }
    function positiveMomentsDifference(base, other) {
        var res = {
        };
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) --res.months;
        res.milliseconds = +other - +base.clone().add(res.months, 'M');
        return res;
    }
    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) return {
            milliseconds: 0,
            months: 0
        };
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) res = positiveMomentsDifference(base, other);
        else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }
        return res;
    }
    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function(val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val;
                val = period;
                period = tmp;
            }
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }
    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds, days = absRound(duration._days), months = absRound(duration._months);
        if (!mom.isValid()) // No op
        return;
        updateOffset = updateOffset == null ? true : updateOffset;
        if (months) setMonth(mom, get(mom, 'Month') + months * isAdding);
        if (days) set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        if (milliseconds) mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        if (updateOffset) hooks.updateOffset(mom, days || months);
    }
    var add = createAdder(1, 'add'), subtract = createAdder(-1, 'subtract');
    function isString(input) {
        return typeof input === 'string' || input instanceof String;
    }
    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
    function isMomentInput(input) {
        return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === undefined;
    }
    function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
            'years',
            'year',
            'y',
            'months',
            'month',
            'M',
            'days',
            'day',
            'd',
            'dates',
            'date',
            'D',
            'hours',
            'hour',
            'h',
            'minutes',
            'minute',
            'm',
            'seconds',
            'second',
            's',
            'milliseconds',
            'millisecond',
            'ms', 
        ], i, property;
        for(i = 0; i < properties.length; i += 1){
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
    }
    function isNumberOrStringArray(input) {
        var arrayTest = isArray(input), dataTypeTest = false;
        if (arrayTest) dataTypeTest = input.filter(function(item) {
            return !isNumber(item) && isString(input);
        }).length === 0;
        return arrayTest && dataTypeTest;
    }
    function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
            'sameDay',
            'nextDay',
            'lastDay',
            'nextWeek',
            'lastWeek',
            'sameElse', 
        ], i, property;
        for(i = 0; i < properties.length; i += 1){
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
    }
    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
    }
    function calendar$1(time, formats) {
        // Support for single parameter, formats only overload to the calendar function
        if (arguments.length === 1) {
            if (!arguments[0]) {
                time = undefined;
                formats = undefined;
            } else if (isMomentInput(arguments[0])) {
                time = arguments[0];
                formats = undefined;
            } else if (isCalendarSpec(arguments[0])) {
                formats = arguments[0];
                time = undefined;
            }
        }
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(), sod = cloneWithOffset(now, this).startOf('day'), format = hooks.calendarFormat(this, sod) || 'sameElse', output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }
    function clone() {
        return new Moment(this);
    }
    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) return false;
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') return this.valueOf() > localInput.valueOf();
        else return localInput.valueOf() < this.clone().startOf(units).valueOf();
    }
    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) return false;
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') return this.valueOf() < localInput.valueOf();
        else return this.clone().endOf(units).valueOf() < localInput.valueOf();
    }
    function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from), localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) return false;
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }
    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input), inputMs;
        if (!(this.isValid() && localInput.isValid())) return false;
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') return this.valueOf() === localInput.valueOf();
        else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }
    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }
    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }
    function diff1(input, units, asFloat) {
        var that, zoneDelta, output;
        if (!this.isValid()) return NaN;
        that = cloneWithOffset(input, this);
        if (!that.isValid()) return NaN;
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 60000;
        units = normalizeUnits(units);
        switch(units){
            case 'year':
                output = monthDiff(this, that) / 12;
                break;
            case 'month':
                output = monthDiff(this, that);
                break;
            case 'quarter':
                output = monthDiff(this, that) / 3;
                break;
            case 'second':
                output = (this - that) / 1000;
                break; // 1000
            case 'minute':
                output = (this - that) / 60000;
                break; // 1000 * 60
            case 'hour':
                output = (this - that) / 3600000;
                break; // 1000 * 60 * 60
            case 'day':
                output = (this - that - zoneDelta) / 86400000;
                break; // 1000 * 60 * 60 * 24, negate dst
            case 'week':
                output = (this - that - zoneDelta) / 604800000;
                break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default:
                output = this - that;
        }
        return asFloat ? output : absFloor(output);
    }
    function monthDiff(a, b) {
        if (a.date() < b.date()) // end-of-month calculations work correct when the start month has more
        // days than the end month.
        return -monthDiff(b, a);
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'), anchor2, adjust;
        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }
        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }
    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }
    function toISOString(keepOffset) {
        if (!this.isValid()) return null;
        var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) return this.toDate().toISOString();
            else return new Date(this.valueOf() + this.utcOffset() * 60000).toISOString().replace('Z', formatMoment(m, 'Z'));
        }
        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }
    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */ function inspect() {
        if (!this.isValid()) return 'moment.invalid(/* ' + this._i + ' */)';
        var func = 'moment', zone = '', prefix, year, datetime, suffix;
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        prefix = '[' + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        datetime = '-MM-DD[T]HH:mm:ss.SSS';
        suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
    }
    function format1(inputString) {
        if (!inputString) inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }
    function from1(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) return createDuration({
            to: this,
            from: time
        }).locale(this.locale()).humanize(!withoutSuffix);
        else return this.localeData().invalidDate();
    }
    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }
    function to1(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) return createDuration({
            from: this,
            to: time
        }).locale(this.locale()).humanize(!withoutSuffix);
        else return this.localeData().invalidDate();
    }
    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }
    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale1(key) {
        var newLocaleData;
        if (key === undefined) return this._locale._abbr;
        else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) this._locale = newLocaleData;
            return this;
        }
    }
    var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function(key) {
        if (key === undefined) return this.localeData();
        else return this.locale(key);
    });
    function localeData() {
        return this._locale;
    }
    var MS_PER_SECOND = 1000, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = 3506328 * MS_PER_HOUR;
    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
    }
    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) // preserve leap years using a full 400 year cycle, then reset
        return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        else return new Date(y, m, d).valueOf();
    }
    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) // preserve leap years using a full 400 year cycle, then reset
        return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        else return Date.UTC(y, m, d);
    }
    function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) return this;
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch(units){
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }
    function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) return this;
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch(units){
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }
    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }
    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }
    function toDate() {
        return new Date(this.valueOf());
    }
    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond(), 
        ];
    }
    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }
    function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }
    function isValid$2() {
        return isValid(this);
    }
    function parsingFlags() {
        return extend({
        }, getParsingFlags(this));
    }
    function invalidAt() {
        return getParsingFlags(this).overflow;
    }
    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }
    addFormatToken('N', 0, 0, 'eraAbbr');
    addFormatToken('NN', 0, 0, 'eraAbbr');
    addFormatToken('NNN', 0, 0, 'eraAbbr');
    addFormatToken('NNNN', 0, 0, 'eraName');
    addFormatToken('NNNNN', 0, 0, 'eraNarrow');
    addFormatToken('y', [
        'y',
        1
    ], 'yo', 'eraYear');
    addFormatToken('y', [
        'yy',
        2
    ], 0, 'eraYear');
    addFormatToken('y', [
        'yyy',
        3
    ], 0, 'eraYear');
    addFormatToken('y', [
        'yyyy',
        4
    ], 0, 'eraYear');
    addRegexToken('N', matchEraAbbr);
    addRegexToken('NN', matchEraAbbr);
    addRegexToken('NNN', matchEraAbbr);
    addRegexToken('NNNN', matchEraName);
    addRegexToken('NNNNN', matchEraNarrow);
    addParseToken([
        'N',
        'NN',
        'NNN',
        'NNNN',
        'NNNNN'
    ], function(input, array, config, token) {
        var era = config._locale.erasParse(input, token, config._strict);
        if (era) getParsingFlags(config).era = era;
        else getParsingFlags(config).invalidEra = input;
    });
    addRegexToken('y', matchUnsigned);
    addRegexToken('yy', matchUnsigned);
    addRegexToken('yyy', matchUnsigned);
    addRegexToken('yyyy', matchUnsigned);
    addRegexToken('yo', matchEraYearOrdinal);
    addParseToken([
        'y',
        'yy',
        'yyy',
        'yyyy'
    ], YEAR);
    addParseToken([
        'yo'
    ], function(input, array, config, token) {
        var match;
        if (config._locale._eraYearOrdinalRegex) match = input.match(config._locale._eraYearOrdinalRegex);
        if (config._locale.eraYearOrdinalParse) array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        else array[YEAR] = parseInt(input, 10);
    });
    function localeEras(m, format) {
        var i, l, date, eras = this._eras || getLocale('en')._eras;
        for(i = 0, l = eras.length; i < l; ++i){
            switch(typeof eras[i].since){
                case 'string':
                    // truncate time
                    date = hooks(eras[i].since).startOf('day');
                    eras[i].since = date.valueOf();
                    break;
            }
            switch(typeof eras[i].until){
                case 'undefined':
                    eras[i].until = Infinity;
                    break;
                case 'string':
                    // truncate time
                    date = hooks(eras[i].until).startOf('day').valueOf();
                    eras[i].until = date.valueOf();
                    break;
            }
        }
        return eras;
    }
    function localeErasParse(eraName, format, strict) {
        var i, l, eras = this.eras(), name, abbr, narrow;
        eraName = eraName.toUpperCase();
        for(i = 0, l = eras.length; i < l; ++i){
            name = eras[i].name.toUpperCase();
            abbr = eras[i].abbr.toUpperCase();
            narrow = eras[i].narrow.toUpperCase();
            if (strict) switch(format){
                case 'N':
                case 'NN':
                case 'NNN':
                    if (abbr === eraName) return eras[i];
                    break;
                case 'NNNN':
                    if (name === eraName) return eras[i];
                    break;
                case 'NNNNN':
                    if (narrow === eraName) return eras[i];
                    break;
            }
            else if ([
                name,
                abbr,
                narrow
            ].indexOf(eraName) >= 0) return eras[i];
        }
    }
    function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? 1 : -1;
        if (year === undefined) return hooks(era.since).year();
        else return hooks(era.since).year() + (year - era.offset) * dir;
    }
    function getEraName() {
        var i, l, val, eras = this.localeData().eras();
        for(i = 0, l = eras.length; i < l; ++i){
            // truncate time
            val = this.clone().startOf('day').valueOf();
            if (eras[i].since <= val && val <= eras[i].until) return eras[i].name;
            if (eras[i].until <= val && val <= eras[i].since) return eras[i].name;
        }
        return '';
    }
    function getEraNarrow() {
        var i, l, val, eras = this.localeData().eras();
        for(i = 0, l = eras.length; i < l; ++i){
            // truncate time
            val = this.clone().startOf('day').valueOf();
            if (eras[i].since <= val && val <= eras[i].until) return eras[i].narrow;
            if (eras[i].until <= val && val <= eras[i].since) return eras[i].narrow;
        }
        return '';
    }
    function getEraAbbr() {
        var i, l, val, eras = this.localeData().eras();
        for(i = 0, l = eras.length; i < l; ++i){
            // truncate time
            val = this.clone().startOf('day').valueOf();
            if (eras[i].since <= val && val <= eras[i].until) return eras[i].abbr;
            if (eras[i].until <= val && val <= eras[i].since) return eras[i].abbr;
        }
        return '';
    }
    function getEraYear() {
        var i, l, dir, val, eras = this.localeData().eras();
        for(i = 0, l = eras.length; i < l; ++i){
            dir = eras[i].since <= eras[i].until ? 1 : -1;
            // truncate time
            val = this.clone().startOf('day').valueOf();
            if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
        }
        return this.year();
    }
    function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNameRegex')) computeErasParse.call(this);
        return isStrict ? this._erasNameRegex : this._erasRegex;
    }
    function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, '_erasAbbrRegex')) computeErasParse.call(this);
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }
    function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNarrowRegex')) computeErasParse.call(this);
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }
    function matchEraAbbr(isStrict, locale) {
        return locale.erasAbbrRegex(isStrict);
    }
    function matchEraName(isStrict, locale) {
        return locale.erasNameRegex(isStrict);
    }
    function matchEraNarrow(isStrict, locale) {
        return locale.erasNarrowRegex(isStrict);
    }
    function matchEraYearOrdinal(isStrict, locale) {
        return locale._eraYearOrdinalRegex || matchUnsigned;
    }
    function computeErasParse() {
        var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, eras = this.eras();
        for(i = 0, l = eras.length; i < l; ++i){
            namePieces.push(regexEscape(eras[i].name));
            abbrPieces.push(regexEscape(eras[i].abbr));
            narrowPieces.push(regexEscape(eras[i].narrow));
            mixedPieces.push(regexEscape(eras[i].name));
            mixedPieces.push(regexEscape(eras[i].abbr));
            mixedPieces.push(regexEscape(eras[i].narrow));
        }
        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
        this._erasNarrowRegex = new RegExp('^(' + narrowPieces.join('|') + ')', 'i');
    }
    // FORMATTING
    addFormatToken(0, [
        'gg',
        2
    ], 0, function() {
        return this.weekYear() % 100;
    });
    addFormatToken(0, [
        'GG',
        2
    ], 0, function() {
        return this.isoWeekYear() % 100;
    });
    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [
            token,
            token.length
        ], 0, getter);
    }
    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');
    // ALIASES
    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');
    // PRIORITY
    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);
    // PARSING
    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);
    addWeekParseToken([
        'gggg',
        'ggggg',
        'GGGG',
        'GGGGG'
    ], function(input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });
    addWeekParseToken([
        'gg',
        'GG'
    ], function(input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });
    // MOMENTS
    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
    }
    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }
    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }
    function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
    }
    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }
    function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }
    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) return weekOfYear(this, dow, doy).year;
        else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) week = weeksTarget;
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }
    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }
    // FORMATTING
    addFormatToken('Q', 0, 'Qo', 'quarter');
    // ALIASES
    addUnitAlias('quarter', 'Q');
    // PRIORITY
    addUnitPriority('quarter', 7);
    // PARSING
    addRegexToken('Q', match1);
    addParseToken('Q', function(input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });
    // MOMENTS
    function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }
    // FORMATTING
    addFormatToken('D', [
        'DD',
        2
    ], 'Do', 'date');
    // ALIASES
    addUnitAlias('date', 'D');
    // PRIORITY
    addUnitPriority('date', 9);
    // PARSING
    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function(isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
    });
    addParseToken([
        'D',
        'DD'
    ], DATE);
    addParseToken('Do', function(input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });
    // MOMENTS
    var getSetDayOfMonth = makeGetSet('Date', true);
    // FORMATTING
    addFormatToken('DDD', [
        'DDDD',
        3
    ], 'DDDo', 'dayOfYear');
    // ALIASES
    addUnitAlias('dayOfYear', 'DDD');
    // PRIORITY
    addUnitPriority('dayOfYear', 4);
    // PARSING
    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken([
        'DDD',
        'DDDD'
    ], function(input, array, config) {
        config._dayOfYear = toInt(input);
    });
    // HELPERS
    // MOMENTS
    function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 86400000) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }
    // FORMATTING
    addFormatToken('m', [
        'mm',
        2
    ], 0, 'minute');
    // ALIASES
    addUnitAlias('minute', 'm');
    // PRIORITY
    addUnitPriority('minute', 14);
    // PARSING
    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken([
        'm',
        'mm'
    ], MINUTE);
    // MOMENTS
    var getSetMinute = makeGetSet('Minutes', false);
    // FORMATTING
    addFormatToken('s', [
        'ss',
        2
    ], 0, 'second');
    // ALIASES
    addUnitAlias('second', 's');
    // PRIORITY
    addUnitPriority('second', 15);
    // PARSING
    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken([
        's',
        'ss'
    ], SECOND);
    // MOMENTS
    var getSetSecond = makeGetSet('Seconds', false);
    // FORMATTING
    addFormatToken('S', 0, 0, function() {
        return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, [
        'SS',
        2
    ], 0, function() {
        return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, [
        'SSS',
        3
    ], 0, 'millisecond');
    addFormatToken(0, [
        'SSSS',
        4
    ], 0, function() {
        return this.millisecond() * 10;
    });
    addFormatToken(0, [
        'SSSSS',
        5
    ], 0, function() {
        return this.millisecond() * 100;
    });
    addFormatToken(0, [
        'SSSSSS',
        6
    ], 0, function() {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, [
        'SSSSSSS',
        7
    ], 0, function() {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, [
        'SSSSSSSS',
        8
    ], 0, function() {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, [
        'SSSSSSSSS',
        9
    ], 0, function() {
        return this.millisecond() * 1000000;
    });
    // ALIASES
    addUnitAlias('millisecond', 'ms');
    // PRIORITY
    addUnitPriority('millisecond', 16);
    // PARSING
    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);
    var token1, getSetMillisecond;
    for(token1 = 'SSSS'; token1.length <= 9; token1 += 'S')addRegexToken(token1, matchUnsigned);
    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }
    for(token1 = 'S'; token1.length <= 9; token1 += 'S')addParseToken(token1, parseMs);
    getSetMillisecond = makeGetSet('Milliseconds', false);
    // FORMATTING
    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');
    // MOMENTS
    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }
    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }
    var proto = Moment.prototype;
    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff1;
    proto.endOf = endOf;
    proto.format = format1;
    proto.from = from1;
    proto.fromNow = fromNow;
    proto.to = to1;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale1;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== 'undefined' && Symbol.for != null) proto[Symbol.for('nodejs.util.inspect.custom')] = function() {
        return 'Moment<' + this.format() + '>';
    };
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
    function createUnix(input) {
        return createLocal(input * 1000);
    }
    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }
    function preParsePostFormat(string) {
        return string;
    }
    var proto$1 = Locale.prototype;
    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal1;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;
    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;
    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;
    function get$1(format, index, field, setter) {
        var locale = getLocale(), utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }
    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }
        format = format || '';
        if (index != null) return get$1(format, index, field, 'month');
        var i, out = [];
        for(i = 0; i < 12; i++)out[i] = get$1(format, i, field, 'month');
        return out;
    }
    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }
            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }
            format = format || '';
        }
        var locale = getLocale(), shift = localeSorted ? locale._week.dow : 0, i, out = [];
        if (index != null) return get$1(format, (index + shift) % 7, field, 'day');
        for(i = 0; i < 7; i++)out[i] = get$1(format, (i + shift) % 7, field, 'day');
        return out;
    }
    function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
    }
    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }
    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }
    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }
    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }
    getSetGlobalLocale('en', {
        eras: [
            {
                since: '0001-01-01',
                until: Infinity,
                offset: 1,
                name: 'Anno Domini',
                narrow: 'AD',
                abbr: 'AD'
            },
            {
                since: '0000-12-31',
                until: -Infinity,
                offset: 1,
                name: 'Before Christ',
                narrow: 'BC',
                abbr: 'BC'
            }, 
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function(number) {
            var b = number % 10, output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        }
    });
    // Side effect imports
    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
    var mathAbs = Math.abs;
    function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
    }
    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
    }
    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }
    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }
    function absCeil(number) {
        if (number < 0) return Math.floor(number);
        else return Math.ceil(number);
    }
    function bubble() {
        var milliseconds = this._milliseconds, days = this._days, months = this._months, data = this._data, seconds, minutes, hours, years, monthsFromDays;
        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
            milliseconds += absCeil(monthsToDays(months) + days) * 86400000;
            days = 0;
            months = 0;
        }
        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;
        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;
        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;
        hours = absFloor(minutes / 60);
        data.hours = hours % 24;
        days += absFloor(hours / 24);
        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));
        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;
        data.days = days;
        data.months = months;
        data.years = years;
        return this;
    }
    function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }
    function monthsToDays(months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }
    function as(units) {
        if (!this.isValid()) return NaN;
        var days, months, milliseconds = this._milliseconds;
        units = normalizeUnits(units);
        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 86400000;
            months = this._months + daysToMonths(days);
            switch(units){
                case 'month':
                    return months;
                case 'quarter':
                    return months / 3;
                case 'year':
                    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch(units){
                case 'week':
                    return days / 7 + milliseconds / 604800000;
                case 'day':
                    return days + milliseconds / 86400000;
                case 'hour':
                    return days * 24 + milliseconds / 3600000;
                case 'minute':
                    return days * 1440 + milliseconds / 60000;
                case 'second':
                    return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond':
                    return Math.floor(days * 86400000) + milliseconds;
                default:
                    throw new Error('Unknown unit ' + units);
            }
        }
    }
    // TODO: Use this.as('ms')?
    function valueOf$1() {
        if (!this.isValid()) return NaN;
        return this._milliseconds + this._days * 86400000 + this._months % 12 * 2592000000 + toInt(this._months / 12) * 31536000000;
    }
    function makeAs(alias) {
        return function() {
            return this.as(alias);
        };
    }
    var asMilliseconds = makeAs('ms'), asSeconds = makeAs('s'), asMinutes = makeAs('m'), asHours = makeAs('h'), asDays = makeAs('d'), asWeeks = makeAs('w'), asMonths = makeAs('M'), asQuarters = makeAs('Q'), asYears = makeAs('y');
    function clone$1() {
        return createDuration(this);
    }
    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }
    function makeGetter(name) {
        return function() {
            return this.isValid() ? this._data[name] : NaN;
        };
    }
    var milliseconds1 = makeGetter('milliseconds'), seconds1 = makeGetter('seconds'), minutes1 = makeGetter('minutes'), hours1 = makeGetter('hours'), days1 = makeGetter('days'), months1 = makeGetter('months'), years1 = makeGetter('years');
    function weeks1() {
        return absFloor(this.days() / 7);
    }
    var round = Math.round, thresholds1 = {
        ss: 44,
        s: 45,
        m: 45,
        h: 22,
        d: 26,
        w: null,
        M: 11
    };
    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }
    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
        var duration = createDuration(posNegDuration).abs(), seconds = round(duration.as('s')), minutes = round(duration.as('m')), hours = round(duration.as('h')), days = round(duration.as('d')), months = round(duration.as('M')), weeks = round(duration.as('w')), years = round(duration.as('y')), a = seconds <= thresholds.ss && [
            's',
            seconds
        ] || seconds < thresholds.s && [
            'ss',
            seconds
        ] || minutes <= 1 && [
            'm'
        ] || minutes < thresholds.m && [
            'mm',
            minutes
        ] || hours <= 1 && [
            'h'
        ] || hours < thresholds.h && [
            'hh',
            hours
        ] || days <= 1 && [
            'd'
        ] || days < thresholds.d && [
            'dd',
            days
        ];
        if (thresholds.w != null) a = a || weeks <= 1 && [
            'w'
        ] || weeks < thresholds.w && [
            'ww',
            weeks
        ];
        a = a || months <= 1 && [
            'M'
        ] || months < thresholds.M && [
            'MM',
            months
        ] || years <= 1 && [
            'y'
        ] || [
            'yy',
            years
        ];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }
    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) return round;
        if (typeof roundingFunction === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }
    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds1[threshold] === undefined) return false;
        if (limit === undefined) return thresholds1[threshold];
        thresholds1[threshold] = limit;
        if (threshold === 's') thresholds1.ss = limit - 1;
        return true;
    }
    function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) return this.localeData().invalidDate();
        var withSuffix = false, th = thresholds1, locale, output;
        if (typeof argWithSuffix === 'object') {
            argThresholds = argWithSuffix;
            argWithSuffix = false;
        }
        if (typeof argWithSuffix === 'boolean') withSuffix = argWithSuffix;
        if (typeof argThresholds === 'object') {
            th = Object.assign({
            }, thresholds1, argThresholds);
            if (argThresholds.s != null && argThresholds.ss == null) th.ss = argThresholds.s - 1;
        }
        locale = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale);
        if (withSuffix) output = locale.pastFuture(+this, output);
        return locale.postformat(output);
    }
    var abs$1 = Math.abs;
    function sign1(x) {
        return (x > 0) - (x < 0) || +x;
    }
    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) return this.localeData().invalidDate();
        var seconds = abs$1(this._milliseconds) / 1000, days = abs$1(this._days), months = abs$1(this._months), minutes, hours, years, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
        if (!total) // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return 'P0D';
        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;
        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;
        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        totalSign = total < 0 ? '-' : '';
        ymSign = sign1(this._months) !== sign1(total) ? '-' : '';
        daysSign = sign1(this._days) !== sign1(total) ? '-' : '';
        hmsSign = sign1(this._milliseconds) !== sign1(total) ? '-' : '';
        return totalSign + 'P' + (years ? ymSign + years + 'Y' : '') + (months ? ymSign + months + 'M' : '') + (days ? daysSign + days + 'D' : '') + (hours || minutes || seconds ? 'T' : '') + (hours ? hmsSign + hours + 'H' : '') + (minutes ? hmsSign + minutes + 'M' : '') + (seconds ? hmsSign + s + 'S' : '');
    }
    var proto$2 = Duration.prototype;
    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds1;
    proto$2.seconds = seconds1;
    proto$2.minutes = minutes1;
    proto$2.hours = hours1;
    proto$2.days = days1;
    proto$2.weeks = weeks1;
    proto$2.months = months1;
    proto$2.years = years1;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale1;
    proto$2.localeData = localeData;
    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;
    // FORMATTING
    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');
    // PARSING
    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function(input, array, config) {
        config._d = new Date(parseFloat(input) * 1000);
    });
    addParseToken('x', function(input, array, config) {
        config._d = new Date(toInt(input));
    });
    //! moment.js
    hooks.version = '2.29.1';
    setHookCallback(createLocal);
    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now1;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;
    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
        DATE: 'YYYY-MM-DD',
        TIME: 'HH:mm',
        TIME_SECONDS: 'HH:mm:ss',
        TIME_MS: 'HH:mm:ss.SSS',
        WEEK: 'GGGG-[W]WW',
        MONTH: 'YYYY-MM'
    };
    return hooks;
});

},{}],"lIf9M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _ripple = require("@material/ripple");
class IconButton {
    constructor(){
        this.buttonClass = `material-icons mdc-icon-button`;
        this.optionDefaults = {
            class: null,
            icon: '',
            onclick: null,
            ripple: true,
            title: null,
            style: null
        };
        this.options = null;
        this.mdcRipple = null;
    }
    assignOptions(vnode) {
        this.options = Object.assign({
        }, this.optionDefaults, vnode.attrs);
    }
    setClass() {
        this.buttonClass = `material-icons mdc-icon-button`;
        if (this.options.class) this.buttonClass += ` ${this.options.class}`;
    }
    oninit(vnode1) {
        this.assignOptions(vnode1);
        this.setClass();
    }
    oncreate(vnode2) {
        if (this.options.ripple) try {
            this.mdcRipple = new _ripple.MDCRipple(vnode2.dom);
            this.mdcRipple.unbounded = true;
        } catch (e) {
        }
    }
    onbeforeupdate(vnode3) {
        this.assignOptions(vnode3);
        this.setClass();
    }
    view(vnode4) {
        return _mithrilDefault.default("button", {
            class: this.buttonClass,
            onclick: this.options.onclick,
            "aria-label": this.options.title,
            title: this.options.title,
            style: this.options.style
        }, _mithrilDefault.default("div", {
            class: "mdc-icon-button__ripple"
        }), this.options.icon);
    }
}
module.exports = IconButton;

},{"mithril":"1zcoP","@material/ripple":"jRAE3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2W8GI":[function() {},{}],"9YHt0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _moment = require("moment");
var _momentDefault = parcelHelpers.interopDefault(_moment);
var _datePickerJsx = require("../date-picker/date-picker.jsx");
var _datePickerJsxDefault = parcelHelpers.interopDefault(_datePickerJsx);
var _popoverJsx = require("../popover/popover.jsx");
var _popoverJsxDefault = parcelHelpers.interopDefault(_popoverJsx);
var _dateRangeScss = require("./date-range.scss");
class DateRange {
    constructor(){
        this.datePickerVisible = false;
        this.rangeDropdownVisible = false;
        this.ranges = [
            {
                id: 'today',
                label: 'Today'
            },
            {
                id: 'week',
                label: 'This Week'
            },
            {
                id: 'month',
                label: 'This Month'
            },
            {
                id: 'year',
                label: 'This Year'
            },
            {
                id: 'twoWeeks',
                label: 'Two Weeks'
            },
            {
                id: 'all',
                label: 'All'
            }
        ];
    }
    oninit() {
        this.setRange('today');
    }
    openDatePicker() {
        this.datePickerVisible = true;
    }
    selectedRange(vnode) {
        let diffDays = vnode.attrs.endDate.diff(vnode.attrs.startDate, 'days', true);
        let diffMonths = vnode.attrs.endDate.diff(vnode.attrs.startDate, 'months', true);
        let diffYears = vnode.attrs.endDate.diff(vnode.attrs.startDate, 'years', true);
        if (vnode.attrs.endDate.date() === _momentDefault.default().date()) {
            if (vnode.attrs.startDate.isBefore(_momentDefault.default('0001-01-02'))) return 'All';
            else if (diffYears >= 1 && diffYears <= 1.005) return 'This Year';
            else if (diffMonths >= 1 && diffMonths <= 1.035) return 'This Month';
            else if (diffDays >= 14 && diffDays <= 15) return 'Two Weeks';
            else if (diffDays >= 7 && diffDays <= 8) return 'This Week';
            else if (diffDays >= 0 && diffDays <= 1) return 'Today';
        }
        return 'Custom';
    }
    openRangeDropdown() {
        this.rangeDropdownVisible = true;
    }
    setRange(vnode1, range1) {
        switch(range1){
            case 'today':
                vnode1.attrs.startDateChange(_momentDefault.default().startOf('day'));
                vnode1.attrs.endDateChange(_momentDefault.default().endOf('day'));
                break;
            case 'week':
                vnode1.attrs.startDateChange(_momentDefault.default().subtract(1, 'weeks').startOf('day'));
                vnode1.attrs.endDateChange(_momentDefault.default().endOf('day'));
                break;
            case 'month':
                vnode1.attrs.startDateChange(_momentDefault.default().subtract(1, 'months').startOf('day'));
                vnode1.attrs.endDateChange(_momentDefault.default().endOf('day'));
                break;
            case 'year':
                vnode1.attrs.startDateChange(_momentDefault.default().subtract(1, 'years').startOf('day'));
                vnode1.attrs.endDateChange(_momentDefault.default().endOf('day'));
                break;
            case 'twoWeeks':
                vnode1.attrs.startDateChange(_momentDefault.default().subtract(2, 'weeks').startOf('day'));
                vnode1.attrs.endDateChange(_momentDefault.default().endOf('day'));
                break;
            case 'all':
                vnode1.attrs.startDateChange(_momentDefault.default('0001-01-01'));
                vnode1.attrs.endDateChange(_momentDefault.default().endOf('day'));
                break;
        }
        this.rangeDropdownVisible = false;
    }
    view(vnode2) {
        return _mithrilDefault.default("div", {
            class: "dateRange"
        }, _mithrilDefault.default("div", {
            class: "dateRange__flex"
        }, _mithrilDefault.default("div", {
            class: "dateRange__segment"
        }, _mithrilDefault.default("div", {
            class: "dateRange__segment__content",
            onclick: ()=>{
                this.openDatePicker();
            }
        }, _mithrilDefault.default("span", {
            class: "material-icons",
            style: {
                marginRight: '.25rem'
            }
        }, "calendar_today"), _mithrilDefault.default("span", null, vnode2.attrs.startDate.format('MMM D, y'), " - ", vnode2.attrs.endDate.format('MMM D, y'))), _mithrilDefault.default(_popoverJsxDefault.default, {
            style: {
                top: '48px',
                width: '640px'
            },
            onClose: ()=>{
                this.datePickerVisible = false;
            },
            visible: this.datePickerVisible
        }, _mithrilDefault.default("div", {
            class: "dateRange__popover__flex"
        }, _mithrilDefault.default(_datePickerJsxDefault.default, {
            initialDate: vnode2.attrs.startDate,
            selectedChange: (date)=>{
                vnode2.attrs.startDateChange(date);
            }
        }), _mithrilDefault.default(_datePickerJsxDefault.default, {
            initialDate: vnode2.attrs.endDate,
            selectedChange: (date)=>{
                vnode2.attrs.endDateChange(date);
            }
        })))), _mithrilDefault.default("div", {
            class: "dateRange__segment"
        }, _mithrilDefault.default("div", {
            class: "dateRange__segment__content",
            onclick: ()=>{
                this.openRangeDropdown();
            }
        }, _mithrilDefault.default("div", {
            class: "segment__selected"
        }, this.selectedRange(vnode2)), _mithrilDefault.default("span", {
            class: "material-icons"
        }, "arrow_drop_down")), _mithrilDefault.default(_popoverJsxDefault.default, {
            style: {
                top: '48px',
                width: '150px'
            },
            onClose: ()=>{
                this.rangeDropdownVisible = false;
            },
            visible: this.rangeDropdownVisible
        }, this.ranges.map((range)=>{
            return [
                _mithrilDefault.default("div", {
                    class: "dateRange__popover__item",
                    onclick: ()=>{
                        this.setRange(vnode2, range.id);
                    }
                }, range.label)
            ];
        })))));
    }
}
module.exports = DateRange;

},{"mithril":"1zcoP","moment":"jwcsj","../date-picker/date-picker.jsx":"gL37S","../popover/popover.jsx":"1gePv","./date-range.scss":"jWWWj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1gePv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _popoverScss = require("./popover.scss");
class Popover {
    close(vnode) {
        vnode.attrs.onClose();
    }
    view(vnode1) {
        return vnode1.attrs.visible && _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
            class: "popover",
            style: vnode1.attrs.style
        }, _mithrilDefault.default("div", {
            class: "popover__content",
            style: {
                padding: vnode1.attrs.padding
            }
        }, vnode1.children)), _mithrilDefault.default("div", {
            class: "popover__overlay",
            onclick: ()=>{
                this.close(vnode1);
            }
        }));
    }
}
module.exports = Popover;

},{"mithril":"1zcoP","./popover.scss":"3Y4oV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Y4oV":[function() {},{}],"jWWWj":[function() {},{}],"e4wIh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _iconButtonJsx = require("../icon-button/icon-button.jsx");
var _iconButtonJsxDefault = parcelHelpers.interopDefault(_iconButtonJsx);
var _modalScss = require("./modal.scss");
class Modal {
    close(vnode) {
        if (vnode.attrs.onClose) vnode.attrs.onClose();
    }
    view(vnode1) {
        return vnode1.attrs.isOpen && _mithrilDefault.default("div", {
            class: vnode1.attrs.backdropDisabled ? 'modal.modal--backdropDisabled' : 'modal',
            onclick: ()=>{
                this.close(vnode1);
            }
        }, _mithrilDefault.default("div", {
            class: "modal__content",
            style: vnode1.attrs.style,
            onclick: (e)=>{
                e.stopPropagation();
            }
        }, !vnode1.attrs.closeDisabled && _mithrilDefault.default("div", {
            class: "modal__close"
        }, _mithrilDefault.default(_iconButtonJsxDefault.default, {
            icon: "close",
            onclick: ()=>{
                this.close(vnode1);
            }
        })), vnode1.attrs.header && _mithrilDefault.default("div", null, vnode1.attrs.header), _mithrilDefault.default("div", null, vnode1.attrs.content), vnode1.attrs.footer && _mithrilDefault.default("div", null, vnode1.attrs.footer)));
    }
}
module.exports = Modal;

},{"mithril":"1zcoP","../icon-button/icon-button.jsx":"lIf9M","./modal.scss":"fCRN7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fCRN7":[function() {},{}],"fJxCj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _services = require("../../services");
var _containerJsx = require("../container/container.jsx");
var _containerJsxDefault = parcelHelpers.interopDefault(_containerJsx);
var _iconButtonJsx = require("../icon-button/icon-button.jsx");
var _iconButtonJsxDefault = parcelHelpers.interopDefault(_iconButtonJsx);
var _popoverJsx = require("../popover/popover.jsx");
var _popoverJsxDefault = parcelHelpers.interopDefault(_popoverJsx);
var _githubLogoPng = require("../../../assets/img/github-logo.png");
var _githubLogoPngDefault = parcelHelpers.interopDefault(_githubLogoPng);
var _keepPng = require("../../../assets/img/logo/keep.png");
var _keepPngDefault = parcelHelpers.interopDefault(_keepPng);
var _navScss = require("./nav.scss");
class Nav {
    constructor(){
        this.notificationsVisible = false;
        console.log(_services.Notify.notifications);
    }
    get navLabel() {
        let label = '';
        let aid = _services.Profile.getDefaultAID();
        if (aid !== undefined) label = '(' + aid.name + ') ';
        if (_services.Profile.isLead) label += 'Lead ';
        label += _services.Auth.title();
        return label;
    }
    challengeNotificationClick(notification3) {
        _mithrilDefault.default.route.set('/contacts');
    }
    multisigCompleteClick(notification1) {
        console.log('Multisig complete', notification1);
    }
    multisigInitClick(notification2) {
        // KERI.participateGroupInception("GLEIF External", {
        //   aids: notification.data.aids,
        //   isith: notification.data.ked.kt,
        //   nsith: notification.data.ked.nt,
        //   toad: Number(notification.data.ked.bt),
        //   wits: notification.data.ked.b,
        // }).then(() => {
        //   console.log('inception complete');
        //   this.currentState = 'event-complete';
        // });
        _services.Tasks.active = _services.Tasks.find('join-multisig');
    }
    view() {
        return _mithrilDefault.default("div", {
            class: "nav"
        }, _mithrilDefault.default(_containerJsxDefault.default, null, _mithrilDefault.default("div", {
            class: "nav__content"
        }, _mithrilDefault.default("h2", {
            class: "nav__title"
        }, _mithrilDefault.default(_mithrilDefault.default.route.Link, {
            class: "nav__link",
            href: "/"
        }, _mithrilDefault.default("img", {
            src: _keepPngDefault.default
        }))), _mithrilDefault.default("div", {
            class: "nav__spacer"
        }), _services.Auth.isLoggedIn && _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
            class: "relative"
        }, _mithrilDefault.default(_iconButtonJsxDefault.default, {
            icon: "notifications",
            style: {
                marginRight: '1rem'
            },
            onclick: (e)=>{
                this.notificationsVisible = !this.notificationsVisible;
            }
        }), _services.Notify.notifications.length > 0 ? _mithrilDefault.default("span", {
            class: "noti-badge"
        }, _mithrilDefault.default("p", null, _services.Notify.notifications.length)) : _mithrilDefault.default('[', null), _mithrilDefault.default(_popoverJsxDefault.default, {
            visible: this.notificationsVisible,
            onClose: ()=>{
                this.notificationsVisible = false;
            },
            style: {
                top: '88px',
                left: '-100px',
                width: '320px'
            },
            padding: '16px'
        }, _mithrilDefault.default("p", {
            class: "font-weight--bold font-color--blue"
        }, "Notifications"), _services.Notify.notifications.map((notification)=>{
            if (notification.type === 'challenge') return _mithrilDefault.default("div", {
                class: "pointer font-weight--bold font-color--battleship flex flex-align-center flex-justify-between",
                onclick: ()=>{
                    this.challengeNotificationClick(notification);
                }
            }, _mithrilDefault.default("p", null, "New Verified Contact"), _mithrilDefault.default("p", null, _mithrilDefault.default("u", null, "View")));
            if (notification.type === 'multisig') {
                let rType = notification.data.r;
                let meta = {
                    title: 'New Credential Registry',
                    clickHandler: null
                };
                if (rType.includes('/complete')) {
                    meta.title = 'New Credential Registry';
                    meta.clickHandler = this.multisigCompleteClick;
                } else if (rType.includes('/init')) {
                    meta.title = 'New Multi-Sig Verification';
                    meta.clickHandler = this.multisigInitClick;
                }
                return _mithrilDefault.default("div", {
                    class: "pointer font-weight--bold font-color--battleship flex flex-align-center flex-justify-between",
                    onclick: ()=>{
                        meta.clickHandler(notification);
                    }
                }, _mithrilDefault.default("p", null, meta.title), _mithrilDefault.default("p", null, _mithrilDefault.default("u", null, "View")));
            }
            return _mithrilDefault.default("p", null, "Unhandled notification type");
        }))), _mithrilDefault.default(_iconButtonJsxDefault.default, {
            icon: "settings",
            style: {
                marginRight: '1.25rem'
            },
            onclick: ()=>{
                _mithrilDefault.default.route.set('/settings');
            }
        }), _mithrilDefault.default("img", {
            src: _githubLogoPngDefault.default,
            style: {
                height: '40px',
                width: '40px',
                cursor: 'pointer',
                marginRight: '1rem'
            },
            onclick: ()=>{
                _mithrilDefault.default.route.set('/profile');
            }
        }), _mithrilDefault.default("div", {
            style: {
                color: '#0cbc8b',
                paddingLeft: '1rem',
                fontWeight: 'bold',
                fontSize: '100%'
            }
        }, this.navLabel)))));
    }
}
module.exports = Nav;

},{"mithril":"1zcoP","../../services":"i9qdV","../container/container.jsx":"b7kB2","../icon-button/icon-button.jsx":"lIf9M","../popover/popover.jsx":"1gePv","../../../assets/img/github-logo.png":"91eSZ","../../../assets/img/logo/keep.png":"d5naC","./nav.scss":"jXPvX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i9qdV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _auth = require("./auth");
var _authDefault = parcelHelpers.interopDefault(_auth);
var _contacts = require("./contacts");
var _contactsDefault = parcelHelpers.interopDefault(_contacts);
var _keri = require("./keri");
var _keriDefault = parcelHelpers.interopDefault(_keri);
var _mail = require("./mail");
var _mailDefault = parcelHelpers.interopDefault(_mail);
var _multisig = require("./multisig");
var _multisigDefault = parcelHelpers.interopDefault(_multisig);
var _notify = require("./notify");
var _notifyDefault = parcelHelpers.interopDefault(_notify);
var _profile = require("./profile");
var _profileDefault = parcelHelpers.interopDefault(_profile);
var _oobis = require("./oobis");
var _oobisDefault = parcelHelpers.interopDefault(_oobis);
var _tasks = require("./tasks");
var _tasksDefault = parcelHelpers.interopDefault(_tasks);
var _toaster = require("./toaster");
var _toasterDefault = parcelHelpers.interopDefault(_toaster);
var _witnesses = require("./witnesses");
var _witnessesDefault = parcelHelpers.interopDefault(_witnesses);
module.exports = {
    Auth: _authDefault.default,
    Contacts: _contactsDefault.default,
    KERI: _keriDefault.default,
    Mail: _mailDefault.default,
    MultiSig: _multisigDefault.default,
    Notify: _notifyDefault.default,
    Profile: _profileDefault.default,
    Participants: _oobisDefault.default,
    Tasks: _tasksDefault.default,
    Toaster: _toasterDefault.default,
    Witnesses: _witnessesDefault.default
};

},{"./auth":"bLFz8","./contacts":"crXP5","./keri":"gD6tR","./mail":"ksnb3","./multisig":"bqE4v","./notify":"HbVqB","./profile":"fiBnR","./oobis":"b7twU","./tasks":"lnD9i","./toaster":"f9IOZ","./witnesses":"4w3bz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bLFz8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _keri = require("./keri");
var _keriDefault = parcelHelpers.interopDefault(_keri);
var _mail = require("./mail");
var _mailDefault = parcelHelpers.interopDefault(_mail);
class Auth {
    static _isLoggedIn = false;
    constructor(){
    }
    static get isLoggedIn() {
        return this._isLoggedIn;
    }
    static set isLoggedIn(l) {
        this._isLoggedIn = l;
    }
    static setAgent(name) {
        sessionStorage.setItem('agent', name);
    }
    static removeAgent() {
        sessionStorage.removeItem('agent');
    }
    static title() {
        return 'External GAR';
    }
    static login(passcode) {
        let promise = new Promise((resolve, reject)=>{
            _keriDefault.default.unlockAgent(`keep${"5723"}`, passcode).then((response)=>{
                this.setAgent(response.name);
                this.isLoggedIn = true;
                setTimeout(()=>{
                    _mailDefault.default.initEventSource();
                }, 1000);
                resolve(response);
            }).catch((err)=>{
                console.log('unlockAgent', err);
                reject(err);
            });
        });
        return promise;
    }
    static logout() {
        this.removeAgent();
    }
}
module.exports = Auth;

},{"./keri":"gD6tR","./mail":"ksnb3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gD6tR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
class KERI {
    // CODES
    static generatePasscode() {
        return _mithrilDefault.default.request({
            method: 'GET',
            url: `${"http://localhost"}:${"5723"}/codes`
        });
    }
    static initializeAgent(name, passcode) {
        return _mithrilDefault.default.request({
            method: 'POST',
            url: `${"http://localhost"}:${"5723"}/boot`,
            body: {
                name,
                passcode
            }
        });
    }
    static unlockAgent(name1, passcode1) {
        return _mithrilDefault.default.request({
            method: 'PUT',
            url: `${"http://localhost"}:${"5723"}/boot`,
            body: {
                name: name1,
                passcode: passcode1
            }
        });
    }
    static createIdentifier(alias5, witnesses) {
        return _mithrilDefault.default.request({
            method: 'POST',
            url: `${"http://localhost"}:${"5723"}/ids/${alias5}`,
            body: {
                wits: witnesses
            }
        });
    }
    static updateIdentifier(alias1, body) {
        return _mithrilDefault.default.request({
            method: 'PUT',
            url: `${"http://localhost"}:${"5723"}/ids/${alias1}`,
            body: body
        });
    }
    static listIdentifiers() {
        return _mithrilDefault.default.request({
            method: 'GET',
            url: `${"http://localhost"}:${"5723"}/ids`
        });
    }
    static getOOBI(alias2, role) {
        return _mithrilDefault.default.request({
            method: 'GET',
            url: `${"http://localhost"}:${"5723"}/oobi/${alias2}`,
            params: {
                role
            }
        });
    }
    static resolveOOBI(alias3, oobialias, url) {
        return _mithrilDefault.default.request({
            method: 'POST',
            url: `${"http://localhost"}:${"5723"}/oobi/${alias3}`,
            body: {
                oobialias,
                url
            }
        });
    }
    static generateChallengeMessage() {
        return _mithrilDefault.default.request({
            method: 'GET',
            url: `${"http://localhost"}:${"5723"}/challenge`
        });
    }
    static signChallengeMessage(alias4, recipient, words) {
        return _mithrilDefault.default.request({
            method: 'POST',
            url: `${"http://localhost"}:${"5723"}/challenge/${alias4}`,
            body: {
                recipient,
                words
            }
        });
    }
    static getContacts() {
        return _mithrilDefault.default.request({
            method: 'GET',
            url: `${"http://localhost"}:${"5723"}/contacts`
        });
    }
    static getContactsByAliases(aliases) {
        let valueParams = aliases.map((alias)=>{
            return `&filter_value=${alias}`;
        }).join('');
        return _mithrilDefault.default.request({
            method: 'GET',
            url: `${"http://localhost"}:${"5723"}/contacts?filter_field=alias${valueParams}`
        });
    }
    static getContact(prefix) {
        return _mithrilDefault.default.request({
            method: 'GET',
            url: `${"http://localhost"}:${"5723"}/contacts/${prefix}`
        });
    }
    static getEscrowsForIdentifier(prefix1) {
        return _mithrilDefault.default.request({
            method: 'GET',
            url: `${"http://localhost"}:${"5723"}/escrows?pre=${prefix1}`
        });
    }
    static updateContact(alias, aid, body1) {
        return _mithrilDefault.default.request({
            method: 'PUT',
            url: `${"http://localhost"}:${"5723"}/contacts/${aid}/${alias}`,
            body: body1
        });
    }
    static initiateGroupInception(alias6, { aids , isith , nsith , toad , wits  }) {
        return _mithrilDefault.default.request({
            method: 'POST',
            url: `${"http://localhost"}:${"5723"}/groups/${alias6}/icp`,
            body: {
                aids,
                isith,
                nsith,
                toad,
                wits
            }
        });
    }
    static participateGroupInception(alias7, { aids: aids1 , isith: isith1 , nsith: nsith1 , toad: toad1 , wits: wits1  }) {
        return _mithrilDefault.default.request({
            method: 'PUT',
            url: `${"http://localhost"}:${"5723"}/groups/${alias7}/icp`,
            body: {
                aids: aids1,
                isith: isith1,
                nsith: nsith1,
                toad: toad1,
                wits: wits1
            }
        });
    }
}
module.exports = KERI;

},{"mithril":"1zcoP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ksnb3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _notify = require("./notify");
var _notifyDefault = parcelHelpers.interopDefault(_notify);
var _oobis = require("./oobis");
var _oobisDefault = parcelHelpers.interopDefault(_oobis);
var _toaster = require("./toaster");
var _toasterDefault = parcelHelpers.interopDefault(_toaster);
var _keri = require("./keri");
var _keriDefault = parcelHelpers.interopDefault(_keri);
var _profile = require("./profile");
var _profileDefault = parcelHelpers.interopDefault(_profile);
var Buffer = require("buffer").Buffer;
class Mail {
    static MINSNIFFSIZE = 30;
    static _port = "5723";
    static groupName = '';
    static messages = [];
    static presentations = [];
    static source = null;
    static sniff = (raw)=>{
        let size = '';
        if (raw.length < this.MINSNIFFSIZE) throw new Error('"Need more bytes."');
        const versionPattern = Buffer.from('KERI(?<major>[0-9a-f])(?<minor>[0-9a-f])(?<kind>[A-Z]{4})(?<size>[0-9a-f]{6})_', 'binary');
        const regex = RegExp(versionPattern);
        const response = regex.exec(raw);
        if (!response || response.kind > 12) throw new Error(`Invalid version string in raw = ${raw}`);
        size = response.groups.size;
        return parseInt(size, 16);
    };
    // static displayMultisig = (e) => {
    //   let data = JSON.parse(e.data);
    //   this.messages.unshift(data);
    //   m.redraw();
    // };
    // static displayDelegateNotices = (e) => {
    //   let size = this.sniff(e.data);
    //   let evt = e.data.slice(0, size);
    //   let ked = JSON.parse(evt);
    //   this.messages.unshift(ked);
    //   m.redraw();
    // };
    // static displayData = (e) => {
    //   let size = this.sniff(e.data);
    //   let evt = e.data.slice(0, size);
    //   let ked = JSON.parse(evt);
    //   this.messages.unshift(ked['d']);
    //   this.messages = this.messages.filter(
    //     (msg, index, self) => index === self.findIndex((m) => m.vc.i === msg.vc.i && m.status === msg.status)
    //   );
    //   m.redraw();
    // };
    // static displayPresentation = (e) => {
    //   let size = this.sniff(e.data);
    //   let evt = e.data.slice(0, size);
    //   let ked = JSON.parse(evt);
    //   this.presentations.unshift(ked['d']);
    //   m.redraw();
    // };
    static challengeHandler = (e)=>{
        let data = JSON.parse(e.data);
        const oobi1 = _oobisDefault.default.oobis.find((oobi)=>{
            return data.signer === oobi.id;
        });
        if (oobi1 !== undefined) {
            if (data.words.length === _oobisDefault.default.words.length && data.words.every((v, i)=>v === _oobisDefault.default.words[i]
            )) {
                oobi1.verified = true;
                _mithrilDefault.default.redraw();
                const aid = _profileDefault.default.getDefaultAID();
                _keriDefault.default.updateContact(aid.name, oobi1.id, {
                    verified: 'true'
                });
            }
        }
        _notifyDefault.default.push({
            type: 'challenge',
            data
        });
        _mithrilDefault.default.redraw();
    };
    static multisigHandler = (e)=>{
        let data = JSON.parse(e.data);
        console.log(data);
        _notifyDefault.default.push({
            type: 'multisig',
            data
        });
        _mithrilDefault.default.redraw();
    };
    static receiptHandler = (e)=>{
        console.log('receipt', e);
        _toasterDefault.default.success(`receipt: ${e}`);
        _mithrilDefault.default.redraw();
    };
    static replayHandler = (e)=>{
        console.log('replay', e);
        _toasterDefault.default.success(`replay: ${e}`);
        _mithrilDefault.default.redraw();
    };
    static replyHandler = (e)=>{
        console.log('reply', e);
        _toasterDefault.default.success(`reply: ${e}`);
        _mithrilDefault.default.redraw();
    };
    static initEventSource = ()=>{
        if (this.source || this.messages.length > 0) return;
        this.source = new EventSource(`${"http://localhost"}:${"5723"}/mbx?pre=E59KmDbpjK0tRf9Rmc7OlueZVz7LB94DdD3cjQVvPcng&topics=%2Fchallenge%3D0&topics=%2Fmultisig%3D0&topics=%2Freceipt%3D0&topics=%2Freplay%3D0&topics=%2Freply%3D0`);
        this.source.addEventListener('/challenge', this.challengeHandler, false);
        this.source.addEventListener('/multisig', this.multisigHandler, false);
        this.source.addEventListener('/receipt', this.receiptHandler, false);
        this.source.addEventListener('/replay', this.replayHandler, false);
        this.source.addEventListener('/reply', this.replyHandler, false);
    };
    static closeEventSource = ()=>{
        this.messages = [];
        this.source.removeEventListener('/challenge', this.challengeHandler, false);
        this.source.removeEventListener('/multisig', this.multisigHandler, false);
        this.source.removeEventListener('/receipt', this.receiptHandler, false);
        this.source.removeEventListener('/replay', this.replayHandler, false);
        this.source.removeEventListener('/reply', this.replyHandler, false);
        this.source.close();
        this.source = null;
    };
    // static joinGroup = (msg) => {
    //   xhring
    //     .multisigInceptPost({
    //       group: this.groupName,
    //       aids: msg.aids,
    //       witnesses: msg.witnesses,
    //       toad: msg.toad,
    //       isith: msg.isith,
    //       nsith: msg.nsith,
    //       notify: false,
    //     })
    //     .then((res) => {
    //       alert('Multisig Group Join Initiated');
    //     })
    //     .catch((err) => {
    //       console.log('caught', err);
    //     });
    // };
    // static joinIssue = (schema, data, typ, recipient, source) => {
    //   xhring
    //     .exnRequest({
    //       credentialData: data,
    //       schema: schema,
    //       type: typ,
    //       registry: UserTypes.getUserType(),
    //       recipient: recipient,
    //       source: source,
    //       notify: false,
    //     })
    //     .then((res) => {
    //       Toaster.success(typ + ' signed and submitted');
    //     })
    //     .catch((err) => {
    //       console.log('caught', err);
    //       Toaster.error('Failed to issue ' + typ);
    //     });
    // };
    // static rotateGroup = (group) => {
    //   xhring
    //     .multisigRotatePost({
    //       group: group,
    //     })
    //     .then((res) => {})
    //     .catch((err) => {
    //       console.log('caught', err);
    //     });
    // };
    static get port() {
        return this._port;
    }
    static set port(port) {
        this._port = port;
        if (this.source) {
            this.closeEventSource();
            this.initEventSource();
        }
    }
}
module.exports = Mail;

},{"mithril":"1zcoP","./notify":"HbVqB","./oobis":"b7twU","./toaster":"f9IOZ","./keri":"gD6tR","./profile":"fiBnR","buffer":"fCgem","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"HbVqB":[function(require,module,exports) {
class Notify {
    static notifications = [];
    static push(notification) {
        this.notifications.push(notification);
    }
    static findByType(type) {
        let idx = this.notifications.findIndex((element)=>element.type === type
        );
        if (idx === -1) return undefined;
        let notif = this.notifications.splice(idx, 1);
        return notif[0];
    }
}
module.exports = Notify;

},{}],"b7twU":[function(require,module,exports) {
class Participants {
    static oobis = [
        {
            alias: '',
            url: '',
            status: 'none',
            challengeMessage: '',
            verified: false,
            sent: false,
            confirmed: false
        }
    ];
    static words = [];
    static updateWords(words) {
        this.words.length = 0;
        this.words.push(...words);
    }
    static addOOBI(alias, url) {
        this.oobis.push({
            alias: alias,
            url: url,
            status: 'none',
            challengeMessage: '',
            signed: false,
            confirmed: false
        });
    }
    static oobisResolved() {
        return this.oobis.length > 0 && this.oobis.every((oobi)=>{
            return oobi.status === 'resolved';
        });
    }
    static oobisVerified() {
        return this.oobis.length > 0 && this.oobis.every((oobi)=>{
            return oobi.verified;
        });
    }
    static oobisConfirmed() {
        return this.oobis.length > 0 && this.oobis.every((oobi)=>{
            return oobi.confirmed;
        });
    }
}
module.exports = Participants;

},{}],"f9IOZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
class Toaster {
    static toasts = [];
    static uuidv4() {
        return "10000000-1000-4000-8000-100000000000".replace(/[018]/g, (c)=>(c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
        );
    }
    static toastDefault = ()=>{
        return {
            id: this.uuidv4(),
            text: '',
            type: 'info',
            timeout: 10000,
            closeButton: true
        };
    };
    static addToast(text, type, options = {
    }) {
        let toast = Object.assign(this.toastDefault(), {
            text,
            type,
            ...options
        });
        this.toasts.push(toast);
        if (toast.timeout > 0) setTimeout(()=>{
            this.remove(toast.id);
        }, toast.timeout);
    }
    static remove(id) {
        let spliceIndex = this.toasts.findIndex((t)=>t.id === id
        );
        this.toasts.splice(spliceIndex, 1);
        _mithrilDefault.default.redraw();
    }
    static success(text1, options1 = {
    }) {
        this.addToast(text1, 'success', options1);
    }
    static error(text2, options2 = {
    }) {
        this.addToast(text2, 'error', options2);
    }
    static warning(text3, options3 = {
    }) {
        this.addToast(text3, 'warning', options3);
    }
    static info(text4, options4 = {
    }) {
        this.addToast(text4, 'info', options4);
    }
}
module.exports = Toaster;

},{"mithril":"1zcoP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fiBnR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _keri = require("./keri");
var _keriDefault = parcelHelpers.interopDefault(_keri);
class Profile {
    static _isLead = false;
    static _default = undefined;
    static _identifiers = [];
    constructor(){
    }
    static get isLead() {
        return this._isLead;
    }
    static set isLead(lead) {
        this._isLead = lead;
    }
    static get identifiers() {
        return this._identifiers;
    }
    static filterIdentifiersById(id) {
        return this._identifiers.filter((identifier)=>{
            return identifier.id === id;
        });
    }
    static loadIdentifiers() {
        _keriDefault.default.listIdentifiers().then((identifiers)=>{
            this._identifiers = identifiers;
            this._default = this._identifiers.find((aid)=>{
                return "metadata" in aid && "default" in aid.metadata;
            });
            if (this._default === undefined && this._identifiers.length > 0) this._default = this._identifiers[0];
        }).catch((err)=>{
            this._identifiers = [];
            console.log('listIdentifiers', err);
        });
    }
    static clearDefaultAID() {
    }
    static setDefaultAID(aid) {
        _keriDefault.default.updateIdentifier(aid.name, {
            default: "true"
        });
    }
    static getDefaultAID() {
        return this._default;
    }
}
module.exports = Profile;

},{"./keri":"gD6tR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fCgem":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ 'use strict';
var base64 = require('base64-js');
var ieee754 = require('ieee754');
var customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
var K_MAX_LENGTH = 2147483647;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        var arr = new Uint8Array(1);
        var proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, 'parent', {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, 'offset', {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === 'string') return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type number');
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    var b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== 'number') throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8';
    if (!Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
    var length = byteLength1(string, encoding) | 0;
    var buf = createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    var buf = createBuffer(length);
    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    var buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + ' bytes');
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) Buffer.from(buf).copy(buffer, pos);
            else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength1(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== 'string') throw new TypeError("The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type " + typeof string);
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case 'ascii':
        case 'latin1':
        case 'binary':
            return len;
        case 'utf8':
        case 'utf-8':
            return utf8ToBytes(string).length;
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return len * 2;
        case 'hex':
            return len >>> 1;
        case 'base64':
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength1;
function slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return '';
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return '';
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return '';
    if (!encoding) encoding = 'utf8';
    while(true)switch(encoding){
        case 'hex':
            return hexSlice(this, start, end);
        case 'utf8':
        case 'utf-8':
            return utf8Slice(this, start, end);
        case 'ascii':
            return asciiSlice(this, start, end);
        case 'latin1':
        case 'binary':
            return latin1Slice(this, start, end);
        case 'base64':
            return base64Slice(this, start, end);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
    for(var i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
    for(var i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
    for(var i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    var str = '';
    var max = exports.INSPECT_MAX_BYTES;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError("The \"target\" argument must be one of type Buffer or Uint8Array. Received type " + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError('out of range index');
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 2147483647) byteOffset = 2147483647;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === 'string') val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
        val = val & 255 // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError('val must be string, number or Buffer');
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i1;
    if (dir) {
        var foundIndex = -1;
        for(i1 = byteOffset; i1 < arrLength; i1++)if (read(arr, i1) === read(val, foundIndex === -1 ? 0 : i1 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i1;
            if (i1 - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i1 -= i1 - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i1 = byteOffset; i1 >= 0; i1--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i1 + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i1;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    var strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = 'utf8';
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError('Attempt to write outside buffer bounds');
    if (!encoding) encoding = 'utf8';
    var loweredCase = false;
    for(;;)switch(encoding){
        case 'hex':
            return hexWrite(this, string, offset, length);
        case 'utf8':
        case 'utf-8':
            return utf8Write(this, string, offset, length);
        case 'ascii':
        case 'latin1':
        case 'binary':
            return asciiWrite(this, string, offset, length);
        case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 128) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 192) === 128) {
                        tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                        if (tempCodePoint > 127) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                        if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                        if (tempCodePoint > 65535 && tempCodePoint < 1114112) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 65533;
            bytesPerSequence = 1;
        } else if (codePoint > 65535) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 4096;
function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 127);
    return ret;
}
function latin1Slice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = '';
    for(var i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 256))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset + --byteLength];
    var mul = 1;
    while(byteLength > 0 && (mul *= 256))val += this[offset + --byteLength] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 256))val += this[offset + i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 256))val += this[offset + --i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 128)) return this[offset];
    return (255 - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 255;
    while(++i < byteLength && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 255;
    while(--i >= 0 && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
    this[offset] = value & 255;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 255;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 255;
    while(++i < byteLength && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 255;
    while(--i >= 0 && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
    if (value < 0) value = 255 + value + 1;
    this[offset] = value & 255;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
    if (value < 0) value = 4294967295 + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 340282346638528860000000000000000000000, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError('targetStart out of bounds');
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
        if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') throw new TypeError('encoding must be a string');
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === 'utf8' && code < 128 || encoding === 'latin1') // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === 'number') val = val & 255;
    else if (typeof val === 'boolean') val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError('Out of range index');
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === 'number') for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// HELPER FUNCTIONS
// ================
var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return '';
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + '=';
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 55295 && codePoint < 57344) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 56319) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 56320) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
        } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else if (codePoint < 1114112) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else throw new Error('Invalid code point');
    }
    return bytes;
}
function asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 255);
    return byteArray;
}
function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var hexSliceLookupTable = function() {
    var alphabet = '0123456789abcdef';
    var table = new Array(256);
    for(var i = 0; i < 16; ++i){
        var i16 = i * 16;
        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();

},{"base64-js":"eIiSV","ieee754":"cO95r"}],"eIiSV":[function(require,module,exports) {
'use strict';
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var i1 = 0, len1 = code.length; i1 < len1; ++i1){
    lookup[i1] = code[i1];
    revLookup[code.charCodeAt(i1)] = i1;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4');
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);
        output.push(tripletToBase64(tmp));
    }
    return output.join('');
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + '==');
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + '=');
    }
    return parts.join('');
}

},{}],"cO95r":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"crXP5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _keri = require("./keri");
var _keriDefault = parcelHelpers.interopDefault(_keri);
class Contacts {
    static list = [];
    static requestList() {
        _keriDefault.default.getContacts().then((contacts)=>{
            this.list = contacts;
        });
    }
    static filterById(id) {
        return this.list.filter((contact)=>{
            return contact.id === id;
        });
    }
    static filterByIds(ids) {
        return this.list.some((a)=>{
            return ids.indexOf(a) >= 0;
        });
    }
    static filterByAlias(alias) {
        return this.list.filter((contact)=>{
            return contact.alias === alias;
        });
    }
}
module.exports = Contacts;

},{"./keri":"gD6tR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bqE4v":[function(require,module,exports) {
class MultiSig {
    static currentEvent = {
    };
    static participants = [];
}
module.exports = MultiSig;

},{}],"lnD9i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
class Tasks {
    static _all = {
        'create-passcode': [],
        'create-identifier': [],
        'intro-to-role': [],
        'main': []
    };
    static _active = null;
    static get all() {
        return this._all;
    }
    static set all(_all) {
        this._all = _all;
    }
    static get active() {
        return this._active;
    }
    static set active(_active) {
        this._active = _active;
    }
    static find(name) {
        let tasks = this._all[name];
        if (tasks !== undefined) return tasks[0];
        else return undefined;
    }
}
module.exports = Tasks;

},{"mithril":"1zcoP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4w3bz":[function(require,module,exports) {
class Witnesses {
    static witnessPools = [
        {
            label: "Local Witness Pool",
            value: "local"
        },
        {
            label: "GLEIF vLEI Witness Pool",
            value: "gleif"
        }
    ];
    static witnesses = {
        "local": [
            'BGKVzj4ve0VSd8z_AmvhLg4lqcC_9WYX90k03q-R_Ydo',
            'BuyRFMideczFZoapylLIyCjSdhtqVb31wZkRKvPfNqkw',
            'Bgoq68HCmYNUDgOz4Skvlu306o_NY-NrYuKAVhk3Zh9c'
        ],
        "gleif": [
            'B4tbPLI_TEze0pzAA-X-gewpdg22yfzN8CdKKIF5wETM',
            'Boq71an-vhU6DtlZzzJF7yIqbQxb56rcxeB0LppxeDOA',
            'BHGK9Gem8PdiZ7PZ9WcIwxM7YnGaztYA65X3o5_RxFa8'
        ]
    };
}
module.exports = Witnesses;

},{}],"91eSZ":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "github-logo.fff9559d.png" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"lgJ39":[function(require,module,exports) {
"use strict";
var bundleURL = {
};
function getBundleURLCached(id) {
    var value = bundleURL[id];
    if (!value) {
        value = getBundleURL();
        bundleURL[id] = value;
    }
    return value;
}
function getBundleURL() {
    try {
        throw new Error();
    } catch (err) {
        var matches = ('' + err.stack).match(/(https?|file|ftp):\/\/[^)\n]+/g);
        if (matches) // The first two stack frames will be this function and getBundleURLCached.
        // Use the 3rd one, which will be a runtime in the original bundle.
        return getBaseURL(matches[2]);
    }
    return '/';
}
function getBaseURL(url) {
    return ('' + url).replace(/^((?:https?|file|ftp):\/\/.+)\/[^/]+$/, '$1') + '/';
} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.
function getOrigin(url) {
    var matches = ('' + url).match(/(https?|file|ftp):\/\/[^/]+/);
    if (!matches) throw new Error('Origin not found');
    return matches[0];
}
exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
exports.getOrigin = getOrigin;

},{}],"d5naC":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "keep.0f8a3352.png" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"jXPvX":[function() {},{}],"4j3WA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
class NavRail {
    view(vnode) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
            class: "nav-rail"
        }, _mithrilDefault.default("div", {
            class: `nav-rail-item ${vnode.attrs.selected === 'dashboard' ? 'nav-rail-item--selected' : ''}`,
            onclick: ()=>{
                _mithrilDefault.default.route.set('/');
            }
        }, _mithrilDefault.default("i", {
            class: "material-icons md-48"
        }, "dashboard"), _mithrilDefault.default("div", {
            class: "nav-rail-item-text"
        }, "Dashboard")), _mithrilDefault.default("div", {
            class: `nav-rail-item ${vnode.attrs.selected === 'tasks' ? 'nav-rail-item--selected' : ''}`,
            onclick: ()=>{
                _mithrilDefault.default.route.set('/tasks');
            }
        }, _mithrilDefault.default("i", {
            class: "material-icons md-48"
        }, "assignment"), _mithrilDefault.default("div", {
            class: "nav-rail-item-text"
        }, "My Tasks")), _mithrilDefault.default("div", {
            class: `nav-rail-item ${vnode.attrs.selected === 'contacts' ? 'nav-rail-item--selected' : ''}`,
            onclick: ()=>{
                _mithrilDefault.default.route.set('/contacts');
            }
        }, _mithrilDefault.default("span", {
            class: "material-icons md-48"
        }, "people"), _mithrilDefault.default("div", {
            class: "nav-rail-item-text"
        }, "My Contacts")), _mithrilDefault.default("div", {
            class: `nav-rail-item ${vnode.attrs.selected === 'credentials' ? 'nav-rail-item--selected' : ''}`,
            onclick: ()=>{
                _mithrilDefault.default.route.set('/credentials');
            }
        }, _mithrilDefault.default("i", {
            class: "material-icons md-48"
        }, "lock"), _mithrilDefault.default("div", {
            class: "nav-rail-item-text"
        }, "My Credentials"))));
    }
}
module.exports = NavRail;

},{"mithril":"1zcoP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8A58i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _radio = require("@material/radio");
class Radio {
    constructor(){
        this.radioClass = 'mdc-radio mdc-radio--touch';
        this.optionDefaults = {
            id: null,
            name: null,
            class: null,
            checked: false,
            onclick: null,
            disabled: false
        };
        this.options = null;
    }
    assignOptions(vnode) {
        this.options = Object.assign({
        }, this.optionDefaults, vnode.attrs);
    }
    setClass() {
        this.radioClass = 'mdc-radio mdc-radio--touch';
        if (this.options.class) this.radioClass += ` ${this.options.class}`;
    }
    oninit(vnode1) {
        this.assignOptions(vnode1);
        this.setClass();
    }
    oncreate(vnode2) {
        try {
            this.radio = new _radio.MDCRadio(vnode2.dom);
        } catch (e) {
            console.log(e);
        }
    }
    onbeforeupdate(vnode3) {
        this.assignOptions(vnode3);
        this.setClass();
    }
    view(vnode4) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
            class: "mdc-touch-target-wrapper"
        }, _mithrilDefault.default("div", {
            class: this.radioClass,
            onclick: this.options.onclick
        }, _mithrilDefault.default("input", {
            class: "mdc-radio__native-control",
            type: "radio",
            id: this.options.id,
            name: this.options.name,
            checked: this.options.checked,
            disabled: this.options.disabled
        }), _mithrilDefault.default("div", {
            class: "mdc-radio__background"
        }, _mithrilDefault.default("div", {
            class: "mdc-radio__outer-circle"
        }), _mithrilDefault.default("div", {
            class: "mdc-radio__inner-circle"
        })), _mithrilDefault.default("div", {
            class: "mdc-radio__ripple"
        }))));
    }
}
module.exports = Radio;

},{"mithril":"1zcoP","@material/radio":"2TPBo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2TPBo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _adapter = require("./adapter");
parcelHelpers.exportAll(_adapter, exports);
var _component = require("./component");
parcelHelpers.exportAll(_component, exports);
var _constants = require("./constants");
parcelHelpers.exportAll(_constants, exports);
var _foundation = require("./foundation");
parcelHelpers.exportAll(_foundation, exports);

},{"./adapter":"2R5TR","./component":"dpxH2","./constants":"kzNg0","./foundation":"PNMIb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2R5TR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dpxH2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCRadio", ()=>MDCRadio1
);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _component = require("@material/base/component");
var _events = require("@material/dom/events");
var _component1 = require("@material/ripple/component");
var _foundation = require("@material/ripple/foundation");
var _foundation1 = require("./foundation");
var MDCRadio1 = function(_super) {
    _tslib.__extends(MDCRadio, _super);
    function MDCRadio() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.rippleSurface = _this.createRipple();
        return _this;
    }
    MDCRadio.attachTo = function(root) {
        return new MDCRadio(root);
    };
    Object.defineProperty(MDCRadio.prototype, "checked", {
        get: function() {
            return this.nativeControl.checked;
        },
        set: function(checked) {
            this.nativeControl.checked = checked;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCRadio.prototype, "disabled", {
        get: function() {
            return this.nativeControl.disabled;
        },
        set: function(disabled) {
            this.foundation.setDisabled(disabled);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCRadio.prototype, "value", {
        get: function() {
            return this.nativeControl.value;
        },
        set: function(value) {
            this.nativeControl.value = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCRadio.prototype, "ripple", {
        get: function() {
            return this.rippleSurface;
        },
        enumerable: false,
        configurable: true
    });
    MDCRadio.prototype.destroy = function() {
        this.rippleSurface.destroy();
        _super.prototype.destroy.call(this);
    };
    MDCRadio.prototype.getDefaultFoundation = function() {
        var _this = this;
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        var adapter = {
            addClass: function(className) {
                return _this.root.classList.add(className);
            },
            removeClass: function(className) {
                return _this.root.classList.remove(className);
            },
            setNativeControlDisabled: function(disabled) {
                return _this.nativeControl.disabled = disabled;
            }
        };
        return new _foundation1.MDCRadioFoundation(adapter);
    };
    MDCRadio.prototype.createRipple = function() {
        var _this = this;
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        var adapter = _tslib.__assign(_tslib.__assign({
        }, _component1.MDCRipple.createAdapter(this)), {
            registerInteractionHandler: function(evtType, handler) {
                _this.nativeControl.addEventListener(evtType, handler, _events.applyPassive());
            },
            deregisterInteractionHandler: function(evtType, handler) {
                _this.nativeControl.removeEventListener(evtType, handler, _events.applyPassive());
            },
            // Radio buttons technically go "active" whenever there is *any* keyboard
            // interaction. This is not the UI we desire.
            isSurfaceActive: function() {
                return false;
            },
            isUnbounded: function() {
                return true;
            }
        });
        // tslint:enable:object-literal-sort-keys
        return new _component1.MDCRipple(this.root, new _foundation.MDCRippleFoundation(adapter));
    };
    Object.defineProperty(MDCRadio.prototype, "nativeControl", {
        get: function() {
            var NATIVE_CONTROL_SELECTOR = _foundation1.MDCRadioFoundation.strings.NATIVE_CONTROL_SELECTOR;
            var el = this.root.querySelector(NATIVE_CONTROL_SELECTOR);
            if (!el) throw new Error("Radio component requires a " + NATIVE_CONTROL_SELECTOR + " element");
            return el;
        },
        enumerable: false,
        configurable: true
    });
    return MDCRadio;
}(_component.MDCComponent);

},{"tslib":"lRdW5","@material/base/component":"jLptS","@material/dom/events":"87xmx","@material/ripple/component":"035sE","@material/ripple/foundation":"7frpT","./foundation":"PNMIb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"PNMIb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCRadioFoundation", ()=>MDCRadioFoundation1
);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _foundation = require("@material/base/foundation");
var _constants = require("./constants");
var MDCRadioFoundation1 = function(_super) {
    _tslib.__extends(MDCRadioFoundation, _super);
    function MDCRadioFoundation(adapter) {
        return _super.call(this, _tslib.__assign(_tslib.__assign({
        }, MDCRadioFoundation.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCRadioFoundation, "cssClasses", {
        get: function() {
            return _constants.cssClasses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCRadioFoundation, "strings", {
        get: function() {
            return _constants.strings;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCRadioFoundation, "defaultAdapter", {
        get: function() {
            return {
                addClass: function() {
                    return undefined;
                },
                removeClass: function() {
                    return undefined;
                },
                setNativeControlDisabled: function() {
                    return undefined;
                }
            };
        },
        enumerable: false,
        configurable: true
    });
    MDCRadioFoundation.prototype.setDisabled = function(disabled) {
        var DISABLED = MDCRadioFoundation.cssClasses.DISABLED;
        this.adapter.setNativeControlDisabled(disabled);
        if (disabled) this.adapter.addClass(DISABLED);
        else this.adapter.removeClass(DISABLED);
    };
    return MDCRadioFoundation;
}(_foundation.MDCFoundation);
exports.default = MDCRadioFoundation1;

},{"tslib":"lRdW5","@material/base/foundation":"kC5Yw","./constants":"kzNg0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kzNg0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "strings", ()=>strings
);
parcelHelpers.export(exports, "cssClasses", ()=>cssClasses
);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var strings = {
    NATIVE_CONTROL_SELECTOR: '.mdc-radio__native-control'
};
var cssClasses = {
    DISABLED: 'mdc-radio--disabled',
    ROOT: 'mdc-radio'
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lxUUx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _select = require("@material/select");
class Select {
    oncreate(vnode) {
        try {
            this.select = new _select.MDCSelect(vnode.dom); // Set initial value if passed in attrs
            if (vnode.attrs.initialSelection) this.select.value = vnode.attrs.initialSelection;
             // Set up value change listener
            this.select.listen('MDCSelect:change', ()=>{
                vnode.attrs.selectedChange(this.select.value);
                _mithrilDefault.default.redraw();
            });
        } catch (e) {
            console.log(e);
        }
    }
    view(vnode1) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
            class: "mdc-select mdc-select--filled",
            style: vnode1.attrs.style ? vnode1.attrs.style : {
            }
        }, _mithrilDefault.default("div", {
            class: "mdc-select__anchor",
            role: "button"
        }, _mithrilDefault.default("span", {
            class: "mdc-select__ripple"
        }), _mithrilDefault.default("span", {
            class: "mdc-floating-label"
        }, vnode1.attrs.label), _mithrilDefault.default("span", {
            class: "mdc-select__selected-text-container"
        }, _mithrilDefault.default("span", {
            class: "mdc-select__selected-text"
        })), _mithrilDefault.default("span", {
            class: "mdc-select__dropdown-icon"
        }, _mithrilDefault.default("svg", {
            class: "mdc-select__dropdown-icon-graphic",
            viewBox: "7 10 10 5",
            focusable: "false"
        }, _mithrilDefault.default("polygon", {
            class: "mdc-select__dropdown-icon-inactive",
            stroke: "none",
            "fill-rule": "evenodd",
            points: "7 10 12 15 17 10"
        }), _mithrilDefault.default("polygon", {
            class: "mdc-select__dropdown-icon-active",
            stroke: "none",
            "fill-rule": "evenodd",
            points: "7 15 12 10 17 15"
        }))), _mithrilDefault.default("span", {
            class: "mdc-line-ripple"
        })), _mithrilDefault.default("div", {
            class: "mdc-select__menu mdc-menu mdc-menu-surface mdc-menu-surface--fullwidth"
        }, _mithrilDefault.default("ul", {
            class: "mdc-deprecated-list",
            role: "listbox"
        }, vnode1.attrs.options && vnode1.attrs.options.map((option)=>{
            return _mithrilDefault.default('[', null, _mithrilDefault.default("li", {
                class: "mdc-deprecated-list-item",
                "data-value": option.value,
                role: "option"
            }, _mithrilDefault.default("span", {
                class: "mdc-deprecated-list-item__ripple"
            }), _mithrilDefault.default("span", {
                class: "mdc-deprecated-list-item__text"
            }, option.label)));
        })))));
    }
}
module.exports = Select;

},{"mithril":"1zcoP","@material/select":"1eoNc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1eoNc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _adapter = require("./adapter");
parcelHelpers.exportAll(_adapter, exports);
var _component = require("./component");
parcelHelpers.exportAll(_component, exports);
var _constants = require("./constants");
parcelHelpers.exportAll(_constants, exports);
var _foundation = require("./foundation");
parcelHelpers.exportAll(_foundation, exports);
var _types = require("./types");
parcelHelpers.exportAll(_types, exports);
var _index = require("./helper-text/index");
parcelHelpers.exportAll(_index, exports);
var _index1 = require("./icon/index");
parcelHelpers.exportAll(_index1, exports);

},{"./adapter":"cCQsU","./component":"9e8lj","./constants":"eCawT","./foundation":"bvltu","./types":"9fDBn","./helper-text/index":"jc1iu","./icon/index":"8GVWV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cCQsU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9e8lj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCSelect", ()=>MDCSelect1
);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _component = require("@material/base/component");
var _component1 = require("@material/floating-label/component");
var _component2 = require("@material/line-ripple/component");
var _constants = require("@material/menu-surface/constants");
var _component3 = require("@material/menu/component");
var _constants1 = require("@material/menu/constants");
var _component4 = require("@material/notched-outline/component");
var _component5 = require("@material/ripple/component");
var _foundation = require("@material/ripple/foundation");
var _constants2 = require("./constants");
var _foundation1 = require("./foundation");
var _component6 = require("./helper-text/component");
var _component7 = require("./icon/component");
var MDCSelect1 = function(_super) {
    _tslib.__extends(MDCSelect, _super);
    function MDCSelect() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCSelect.attachTo = function(root) {
        return new MDCSelect(root);
    };
    MDCSelect.prototype.initialize = function(labelFactory, lineRippleFactory, outlineFactory, menuFactory, iconFactory, helperTextFactory) {
        if (labelFactory === void 0) labelFactory = function(el) {
            return new _component1.MDCFloatingLabel(el);
        };
        if (lineRippleFactory === void 0) lineRippleFactory = function(el) {
            return new _component2.MDCLineRipple(el);
        };
        if (outlineFactory === void 0) outlineFactory = function(el) {
            return new _component4.MDCNotchedOutline(el);
        };
        if (menuFactory === void 0) menuFactory = function(el) {
            return new _component3.MDCMenu(el);
        };
        if (iconFactory === void 0) iconFactory = function(el) {
            return new _component7.MDCSelectIcon(el);
        };
        if (helperTextFactory === void 0) helperTextFactory = function(el) {
            return new _component6.MDCSelectHelperText(el);
        };
        this.selectAnchor = this.root.querySelector(_constants2.strings.SELECT_ANCHOR_SELECTOR);
        this.selectedText = this.root.querySelector(_constants2.strings.SELECTED_TEXT_SELECTOR);
        this.hiddenInput = this.root.querySelector(_constants2.strings.HIDDEN_INPUT_SELECTOR);
        if (!this.selectedText) throw new Error('MDCSelect: Missing required element: The following selector must be present: ' + ("'" + _constants2.strings.SELECTED_TEXT_SELECTOR + "'"));
        if (this.selectAnchor.hasAttribute(_constants2.strings.ARIA_CONTROLS)) {
            var helperTextElement = document.getElementById(this.selectAnchor.getAttribute(_constants2.strings.ARIA_CONTROLS));
            if (helperTextElement) this.helperText = helperTextFactory(helperTextElement);
        }
        this.menuSetup(menuFactory);
        var labelElement = this.root.querySelector(_constants2.strings.LABEL_SELECTOR);
        this.label = labelElement ? labelFactory(labelElement) : null;
        var lineRippleElement = this.root.querySelector(_constants2.strings.LINE_RIPPLE_SELECTOR);
        this.lineRipple = lineRippleElement ? lineRippleFactory(lineRippleElement) : null;
        var outlineElement = this.root.querySelector(_constants2.strings.OUTLINE_SELECTOR);
        this.outline = outlineElement ? outlineFactory(outlineElement) : null;
        var leadingIcon = this.root.querySelector(_constants2.strings.LEADING_ICON_SELECTOR);
        if (leadingIcon) this.leadingIcon = iconFactory(leadingIcon);
        if (!this.root.classList.contains(_constants2.cssClasses.OUTLINED)) this.ripple = this.createRipple();
    };
    /**
     * Initializes the select's event listeners and internal state based
     * on the environment's state.
     */ MDCSelect.prototype.initialSyncWithDOM = function() {
        var _this = this;
        this.handleFocus = function() {
            _this.foundation.handleFocus();
        };
        this.handleBlur = function() {
            _this.foundation.handleBlur();
        };
        this.handleClick = function(evt) {
            _this.selectAnchor.focus();
            _this.foundation.handleClick(_this.getNormalizedXCoordinate(evt));
        };
        this.handleKeydown = function(evt) {
            _this.foundation.handleKeydown(evt);
        };
        this.handleMenuItemAction = function(evt) {
            _this.foundation.handleMenuItemAction(evt.detail.index);
        };
        this.handleMenuOpened = function() {
            _this.foundation.handleMenuOpened();
        };
        this.handleMenuClosed = function() {
            _this.foundation.handleMenuClosed();
        };
        this.handleMenuClosing = function() {
            _this.foundation.handleMenuClosing();
        };
        this.selectAnchor.addEventListener('focus', this.handleFocus);
        this.selectAnchor.addEventListener('blur', this.handleBlur);
        this.selectAnchor.addEventListener('click', this.handleClick);
        this.selectAnchor.addEventListener('keydown', this.handleKeydown);
        this.menu.listen(_constants.strings.CLOSED_EVENT, this.handleMenuClosed);
        this.menu.listen(_constants.strings.CLOSING_EVENT, this.handleMenuClosing);
        this.menu.listen(_constants.strings.OPENED_EVENT, this.handleMenuOpened);
        this.menu.listen(_constants1.strings.SELECTED_EVENT, this.handleMenuItemAction);
        if (this.hiddenInput) {
            if (this.hiddenInput.value) {
                // If the hidden input already has a value, use it to restore the
                // select's value. This can happen e.g. if the user goes back or (in
                // some browsers) refreshes the page.
                this.foundation.setValue(this.hiddenInput.value, /** skipNotify */ true);
                this.foundation.layout();
                return;
            }
            this.hiddenInput.value = this.value;
        }
    };
    MDCSelect.prototype.destroy = function() {
        this.selectAnchor.removeEventListener('focus', this.handleFocus);
        this.selectAnchor.removeEventListener('blur', this.handleBlur);
        this.selectAnchor.removeEventListener('keydown', this.handleKeydown);
        this.selectAnchor.removeEventListener('click', this.handleClick);
        this.menu.unlisten(_constants.strings.CLOSED_EVENT, this.handleMenuClosed);
        this.menu.unlisten(_constants.strings.OPENED_EVENT, this.handleMenuOpened);
        this.menu.unlisten(_constants1.strings.SELECTED_EVENT, this.handleMenuItemAction);
        this.menu.destroy();
        if (this.ripple) this.ripple.destroy();
        if (this.outline) this.outline.destroy();
        if (this.leadingIcon) this.leadingIcon.destroy();
        if (this.helperText) this.helperText.destroy();
        _super.prototype.destroy.call(this);
    };
    Object.defineProperty(MDCSelect.prototype, "value", {
        get: function() {
            return this.foundation.getValue();
        },
        set: function(value) {
            this.foundation.setValue(value);
        },
        enumerable: false,
        configurable: true
    });
    MDCSelect.prototype.setValue = function(value, skipNotify) {
        if (skipNotify === void 0) skipNotify = false;
        this.foundation.setValue(value, skipNotify);
    };
    Object.defineProperty(MDCSelect.prototype, "selectedIndex", {
        get: function() {
            return this.foundation.getSelectedIndex();
        },
        set: function(selectedIndex) {
            this.foundation.setSelectedIndex(selectedIndex, /* closeMenu */ true);
        },
        enumerable: false,
        configurable: true
    });
    MDCSelect.prototype.setSelectedIndex = function(selectedIndex, skipNotify) {
        if (skipNotify === void 0) skipNotify = false;
        this.foundation.setSelectedIndex(selectedIndex, /* closeMenu */ true, skipNotify);
    };
    Object.defineProperty(MDCSelect.prototype, "disabled", {
        get: function() {
            return this.foundation.getDisabled();
        },
        set: function(disabled) {
            this.foundation.setDisabled(disabled);
            if (this.hiddenInput) this.hiddenInput.disabled = disabled;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCSelect.prototype, "leadingIconAriaLabel", {
        set: function(label) {
            this.foundation.setLeadingIconAriaLabel(label);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCSelect.prototype, "leadingIconContent", {
        /**
         * Sets the text content of the leading icon.
         */ set: function(content) {
            this.foundation.setLeadingIconContent(content);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCSelect.prototype, "helperTextContent", {
        /**
         * Sets the text content of the helper text.
         */ set: function(content) {
            this.foundation.setHelperTextContent(content);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCSelect.prototype, "useDefaultValidation", {
        /**
         * Enables or disables the default validation scheme where a required select
         * must be non-empty. Set to false for custom validation.
         * @param useDefaultValidation Set this to false to ignore default
         *     validation scheme.
         */ set: function(useDefaultValidation) {
            this.foundation.setUseDefaultValidation(useDefaultValidation);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCSelect.prototype, "valid", {
        /**
         * Checks if the select is in a valid state.
         */ get: function() {
            return this.foundation.isValid();
        },
        /**
         * Sets the current invalid state of the select.
         */ set: function(isValid) {
            this.foundation.setValid(isValid);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCSelect.prototype, "required", {
        /**
         * Returns whether the select is required.
         */ get: function() {
            return this.foundation.getRequired();
        },
        /**
         * Sets the control to the required state.
         */ set: function(isRequired) {
            this.foundation.setRequired(isRequired);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Re-calculates if the notched outline should be notched and if the label
     * should float.
     */ MDCSelect.prototype.layout = function() {
        this.foundation.layout();
    };
    /**
     * Synchronizes the list of options with the state of the foundation. Call
     * this whenever menu options are dynamically updated.
     */ MDCSelect.prototype.layoutOptions = function() {
        this.foundation.layoutOptions();
        this.menu.layout();
        // Update cached menuItemValues for adapter.
        this.menuItemValues = this.menu.items.map(function(el) {
            return el.getAttribute(_constants2.strings.VALUE_ATTR) || '';
        });
        if (this.hiddenInput) this.hiddenInput.value = this.value;
    };
    MDCSelect.prototype.getDefaultFoundation = function() {
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        var adapter = _tslib.__assign(_tslib.__assign(_tslib.__assign(_tslib.__assign({
        }, this.getSelectAdapterMethods()), this.getCommonAdapterMethods()), this.getOutlineAdapterMethods()), this.getLabelAdapterMethods());
        return new _foundation1.MDCSelectFoundation(adapter, this.getFoundationMap());
    };
    /**
     * Handles setup for the menu.
     */ MDCSelect.prototype.menuSetup = function(menuFactory) {
        this.menuElement = this.root.querySelector(_constants2.strings.MENU_SELECTOR);
        this.menu = menuFactory(this.menuElement);
        this.menu.hasTypeahead = true;
        this.menu.singleSelection = true;
        this.menuItemValues = this.menu.items.map(function(el) {
            return el.getAttribute(_constants2.strings.VALUE_ATTR) || '';
        });
    };
    MDCSelect.prototype.createRipple = function() {
        var _this = this;
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        var adapter = _tslib.__assign(_tslib.__assign({
        }, _component5.MDCRipple.createAdapter({
            root: this.selectAnchor
        })), {
            registerInteractionHandler: function(evtType, handler) {
                _this.selectAnchor.addEventListener(evtType, handler);
            },
            deregisterInteractionHandler: function(evtType, handler) {
                _this.selectAnchor.removeEventListener(evtType, handler);
            }
        });
        // tslint:enable:object-literal-sort-keys
        return new _component5.MDCRipple(this.selectAnchor, new _foundation.MDCRippleFoundation(adapter));
    };
    MDCSelect.prototype.getSelectAdapterMethods = function() {
        var _this = this;
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
            getMenuItemAttr: function(menuItem, attr) {
                return menuItem.getAttribute(attr);
            },
            setSelectedText: function(text) {
                _this.selectedText.textContent = text;
            },
            isSelectAnchorFocused: function() {
                return document.activeElement === _this.selectAnchor;
            },
            getSelectAnchorAttr: function(attr) {
                return _this.selectAnchor.getAttribute(attr);
            },
            setSelectAnchorAttr: function(attr, value) {
                _this.selectAnchor.setAttribute(attr, value);
            },
            removeSelectAnchorAttr: function(attr) {
                _this.selectAnchor.removeAttribute(attr);
            },
            addMenuClass: function(className) {
                _this.menuElement.classList.add(className);
            },
            removeMenuClass: function(className) {
                _this.menuElement.classList.remove(className);
            },
            openMenu: function() {
                _this.menu.open = true;
            },
            closeMenu: function() {
                _this.menu.open = false;
            },
            getAnchorElement: function() {
                return _this.root.querySelector(_constants2.strings.SELECT_ANCHOR_SELECTOR);
            },
            setMenuAnchorElement: function(anchorEl) {
                _this.menu.setAnchorElement(anchorEl);
            },
            setMenuAnchorCorner: function(anchorCorner) {
                _this.menu.setAnchorCorner(anchorCorner);
            },
            setMenuWrapFocus: function(wrapFocus) {
                _this.menu.wrapFocus = wrapFocus;
            },
            getSelectedIndex: function() {
                var index = _this.menu.selectedIndex;
                return index instanceof Array ? index[0] : index;
            },
            setSelectedIndex: function(index) {
                _this.menu.selectedIndex = index;
            },
            focusMenuItemAtIndex: function(index) {
                _this.menu.items[index].focus();
            },
            getMenuItemCount: function() {
                return _this.menu.items.length;
            },
            // Cache menu item values. layoutOptions() updates this cache.
            getMenuItemValues: function() {
                return _this.menuItemValues;
            },
            getMenuItemTextAtIndex: function(index) {
                return _this.menu.getPrimaryTextAtIndex(index);
            },
            isTypeaheadInProgress: function() {
                return _this.menu.typeaheadInProgress;
            },
            typeaheadMatchItem: function(nextChar, startingIndex) {
                return _this.menu.typeaheadMatchItem(nextChar, startingIndex);
            }
        };
    // tslint:enable:object-literal-sort-keys
    };
    MDCSelect.prototype.getCommonAdapterMethods = function() {
        var _this = this;
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
            addClass: function(className) {
                _this.root.classList.add(className);
            },
            removeClass: function(className) {
                _this.root.classList.remove(className);
            },
            hasClass: function(className) {
                return _this.root.classList.contains(className);
            },
            setRippleCenter: function(normalizedX) {
                _this.lineRipple && _this.lineRipple.setRippleCenter(normalizedX);
            },
            activateBottomLine: function() {
                _this.lineRipple && _this.lineRipple.activate();
            },
            deactivateBottomLine: function() {
                _this.lineRipple && _this.lineRipple.deactivate();
            },
            notifyChange: function(value) {
                if (_this.hiddenInput) _this.hiddenInput.value = value;
                var index = _this.selectedIndex;
                _this.emit(_constants2.strings.CHANGE_EVENT, {
                    value: value,
                    index: index
                }, true);
            }
        };
    // tslint:enable:object-literal-sort-keys
    };
    MDCSelect.prototype.getOutlineAdapterMethods = function() {
        var _this = this;
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
            hasOutline: function() {
                return Boolean(_this.outline);
            },
            notchOutline: function(labelWidth) {
                _this.outline && _this.outline.notch(labelWidth);
            },
            closeOutline: function() {
                _this.outline && _this.outline.closeNotch();
            }
        };
    // tslint:enable:object-literal-sort-keys
    };
    MDCSelect.prototype.getLabelAdapterMethods = function() {
        var _this = this;
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
            hasLabel: function() {
                return !!_this.label;
            },
            floatLabel: function(shouldFloat) {
                _this.label && _this.label.float(shouldFloat);
            },
            getLabelWidth: function() {
                return _this.label ? _this.label.getWidth() : 0;
            },
            setLabelRequired: function(isRequired) {
                _this.label && _this.label.setRequired(isRequired);
            }
        };
    // tslint:enable:object-literal-sort-keys
    };
    /**
     * Calculates where the line ripple should start based on the x coordinate within the component.
     */ MDCSelect.prototype.getNormalizedXCoordinate = function(evt) {
        var targetClientRect = evt.target.getBoundingClientRect();
        var xCoordinate = this.isTouchEvent(evt) ? evt.touches[0].clientX : evt.clientX;
        return xCoordinate - targetClientRect.left;
    };
    MDCSelect.prototype.isTouchEvent = function(evt) {
        return Boolean(evt.touches);
    };
    /**
     * Returns a map of all subcomponents to subfoundations.
     */ MDCSelect.prototype.getFoundationMap = function() {
        return {
            helperText: this.helperText ? this.helperText.foundationForSelect : undefined,
            leadingIcon: this.leadingIcon ? this.leadingIcon.foundationForSelect : undefined
        };
    };
    return MDCSelect;
}(_component.MDCComponent);

},{"tslib":"lRdW5","@material/base/component":"jLptS","@material/floating-label/component":"larjq","@material/line-ripple/component":"4xpf3","@material/menu-surface/constants":"3BYDk","@material/menu/component":"CoJI7","@material/menu/constants":"j2pZI","@material/notched-outline/component":"ibiBS","@material/ripple/component":"035sE","@material/ripple/foundation":"7frpT","./constants":"eCawT","./foundation":"bvltu","./helper-text/component":"eZnQy","./icon/component":"kACFb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"larjq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCFloatingLabel", ()=>MDCFloatingLabel1
);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _component = require("@material/base/component");
var _ponyfill = require("@material/dom/ponyfill");
var _foundation = require("./foundation");
var MDCFloatingLabel1 = function(_super) {
    _tslib.__extends(MDCFloatingLabel, _super);
    function MDCFloatingLabel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCFloatingLabel.attachTo = function(root) {
        return new MDCFloatingLabel(root);
    };
    /**
     * Styles the label to produce the label shake for errors.
     * @param shouldShake If true, shakes the label by adding a CSS class; otherwise, stops shaking by removing the class.
     */ MDCFloatingLabel.prototype.shake = function(shouldShake) {
        this.foundation.shake(shouldShake);
    };
    /**
     * Styles the label to float/dock.
     * @param shouldFloat If true, floats the label by adding a CSS class; otherwise, docks it by removing the class.
     */ MDCFloatingLabel.prototype.float = function(shouldFloat) {
        this.foundation.float(shouldFloat);
    };
    /**
     * Styles the label as required.
     * @param isRequired If true, adds an asterisk to the label, indicating that it is required.
     */ MDCFloatingLabel.prototype.setRequired = function(isRequired) {
        this.foundation.setRequired(isRequired);
    };
    MDCFloatingLabel.prototype.getWidth = function() {
        return this.foundation.getWidth();
    };
    MDCFloatingLabel.prototype.getDefaultFoundation = function() {
        var _this = this;
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        var adapter = {
            addClass: function(className) {
                return _this.root.classList.add(className);
            },
            removeClass: function(className) {
                return _this.root.classList.remove(className);
            },
            getWidth: function() {
                return _ponyfill.estimateScrollWidth(_this.root);
            },
            registerInteractionHandler: function(evtType, handler) {
                return _this.listen(evtType, handler);
            },
            deregisterInteractionHandler: function(evtType, handler) {
                return _this.unlisten(evtType, handler);
            }
        };
        // tslint:enable:object-literal-sort-keys
        return new _foundation.MDCFloatingLabelFoundation(adapter);
    };
    return MDCFloatingLabel;
}(_component.MDCComponent);

},{"tslib":"lRdW5","@material/base/component":"jLptS","@material/dom/ponyfill":"8pLcv","./foundation":"824lp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"824lp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCFloatingLabelFoundation", ()=>MDCFloatingLabelFoundation1
);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _foundation = require("@material/base/foundation");
var _constants = require("./constants");
var MDCFloatingLabelFoundation1 = function(_super) {
    _tslib.__extends(MDCFloatingLabelFoundation, _super);
    function MDCFloatingLabelFoundation(adapter) {
        var _this = _super.call(this, _tslib.__assign(_tslib.__assign({
        }, MDCFloatingLabelFoundation.defaultAdapter), adapter)) || this;
        _this.shakeAnimationEndHandler = function() {
            _this.handleShakeAnimationEnd();
        };
        return _this;
    }
    Object.defineProperty(MDCFloatingLabelFoundation, "cssClasses", {
        get: function() {
            return _constants.cssClasses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCFloatingLabelFoundation, "defaultAdapter", {
        /**
         * See {@link MDCFloatingLabelAdapter} for typing information on parameters and return types.
         */ get: function() {
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            return {
                addClass: function() {
                    return undefined;
                },
                removeClass: function() {
                    return undefined;
                },
                getWidth: function() {
                    return 0;
                },
                registerInteractionHandler: function() {
                    return undefined;
                },
                deregisterInteractionHandler: function() {
                    return undefined;
                }
            };
        // tslint:enable:object-literal-sort-keys
        },
        enumerable: false,
        configurable: true
    });
    MDCFloatingLabelFoundation.prototype.init = function() {
        this.adapter.registerInteractionHandler('animationend', this.shakeAnimationEndHandler);
    };
    MDCFloatingLabelFoundation.prototype.destroy = function() {
        this.adapter.deregisterInteractionHandler('animationend', this.shakeAnimationEndHandler);
    };
    /**
     * Returns the width of the label element.
     */ MDCFloatingLabelFoundation.prototype.getWidth = function() {
        return this.adapter.getWidth();
    };
    /**
     * Styles the label to produce a shake animation to indicate an error.
     * @param shouldShake If true, adds the shake CSS class; otherwise, removes shake class.
     */ MDCFloatingLabelFoundation.prototype.shake = function(shouldShake) {
        var LABEL_SHAKE = MDCFloatingLabelFoundation.cssClasses.LABEL_SHAKE;
        if (shouldShake) this.adapter.addClass(LABEL_SHAKE);
        else this.adapter.removeClass(LABEL_SHAKE);
    };
    /**
     * Styles the label to float or dock.
     * @param shouldFloat If true, adds the float CSS class; otherwise, removes float and shake classes to dock the label.
     */ MDCFloatingLabelFoundation.prototype.float = function(shouldFloat) {
        var _a = MDCFloatingLabelFoundation.cssClasses, LABEL_FLOAT_ABOVE = _a.LABEL_FLOAT_ABOVE, LABEL_SHAKE = _a.LABEL_SHAKE;
        if (shouldFloat) this.adapter.addClass(LABEL_FLOAT_ABOVE);
        else {
            this.adapter.removeClass(LABEL_FLOAT_ABOVE);
            this.adapter.removeClass(LABEL_SHAKE);
        }
    };
    /**
     * Styles the label as required.
     * @param isRequired If true, adds an asterisk to the label, indicating that it is required.
     */ MDCFloatingLabelFoundation.prototype.setRequired = function(isRequired) {
        var LABEL_REQUIRED = MDCFloatingLabelFoundation.cssClasses.LABEL_REQUIRED;
        if (isRequired) this.adapter.addClass(LABEL_REQUIRED);
        else this.adapter.removeClass(LABEL_REQUIRED);
    };
    MDCFloatingLabelFoundation.prototype.handleShakeAnimationEnd = function() {
        var LABEL_SHAKE = MDCFloatingLabelFoundation.cssClasses.LABEL_SHAKE;
        this.adapter.removeClass(LABEL_SHAKE);
    };
    return MDCFloatingLabelFoundation;
}(_foundation.MDCFoundation);
exports.default = MDCFloatingLabelFoundation1;

},{"tslib":"lRdW5","@material/base/foundation":"kC5Yw","./constants":"agpve","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"agpve":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cssClasses", ()=>cssClasses
);
var cssClasses = {
    LABEL_FLOAT_ABOVE: 'mdc-floating-label--float-above',
    LABEL_REQUIRED: 'mdc-floating-label--required',
    LABEL_SHAKE: 'mdc-floating-label--shake',
    ROOT: 'mdc-floating-label'
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4xpf3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCLineRipple", ()=>MDCLineRipple1
);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _component = require("@material/base/component");
var _foundation = require("./foundation");
var MDCLineRipple1 = function(_super) {
    _tslib.__extends(MDCLineRipple, _super);
    function MDCLineRipple() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCLineRipple.attachTo = function(root) {
        return new MDCLineRipple(root);
    };
    /**
     * Activates the line ripple
     */ MDCLineRipple.prototype.activate = function() {
        this.foundation.activate();
    };
    /**
     * Deactivates the line ripple
     */ MDCLineRipple.prototype.deactivate = function() {
        this.foundation.deactivate();
    };
    /**
     * Sets the transform origin given a user's click location.
     * The `rippleCenter` is the x-coordinate of the middle of the ripple.
     */ MDCLineRipple.prototype.setRippleCenter = function(xCoordinate) {
        this.foundation.setRippleCenter(xCoordinate);
    };
    MDCLineRipple.prototype.getDefaultFoundation = function() {
        var _this = this;
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        var adapter = {
            addClass: function(className) {
                return _this.root.classList.add(className);
            },
            removeClass: function(className) {
                return _this.root.classList.remove(className);
            },
            hasClass: function(className) {
                return _this.root.classList.contains(className);
            },
            setStyle: function(propertyName, value) {
                return _this.root.style.setProperty(propertyName, value);
            },
            registerEventHandler: function(evtType, handler) {
                return _this.listen(evtType, handler);
            },
            deregisterEventHandler: function(evtType, handler) {
                return _this.unlisten(evtType, handler);
            }
        };
        // tslint:enable:object-literal-sort-keys
        return new _foundation.MDCLineRippleFoundation(adapter);
    };
    return MDCLineRipple;
}(_component.MDCComponent);

},{"tslib":"lRdW5","@material/base/component":"jLptS","./foundation":"lo039","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lo039":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCLineRippleFoundation", ()=>MDCLineRippleFoundation1
);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _foundation = require("@material/base/foundation");
var _constants = require("./constants");
var MDCLineRippleFoundation1 = function(_super) {
    _tslib.__extends(MDCLineRippleFoundation, _super);
    function MDCLineRippleFoundation(adapter) {
        var _this = _super.call(this, _tslib.__assign(_tslib.__assign({
        }, MDCLineRippleFoundation.defaultAdapter), adapter)) || this;
        _this.transitionEndHandler = function(evt) {
            _this.handleTransitionEnd(evt);
        };
        return _this;
    }
    Object.defineProperty(MDCLineRippleFoundation, "cssClasses", {
        get: function() {
            return _constants.cssClasses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCLineRippleFoundation, "defaultAdapter", {
        /**
         * See {@link MDCLineRippleAdapter} for typing information on parameters and return types.
         */ get: function() {
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            return {
                addClass: function() {
                    return undefined;
                },
                removeClass: function() {
                    return undefined;
                },
                hasClass: function() {
                    return false;
                },
                setStyle: function() {
                    return undefined;
                },
                registerEventHandler: function() {
                    return undefined;
                },
                deregisterEventHandler: function() {
                    return undefined;
                }
            };
        // tslint:enable:object-literal-sort-keys
        },
        enumerable: false,
        configurable: true
    });
    MDCLineRippleFoundation.prototype.init = function() {
        this.adapter.registerEventHandler('transitionend', this.transitionEndHandler);
    };
    MDCLineRippleFoundation.prototype.destroy = function() {
        this.adapter.deregisterEventHandler('transitionend', this.transitionEndHandler);
    };
    MDCLineRippleFoundation.prototype.activate = function() {
        this.adapter.removeClass(_constants.cssClasses.LINE_RIPPLE_DEACTIVATING);
        this.adapter.addClass(_constants.cssClasses.LINE_RIPPLE_ACTIVE);
    };
    MDCLineRippleFoundation.prototype.setRippleCenter = function(xCoordinate) {
        this.adapter.setStyle('transform-origin', xCoordinate + "px center");
    };
    MDCLineRippleFoundation.prototype.deactivate = function() {
        this.adapter.addClass(_constants.cssClasses.LINE_RIPPLE_DEACTIVATING);
    };
    MDCLineRippleFoundation.prototype.handleTransitionEnd = function(evt) {
        // Wait for the line ripple to be either transparent or opaque
        // before emitting the animation end event
        var isDeactivating = this.adapter.hasClass(_constants.cssClasses.LINE_RIPPLE_DEACTIVATING);
        if (evt.propertyName === 'opacity') {
            if (isDeactivating) {
                this.adapter.removeClass(_constants.cssClasses.LINE_RIPPLE_ACTIVE);
                this.adapter.removeClass(_constants.cssClasses.LINE_RIPPLE_DEACTIVATING);
            }
        }
    };
    return MDCLineRippleFoundation;
}(_foundation.MDCFoundation);
exports.default = MDCLineRippleFoundation1;

},{"tslib":"lRdW5","@material/base/foundation":"kC5Yw","./constants":"a9qJj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a9qJj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cssClasses", ()=>cssClasses
);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var cssClasses = {
    LINE_RIPPLE_ACTIVE: 'mdc-line-ripple--active',
    LINE_RIPPLE_DEACTIVATING: 'mdc-line-ripple--deactivating'
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3BYDk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cssClasses", ()=>cssClasses
);
parcelHelpers.export(exports, "strings", ()=>strings
);
parcelHelpers.export(exports, "numbers", ()=>numbers
);
parcelHelpers.export(exports, "CornerBit", ()=>CornerBit1
);
parcelHelpers.export(exports, "Corner", ()=>Corner1
);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var cssClasses = {
    ANCHOR: 'mdc-menu-surface--anchor',
    ANIMATING_CLOSED: 'mdc-menu-surface--animating-closed',
    ANIMATING_OPEN: 'mdc-menu-surface--animating-open',
    FIXED: 'mdc-menu-surface--fixed',
    IS_OPEN_BELOW: 'mdc-menu-surface--is-open-below',
    OPEN: 'mdc-menu-surface--open',
    ROOT: 'mdc-menu-surface'
};
// tslint:disable:object-literal-sort-keys
var strings = {
    CLOSED_EVENT: 'MDCMenuSurface:closed',
    CLOSING_EVENT: 'MDCMenuSurface:closing',
    OPENED_EVENT: 'MDCMenuSurface:opened',
    FOCUSABLE_ELEMENTS: [
        'button:not(:disabled)',
        '[href]:not([aria-disabled="true"])',
        'input:not(:disabled)',
        'select:not(:disabled)',
        'textarea:not(:disabled)',
        '[tabindex]:not([tabindex="-1"]):not([aria-disabled="true"])', 
    ].join(', ')
};
// tslint:enable:object-literal-sort-keys
var numbers = {
    /** Total duration of menu-surface open animation. */ TRANSITION_OPEN_DURATION: 120,
    /** Total duration of menu-surface close animation. */ TRANSITION_CLOSE_DURATION: 75,
    /**
     * Margin left to the edge of the viewport when menu-surface is at maximum
     * possible height. Also used as a viewport margin.
     */ MARGIN_TO_EDGE: 32,
    /**
     * Ratio of anchor width to menu-surface width for switching from corner
     * positioning to center positioning.
     */ ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO: 0.67,
    /**
     * Amount of time to wait before restoring focus when closing the menu
     * surface. This is important because if a touch event triggered the menu
     * close, and the subsequent mouse event occurs after focus is restored, then
     * the restored focus would be lost.
     */ TOUCH_EVENT_WAIT_MS: 30
};
/**
 * Enum for bits in the {@see Corner) bitmap.
 */ var CornerBit1;
(function(CornerBit) {
    CornerBit[CornerBit["BOTTOM"] = 1] = "BOTTOM";
    CornerBit[CornerBit["CENTER"] = 2] = "CENTER";
    CornerBit[CornerBit["RIGHT"] = 4] = "RIGHT";
    CornerBit[CornerBit["FLIP_RTL"] = 8] = "FLIP_RTL";
})(CornerBit1 || (CornerBit1 = {
}));
/**
 * Enum for representing an element corner for positioning the menu-surface.
 *
 * The START constants map to LEFT if element directionality is left
 * to right and RIGHT if the directionality is right to left.
 * Likewise END maps to RIGHT or LEFT depending on the directionality.
 */ var Corner1;
(function(Corner) {
    Corner[Corner["TOP_LEFT"] = 0] = "TOP_LEFT";
    Corner[Corner["TOP_RIGHT"] = 4] = "TOP_RIGHT";
    Corner[Corner["BOTTOM_LEFT"] = 1] = "BOTTOM_LEFT";
    Corner[Corner["BOTTOM_RIGHT"] = 5] = "BOTTOM_RIGHT";
    Corner[Corner["TOP_START"] = 8] = "TOP_START";
    Corner[Corner["TOP_END"] = 12] = "TOP_END";
    Corner[Corner["BOTTOM_START"] = 9] = "BOTTOM_START";
    Corner[Corner["BOTTOM_END"] = 13] = "BOTTOM_END";
})(Corner1 || (Corner1 = {
}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"CoJI7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCMenu", ()=>MDCMenu1
);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _component = require("@material/base/component");
var _ponyfill = require("@material/dom/ponyfill");
var _component1 = require("@material/list/component");
var _constants = require("@material/list/constants");
var _foundation = require("@material/list/foundation");
var _component2 = require("@material/menu-surface/component");
var _foundation1 = require("@material/menu-surface/foundation");
var _constants1 = require("./constants");
var _foundation2 = require("./foundation");
var MDCMenu1 = function(_super) {
    _tslib.__extends(MDCMenu, _super);
    function MDCMenu() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCMenu.attachTo = function(root) {
        return new MDCMenu(root);
    };
    MDCMenu.prototype.initialize = function(menuSurfaceFactory, listFactory) {
        if (menuSurfaceFactory === void 0) menuSurfaceFactory = function(el) {
            return new _component2.MDCMenuSurface(el);
        };
        if (listFactory === void 0) listFactory = function(el) {
            return new _component1.MDCList(el);
        };
        this.menuSurfaceFactory = menuSurfaceFactory;
        this.listFactory = listFactory;
    };
    MDCMenu.prototype.initialSyncWithDOM = function() {
        var _this = this;
        this.menuSurface = this.menuSurfaceFactory(this.root);
        var list = this.root.querySelector(_constants1.strings.LIST_SELECTOR);
        if (list) {
            this.list = this.listFactory(list);
            this.list.wrapFocus = true;
        } else this.list = null;
        this.handleKeydown = function(evt) {
            _this.foundation.handleKeydown(evt);
        };
        this.handleItemAction = function(evt) {
            _this.foundation.handleItemAction(_this.items[evt.detail.index]);
        };
        this.handleMenuSurfaceOpened = function() {
            _this.foundation.handleMenuSurfaceOpened();
        };
        this.menuSurface.listen(_foundation1.MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.handleMenuSurfaceOpened);
        this.listen('keydown', this.handleKeydown);
        this.listen(_foundation.MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction);
    };
    MDCMenu.prototype.destroy = function() {
        if (this.list) this.list.destroy();
        this.menuSurface.destroy();
        this.menuSurface.unlisten(_foundation1.MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.handleMenuSurfaceOpened);
        this.unlisten('keydown', this.handleKeydown);
        this.unlisten(_foundation.MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction);
        _super.prototype.destroy.call(this);
    };
    Object.defineProperty(MDCMenu.prototype, "open", {
        get: function() {
            return this.menuSurface.isOpen();
        },
        set: function(value) {
            if (value) this.menuSurface.open();
            else this.menuSurface.close();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCMenu.prototype, "wrapFocus", {
        get: function() {
            return this.list ? this.list.wrapFocus : false;
        },
        set: function(value) {
            if (this.list) this.list.wrapFocus = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCMenu.prototype, "hasTypeahead", {
        /**
         * Sets whether the menu has typeahead functionality.
         * @param value Whether typeahead is enabled.
         */ set: function(value) {
            if (this.list) this.list.hasTypeahead = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCMenu.prototype, "typeaheadInProgress", {
        /**
         * @return Whether typeahead logic is currently matching some user prefix.
         */ get: function() {
            return this.list ? this.list.typeaheadInProgress : false;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Given the next desired character from the user, adds it to the typeahead
     * buffer. Then, attempts to find the next option matching the buffer. Wraps
     * around if at the end of options.
     *
     * @param nextChar The next character to add to the prefix buffer.
     * @param startingIndex The index from which to start matching. Only relevant
     *     when starting a new match sequence. To start a new match sequence,
     *     clear the buffer using `clearTypeaheadBuffer`, or wait for the buffer
     *     to clear after a set interval defined in list foundation. Defaults to
     *     the currently focused index.
     * @return The index of the matched item, or -1 if no match.
     */ MDCMenu.prototype.typeaheadMatchItem = function(nextChar, startingIndex) {
        if (this.list) return this.list.typeaheadMatchItem(nextChar, startingIndex);
        return -1;
    };
    /**
     * Layout the underlying list element in the case of any dynamic updates
     * to its structure.
     */ MDCMenu.prototype.layout = function() {
        if (this.list) this.list.layout();
    };
    Object.defineProperty(MDCMenu.prototype, "items", {
        /**
         * Return the items within the menu. Note that this only contains the set of elements within
         * the items container that are proper list items, and not supplemental / presentational DOM
         * elements.
         */ get: function() {
            return this.list ? this.list.listElements : [];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCMenu.prototype, "singleSelection", {
        /**
         * Turns on/off the underlying list's single selection mode. Used mainly
         * by select menu.
         *
         * @param singleSelection Whether to enable single selection mode.
         */ set: function(singleSelection) {
            if (this.list) this.list.singleSelection = singleSelection;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCMenu.prototype, "selectedIndex", {
        /**
         * Retrieves the selected index. Only applicable to select menus.
         * @return The selected index, which is a number for single selection and
         *     radio lists, and an array of numbers for checkbox lists.
         */ get: function() {
            return this.list ? this.list.selectedIndex : _constants.numbers.UNSET_INDEX;
        },
        /**
         * Sets the selected index of the list. Only applicable to select menus.
         * @param index The selected index, which is a number for single selection and
         *     radio lists, and an array of numbers for checkbox lists.
         */ set: function(index) {
            if (this.list) this.list.selectedIndex = index;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCMenu.prototype, "quickOpen", {
        set: function(quickOpen) {
            this.menuSurface.quickOpen = quickOpen;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Sets default focus state where the menu should focus every time when menu
     * is opened. Focuses the list root (`DefaultFocusState.LIST_ROOT`) element by
     * default.
     * @param focusState Default focus state.
     */ MDCMenu.prototype.setDefaultFocusState = function(focusState) {
        this.foundation.setDefaultFocusState(focusState);
    };
    /**
     * @param corner Default anchor corner alignment of top-left menu corner.
     */ MDCMenu.prototype.setAnchorCorner = function(corner) {
        this.menuSurface.setAnchorCorner(corner);
    };
    MDCMenu.prototype.setAnchorMargin = function(margin) {
        this.menuSurface.setAnchorMargin(margin);
    };
    /**
     * Sets the list item as the selected row at the specified index.
     * @param index Index of list item within menu.
     */ MDCMenu.prototype.setSelectedIndex = function(index) {
        this.foundation.setSelectedIndex(index);
    };
    /**
     * Sets the enabled state to isEnabled for the menu item at the given index.
     * @param index Index of the menu item
     * @param isEnabled The desired enabled state of the menu item.
     */ MDCMenu.prototype.setEnabled = function(index, isEnabled) {
        this.foundation.setEnabled(index, isEnabled);
    };
    /**
     * @return The item within the menu at the index specified.
     */ MDCMenu.prototype.getOptionByIndex = function(index) {
        var items = this.items;
        if (index < items.length) return this.items[index];
        else return null;
    };
    /**
     * @param index A menu item's index.
     * @return The primary text within the menu at the index specified.
     */ MDCMenu.prototype.getPrimaryTextAtIndex = function(index) {
        var item = this.getOptionByIndex(index);
        if (item && this.list) return this.list.getPrimaryText(item) || '';
        return '';
    };
    MDCMenu.prototype.setFixedPosition = function(isFixed) {
        this.menuSurface.setFixedPosition(isFixed);
    };
    MDCMenu.prototype.setIsHoisted = function(isHoisted) {
        this.menuSurface.setIsHoisted(isHoisted);
    };
    MDCMenu.prototype.setAbsolutePosition = function(x, y) {
        this.menuSurface.setAbsolutePosition(x, y);
    };
    /**
     * Sets the element that the menu-surface is anchored to.
     */ MDCMenu.prototype.setAnchorElement = function(element) {
        this.menuSurface.anchorElement = element;
    };
    MDCMenu.prototype.getDefaultFoundation = function() {
        var _this = this;
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        var adapter = {
            addClassToElementAtIndex: function(index, className) {
                var list = _this.items;
                list[index].classList.add(className);
            },
            removeClassFromElementAtIndex: function(index, className) {
                var list = _this.items;
                list[index].classList.remove(className);
            },
            addAttributeToElementAtIndex: function(index, attr, value) {
                var list = _this.items;
                list[index].setAttribute(attr, value);
            },
            removeAttributeFromElementAtIndex: function(index, attr) {
                var list = _this.items;
                list[index].removeAttribute(attr);
            },
            getAttributeFromElementAtIndex: function(index, attr) {
                var list = _this.items;
                return list[index].getAttribute(attr);
            },
            elementContainsClass: function(element, className) {
                return element.classList.contains(className);
            },
            closeSurface: function(skipRestoreFocus) {
                _this.menuSurface.close(skipRestoreFocus);
            },
            getElementIndex: function(element) {
                return _this.items.indexOf(element);
            },
            notifySelected: function(evtData) {
                _this.emit(_constants1.strings.SELECTED_EVENT, {
                    index: evtData.index,
                    item: _this.items[evtData.index]
                });
            },
            getMenuItemCount: function() {
                return _this.items.length;
            },
            focusItemAtIndex: function(index) {
                _this.items[index].focus();
            },
            focusListRoot: function() {
                _this.root.querySelector(_constants1.strings.LIST_SELECTOR).focus();
            },
            isSelectableItemAtIndex: function(index) {
                return !!_ponyfill.closest(_this.items[index], "." + _constants1.cssClasses.MENU_SELECTION_GROUP);
            },
            getSelectedSiblingOfItemAtIndex: function(index) {
                var selectionGroupEl = _ponyfill.closest(_this.items[index], "." + _constants1.cssClasses.MENU_SELECTION_GROUP);
                var selectedItemEl = selectionGroupEl.querySelector("." + _constants1.cssClasses.MENU_SELECTED_LIST_ITEM);
                return selectedItemEl ? _this.items.indexOf(selectedItemEl) : -1;
            }
        };
        // tslint:enable:object-literal-sort-keys
        return new _foundation2.MDCMenuFoundation(adapter);
    };
    return MDCMenu;
}(_component.MDCComponent);

},{"tslib":"lRdW5","@material/base/component":"jLptS","@material/dom/ponyfill":"8pLcv","@material/list/component":"iRqEa","@material/list/constants":"5wBVC","@material/list/foundation":"dFgru","@material/menu-surface/component":"dBuEB","@material/menu-surface/foundation":"2cKnt","./constants":"j2pZI","./foundation":"b3DBQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iRqEa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCList", ()=>MDCList1
);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _component = require("@material/base/component");
var _ponyfill = require("@material/dom/ponyfill");
var _constants = require("./constants");
var _foundation = require("./foundation");
var MDCList1 = function(_super) {
    _tslib.__extends(MDCList, _super);
    function MDCList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MDCList.prototype, "vertical", {
        set: function(value) {
            this.foundation.setVerticalOrientation(value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCList.prototype, "listElements", {
        get: function() {
            return Array.from(this.root.querySelectorAll("." + this.classNameMap[_constants.cssClasses.LIST_ITEM_CLASS]));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCList.prototype, "wrapFocus", {
        set: function(value) {
            this.foundation.setWrapFocus(value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCList.prototype, "typeaheadInProgress", {
        /**
         * @return Whether typeahead is currently matching a user-specified prefix.
         */ get: function() {
            return this.foundation.isTypeaheadInProgress();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCList.prototype, "hasTypeahead", {
        /**
         * Sets whether typeahead functionality is enabled on the list.
         * @param hasTypeahead Whether typeahead is enabled.
         */ set: function(hasTypeahead) {
            this.foundation.setHasTypeahead(hasTypeahead);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCList.prototype, "singleSelection", {
        set: function(isSingleSelectionList) {
            this.foundation.setSingleSelection(isSingleSelectionList);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCList.prototype, "selectedIndex", {
        get: function() {
            return this.foundation.getSelectedIndex();
        },
        set: function(index) {
            this.foundation.setSelectedIndex(index);
        },
        enumerable: false,
        configurable: true
    });
    MDCList.attachTo = function(root) {
        return new MDCList(root);
    };
    MDCList.prototype.initialSyncWithDOM = function() {
        this.isEvolutionEnabled = _constants.evolutionAttribute in this.root.dataset;
        if (this.isEvolutionEnabled) this.classNameMap = _constants.evolutionClassNameMap;
        else if (_ponyfill.matches(this.root, _constants.strings.DEPRECATED_SELECTOR)) this.classNameMap = _constants.deprecatedClassNameMap;
        else this.classNameMap = Object.values(_constants.cssClasses).reduce(function(obj, className) {
            obj[className] = className;
            return obj;
        }, {
        });
        this.handleClick = this.handleClickEvent.bind(this);
        this.handleKeydown = this.handleKeydownEvent.bind(this);
        this.focusInEventListener = this.handleFocusInEvent.bind(this);
        this.focusOutEventListener = this.handleFocusOutEvent.bind(this);
        this.listen('keydown', this.handleKeydown);
        this.listen('click', this.handleClick);
        this.listen('focusin', this.focusInEventListener);
        this.listen('focusout', this.focusOutEventListener);
        this.layout();
        this.initializeListType();
        this.ensureFocusable();
    };
    MDCList.prototype.destroy = function() {
        this.unlisten('keydown', this.handleKeydown);
        this.unlisten('click', this.handleClick);
        this.unlisten('focusin', this.focusInEventListener);
        this.unlisten('focusout', this.focusOutEventListener);
    };
    MDCList.prototype.layout = function() {
        var direction = this.root.getAttribute(_constants.strings.ARIA_ORIENTATION);
        this.vertical = direction !== _constants.strings.ARIA_ORIENTATION_HORIZONTAL;
        var itemSelector = "." + this.classNameMap[_constants.cssClasses.LIST_ITEM_CLASS] + ":not([tabindex])";
        var childSelector = _constants.strings.FOCUSABLE_CHILD_ELEMENTS;
        // List items need to have at least tabindex=-1 to be focusable.
        var itemEls = this.root.querySelectorAll(itemSelector);
        if (itemEls.length) Array.prototype.forEach.call(itemEls, function(el) {
            el.setAttribute('tabindex', '-1');
        });
        // Child button/a elements are not tabbable until the list item is focused.
        var focusableChildEls = this.root.querySelectorAll(childSelector);
        if (focusableChildEls.length) Array.prototype.forEach.call(focusableChildEls, function(el) {
            el.setAttribute('tabindex', '-1');
        });
        if (this.isEvolutionEnabled) this.foundation.setUseSelectedAttribute(true);
        this.foundation.layout();
    };
    /**
     * Extracts the primary text from a list item.
     * @param item The list item element.
     * @return The primary text in the element.
     */ MDCList.prototype.getPrimaryText = function(item) {
        var _a;
        var primaryText = item.querySelector("." + this.classNameMap[_constants.cssClasses.LIST_ITEM_PRIMARY_TEXT_CLASS]);
        if (this.isEvolutionEnabled || primaryText) return (_a = primaryText === null || primaryText === void 0 ? void 0 : primaryText.textContent) !== null && _a !== void 0 ? _a : '';
        var singleLineText = item.querySelector("." + this.classNameMap[_constants.cssClasses.LIST_ITEM_TEXT_CLASS]);
        return singleLineText && singleLineText.textContent || '';
    };
    /**
     * Initialize selectedIndex value based on pre-selected list items.
     */ MDCList.prototype.initializeListType = function() {
        var _this = this;
        this.isInteractive = _ponyfill.matches(this.root, _constants.strings.ARIA_INTERACTIVE_ROLES_SELECTOR);
        if (this.isEvolutionEnabled && this.isInteractive) {
            var selection = Array.from(this.root.querySelectorAll(_constants.strings.SELECTED_ITEM_SELECTOR), function(listItem) {
                return _this.listElements.indexOf(listItem);
            });
            if (_ponyfill.matches(this.root, _constants.strings.ARIA_MULTI_SELECTABLE_SELECTOR)) this.selectedIndex = selection;
            else if (selection.length > 0) this.selectedIndex = selection[0];
            return;
        }
        var checkboxListItems = this.root.querySelectorAll(_constants.strings.ARIA_ROLE_CHECKBOX_SELECTOR);
        var radioSelectedListItem = this.root.querySelector(_constants.strings.ARIA_CHECKED_RADIO_SELECTOR);
        if (checkboxListItems.length) {
            var preselectedItems = this.root.querySelectorAll(_constants.strings.ARIA_CHECKED_CHECKBOX_SELECTOR);
            this.selectedIndex = Array.from(preselectedItems, function(listItem) {
                return _this.listElements.indexOf(listItem);
            });
        } else if (radioSelectedListItem) this.selectedIndex = this.listElements.indexOf(radioSelectedListItem);
    };
    /**
     * Updates the list item at itemIndex to the desired isEnabled state.
     * @param itemIndex Index of the list item
     * @param isEnabled Sets the list item to enabled or disabled.
     */ MDCList.prototype.setEnabled = function(itemIndex, isEnabled) {
        this.foundation.setEnabled(itemIndex, isEnabled);
    };
    /**
     * Given the next desired character from the user, adds it to the typeahead
     * buffer. Then, attempts to find the next option matching the buffer. Wraps
     * around if at the end of options.
     *
     * @param nextChar The next character to add to the prefix buffer.
     * @param startingIndex The index from which to start matching. Defaults to
     *     the currently focused index.
     * @return The index of the matched item.
     */ MDCList.prototype.typeaheadMatchItem = function(nextChar, startingIndex) {
        return this.foundation.typeaheadMatchItem(nextChar, startingIndex, /** skipFocus */ true);
    };
    MDCList.prototype.getDefaultFoundation = function() {
        var _this = this;
        // DO NOT INLINE this variable. For backward compatibility, foundations take
        // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any
        // methods, we need a separate, strongly typed adapter variable.
        var adapter = {
            addClassForElementIndex: function(index, className) {
                var element = _this.listElements[index];
                if (element) element.classList.add(_this.classNameMap[className]);
            },
            focusItemAtIndex: function(index) {
                var element = _this.listElements[index];
                if (element) element.focus();
            },
            getAttributeForElementIndex: function(index, attr) {
                return _this.listElements[index].getAttribute(attr);
            },
            getFocusedElementIndex: function() {
                return _this.listElements.indexOf(document.activeElement);
            },
            getListItemCount: function() {
                return _this.listElements.length;
            },
            getPrimaryTextAtIndex: function(index) {
                return _this.getPrimaryText(_this.listElements[index]);
            },
            hasCheckboxAtIndex: function(index) {
                var listItem = _this.listElements[index];
                return !!listItem.querySelector(_constants.strings.CHECKBOX_SELECTOR);
            },
            hasRadioAtIndex: function(index) {
                var listItem = _this.listElements[index];
                return !!listItem.querySelector(_constants.strings.RADIO_SELECTOR);
            },
            isCheckboxCheckedAtIndex: function(index) {
                var listItem = _this.listElements[index];
                var toggleEl = listItem.querySelector(_constants.strings.CHECKBOX_SELECTOR);
                return toggleEl.checked;
            },
            isFocusInsideList: function() {
                return _this.root !== document.activeElement && _this.root.contains(document.activeElement);
            },
            isRootFocused: function() {
                return document.activeElement === _this.root;
            },
            listItemAtIndexHasClass: function(index, className) {
                return _this.listElements[index].classList.contains(_this.classNameMap[className]);
            },
            notifyAction: function(index) {
                _this.emit(_constants.strings.ACTION_EVENT, {
                    index: index
                }, /** shouldBubble */ true);
            },
            removeClassForElementIndex: function(index, className) {
                var element = _this.listElements[index];
                if (element) element.classList.remove(_this.classNameMap[className]);
            },
            setAttributeForElementIndex: function(index, attr, value) {
                var element = _this.listElements[index];
                if (element) element.setAttribute(attr, value);
            },
            setCheckedCheckboxOrRadioAtIndex: function(index, isChecked) {
                var listItem = _this.listElements[index];
                var toggleEl = listItem.querySelector(_constants.strings.CHECKBOX_RADIO_SELECTOR);
                toggleEl.checked = isChecked;
                var event = document.createEvent('Event');
                event.initEvent('change', true, true);
                toggleEl.dispatchEvent(event);
            },
            setTabIndexForListItemChildren: function(listItemIndex, tabIndexValue) {
                var element = _this.listElements[listItemIndex];
                var selector = _constants.strings.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX;
                Array.prototype.forEach.call(element.querySelectorAll(selector), function(el) {
                    el.setAttribute('tabindex', tabIndexValue);
                });
            }
        };
        return new _foundation.MDCListFoundation(adapter);
    };
    /**
     * Ensures that at least one item is focusable if the list is interactive and
     * doesn't specify a suitable tabindex.
     */ MDCList.prototype.ensureFocusable = function() {
        if (this.isEvolutionEnabled && this.isInteractive) {
            if (!this.root.querySelector("." + this.classNameMap[_constants.cssClasses.LIST_ITEM_CLASS] + "[tabindex=\"0\"]")) {
                var index = this.initialFocusIndex();
                if (index !== -1) this.listElements[index].tabIndex = 0;
            }
        }
    };
    MDCList.prototype.initialFocusIndex = function() {
        if (this.selectedIndex instanceof Array && this.selectedIndex.length > 0) return this.selectedIndex[0];
        if (typeof this.selectedIndex === 'number' && this.selectedIndex !== _constants.numbers.UNSET_INDEX) return this.selectedIndex;
        var el = this.root.querySelector("." + this.classNameMap[_constants.cssClasses.LIST_ITEM_CLASS] + ":not(." + this.classNameMap[_constants.cssClasses.LIST_ITEM_DISABLED_CLASS] + ")");
        if (el === null) return -1;
        return this.getListItemIndex(el);
    };
    /**
     * Used to figure out which list item this event is targetting. Or returns -1
     * if there is no list item
     */ MDCList.prototype.getListItemIndex = function(el) {
        var nearestParent = _ponyfill.closest(el, "." + this.classNameMap[_constants.cssClasses.LIST_ITEM_CLASS] + ", ." + this.classNameMap[_constants.cssClasses.ROOT]);
        // Get the index of the element if it is a list item.
        if (nearestParent && _ponyfill.matches(nearestParent, "." + this.classNameMap[_constants.cssClasses.LIST_ITEM_CLASS])) return this.listElements.indexOf(nearestParent);
        return -1;
    };
    /**
     * Used to figure out which element was clicked before sending the event to
     * the foundation.
     */ MDCList.prototype.handleFocusInEvent = function(evt) {
        var index = this.getListItemIndex(evt.target);
        this.foundation.handleFocusIn(index);
    };
    /**
     * Used to figure out which element was clicked before sending the event to
     * the foundation.
     */ MDCList.prototype.handleFocusOutEvent = function(evt) {
        var index = this.getListItemIndex(evt.target);
        this.foundation.handleFocusOut(index);
    };
    /**
     * Used to figure out which element was focused when keydown event occurred
     * before sending the event to the foundation.
     */ MDCList.prototype.handleKeydownEvent = function(evt) {
        var index = this.getListItemIndex(evt.target);
        var target = evt.target;
        this.foundation.handleKeydown(evt, target.classList.contains(this.classNameMap[_constants.cssClasses.LIST_ITEM_CLASS]), index);
    };
    /**
     * Used to figure out which element was clicked before sending the event to
     * the foundation.
     */ MDCList.prototype.handleClickEvent = function(evt) {
        var index = this.getListItemIndex(evt.target);
        var target = evt.target;
        // Toggle the checkbox only if it's not the target of the event, or the
        // checkbox will have 2 change events.
        var toggleCheckbox = !_ponyfill.matches(target, _constants.strings.CHECKBOX_RADIO_SELECTOR);
        this.foundation.handleClick(index, toggleCheckbox);
    };
    return MDCList;
}(_component.MDCComponent);

},{"tslib":"lRdW5","@material/base/component":"jLptS","@material/dom/ponyfill":"8pLcv","./constants":"5wBVC","./foundation":"dFgru","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5wBVC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "strings", ()=>strings
);
parcelHelpers.export(exports, "cssClasses", ()=>cssClasses
);
parcelHelpers.export(exports, "numbers", ()=>numbers
);
parcelHelpers.export(exports, "deprecatedClassNameMap", ()=>deprecatedClassNameMap
);
parcelHelpers.export(exports, "evolutionAttribute", ()=>evolutionAttribute
);
parcelHelpers.export(exports, "evolutionClassNameMap", ()=>evolutionClassNameMap
);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _a, _b;
var cssClasses = {
    LIST_ITEM_ACTIVATED_CLASS: 'mdc-list-item--activated',
    LIST_ITEM_CLASS: 'mdc-list-item',
    LIST_ITEM_DISABLED_CLASS: 'mdc-list-item--disabled',
    LIST_ITEM_SELECTED_CLASS: 'mdc-list-item--selected',
    LIST_ITEM_TEXT_CLASS: 'mdc-list-item__text',
    LIST_ITEM_PRIMARY_TEXT_CLASS: 'mdc-list-item__primary-text',
    ROOT: 'mdc-list'
};
var evolutionClassNameMap = (_a = {
}, _a["" + cssClasses.LIST_ITEM_ACTIVATED_CLASS] = 'mdc-list-item--activated', _a["" + cssClasses.LIST_ITEM_CLASS] = 'mdc-list-item', _a["" + cssClasses.LIST_ITEM_DISABLED_CLASS] = 'mdc-list-item--disabled', _a["" + cssClasses.LIST_ITEM_SELECTED_CLASS] = 'mdc-list-item--selected', _a["" + cssClasses.LIST_ITEM_PRIMARY_TEXT_CLASS] = 'mdc-list-item__primary-text', _a["" + cssClasses.ROOT] = 'mdc-list', _a);
var deprecatedClassNameMap = (_b = {
}, _b["" + cssClasses.LIST_ITEM_ACTIVATED_CLASS] = 'mdc-deprecated-list-item--activated', _b["" + cssClasses.LIST_ITEM_CLASS] = 'mdc-deprecated-list-item', _b["" + cssClasses.LIST_ITEM_DISABLED_CLASS] = 'mdc-deprecated-list-item--disabled', _b["" + cssClasses.LIST_ITEM_SELECTED_CLASS] = 'mdc-deprecated-list-item--selected', _b["" + cssClasses.LIST_ITEM_TEXT_CLASS] = 'mdc-deprecated-list-item__text', _b["" + cssClasses.LIST_ITEM_PRIMARY_TEXT_CLASS] = 'mdc-deprecated-list-item__primary-text', _b["" + cssClasses.ROOT] = 'mdc-deprecated-list', _b);
var strings = {
    ACTION_EVENT: 'MDCList:action',
    ARIA_CHECKED: 'aria-checked',
    ARIA_CHECKED_CHECKBOX_SELECTOR: '[role="checkbox"][aria-checked="true"]',
    ARIA_CHECKED_RADIO_SELECTOR: '[role="radio"][aria-checked="true"]',
    ARIA_CURRENT: 'aria-current',
    ARIA_DISABLED: 'aria-disabled',
    ARIA_ORIENTATION: 'aria-orientation',
    ARIA_ORIENTATION_HORIZONTAL: 'horizontal',
    ARIA_ROLE_CHECKBOX_SELECTOR: '[role="checkbox"]',
    ARIA_SELECTED: 'aria-selected',
    ARIA_INTERACTIVE_ROLES_SELECTOR: '[role="listbox"], [role="menu"]',
    ARIA_MULTI_SELECTABLE_SELECTOR: '[aria-multiselectable="true"]',
    CHECKBOX_RADIO_SELECTOR: 'input[type="checkbox"], input[type="radio"]',
    CHECKBOX_SELECTOR: 'input[type="checkbox"]',
    CHILD_ELEMENTS_TO_TOGGLE_TABINDEX: "\n    ." + cssClasses.LIST_ITEM_CLASS + " button:not(:disabled),\n    ." + cssClasses.LIST_ITEM_CLASS + " a,\n    ." + deprecatedClassNameMap[cssClasses.LIST_ITEM_CLASS] + " button:not(:disabled),\n    ." + deprecatedClassNameMap[cssClasses.LIST_ITEM_CLASS] + " a\n  ",
    DEPRECATED_SELECTOR: '.mdc-deprecated-list',
    FOCUSABLE_CHILD_ELEMENTS: "\n    ." + cssClasses.LIST_ITEM_CLASS + " button:not(:disabled),\n    ." + cssClasses.LIST_ITEM_CLASS + " a,\n    ." + cssClasses.LIST_ITEM_CLASS + " input[type=\"radio\"]:not(:disabled),\n    ." + cssClasses.LIST_ITEM_CLASS + " input[type=\"checkbox\"]:not(:disabled),\n    ." + deprecatedClassNameMap[cssClasses.LIST_ITEM_CLASS] + " button:not(:disabled),\n    ." + deprecatedClassNameMap[cssClasses.LIST_ITEM_CLASS] + " a,\n    ." + deprecatedClassNameMap[cssClasses.LIST_ITEM_CLASS] + " input[type=\"radio\"]:not(:disabled),\n    ." + deprecatedClassNameMap[cssClasses.LIST_ITEM_CLASS] + " input[type=\"checkbox\"]:not(:disabled)\n  ",
    RADIO_SELECTOR: 'input[type="radio"]',
    SELECTED_ITEM_SELECTOR: '[aria-selected="true"], [aria-current="true"]'
};
var numbers = {
    UNSET_INDEX: -1,
    TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS: 300
};
var evolutionAttribute = 'evolution';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dFgru":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCListFoundation", ()=>MDCListFoundation1
);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _foundation = require("@material/base/foundation");
var _keyboard = require("@material/dom/keyboard");
var _constants = require("./constants");
var _events = require("./events");
var _typeahead = require("./typeahead");
function isNumberArray(selectedIndex) {
    return selectedIndex instanceof Array;
}
var MDCListFoundation1 = function(_super) {
    _tslib.__extends(MDCListFoundation, _super);
    function MDCListFoundation(adapter) {
        var _this = _super.call(this, _tslib.__assign(_tslib.__assign({
        }, MDCListFoundation.defaultAdapter), adapter)) || this;
        _this.wrapFocus = false;
        _this.isVertical = true;
        _this.isSingleSelectionList = false;
        _this.selectedIndex = _constants.numbers.UNSET_INDEX;
        _this.focusedItemIndex = _constants.numbers.UNSET_INDEX;
        _this.useActivatedClass = false;
        _this.useSelectedAttr = false;
        _this.ariaCurrentAttrValue = null;
        _this.isCheckboxList = false;
        _this.isRadioList = false;
        _this.hasTypeahead = false;
        // Transiently holds current typeahead prefix from user.
        _this.typeaheadState = _typeahead.initState();
        _this.sortedIndexByFirstChar = new Map();
        return _this;
    }
    Object.defineProperty(MDCListFoundation, "strings", {
        get: function() {
            return _constants.strings;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCListFoundation, "cssClasses", {
        get: function() {
            return _constants.cssClasses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCListFoundation, "numbers", {
        get: function() {
            return _constants.numbers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCListFoundation, "defaultAdapter", {
        get: function() {
            return {
                addClassForElementIndex: function() {
                    return undefined;
                },
                focusItemAtIndex: function() {
                    return undefined;
                },
                getAttributeForElementIndex: function() {
                    return null;
                },
                getFocusedElementIndex: function() {
                    return 0;
                },
                getListItemCount: function() {
                    return 0;
                },
                hasCheckboxAtIndex: function() {
                    return false;
                },
                hasRadioAtIndex: function() {
                    return false;
                },
                isCheckboxCheckedAtIndex: function() {
                    return false;
                },
                isFocusInsideList: function() {
                    return false;
                },
                isRootFocused: function() {
                    return false;
                },
                listItemAtIndexHasClass: function() {
                    return false;
                },
                notifyAction: function() {
                    return undefined;
                },
                removeClassForElementIndex: function() {
                    return undefined;
                },
                setAttributeForElementIndex: function() {
                    return undefined;
                },
                setCheckedCheckboxOrRadioAtIndex: function() {
                    return undefined;
                },
                setTabIndexForListItemChildren: function() {
                    return undefined;
                },
                getPrimaryTextAtIndex: function() {
                    return '';
                }
            };
        },
        enumerable: false,
        configurable: true
    });
    MDCListFoundation.prototype.layout = function() {
        if (this.adapter.getListItemCount() === 0) return;
        // TODO(b/172274142): consider all items when determining the list's type.
        if (this.adapter.hasCheckboxAtIndex(0)) this.isCheckboxList = true;
        else if (this.adapter.hasRadioAtIndex(0)) this.isRadioList = true;
        else this.maybeInitializeSingleSelection();
        if (this.hasTypeahead) this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex();
    };
    /** Returns the index of the item that was last focused. */ MDCListFoundation.prototype.getFocusedItemIndex = function() {
        return this.focusedItemIndex;
    };
    /** Toggles focus wrapping with keyboard navigation. */ MDCListFoundation.prototype.setWrapFocus = function(value) {
        this.wrapFocus = value;
    };
    /**
     * Toggles orientation direction for keyboard navigation (true for vertical,
     * false for horizontal).
     */ MDCListFoundation.prototype.setVerticalOrientation = function(value) {
        this.isVertical = value;
    };
    /** Toggles single-selection behavior. */ MDCListFoundation.prototype.setSingleSelection = function(value) {
        this.isSingleSelectionList = value;
        if (value) {
            this.maybeInitializeSingleSelection();
            this.selectedIndex = this.getSelectedIndexFromDOM();
        }
    };
    /**
     * Automatically determines whether the list is single selection list. If so,
     * initializes the internal state to match the selected item.
     */ MDCListFoundation.prototype.maybeInitializeSingleSelection = function() {
        var selectedItemIndex = this.getSelectedIndexFromDOM();
        if (selectedItemIndex === _constants.numbers.UNSET_INDEX) return;
        var hasActivatedClass = this.adapter.listItemAtIndexHasClass(selectedItemIndex, _constants.cssClasses.LIST_ITEM_ACTIVATED_CLASS);
        if (hasActivatedClass) this.setUseActivatedClass(true);
        this.isSingleSelectionList = true;
        this.selectedIndex = selectedItemIndex;
    };
    /** @return Index of the first selected item based on the DOM state. */ MDCListFoundation.prototype.getSelectedIndexFromDOM = function() {
        var selectedIndex = _constants.numbers.UNSET_INDEX;
        var listItemsCount = this.adapter.getListItemCount();
        for(var i = 0; i < listItemsCount; i++){
            var hasSelectedClass = this.adapter.listItemAtIndexHasClass(i, _constants.cssClasses.LIST_ITEM_SELECTED_CLASS);
            var hasActivatedClass = this.adapter.listItemAtIndexHasClass(i, _constants.cssClasses.LIST_ITEM_ACTIVATED_CLASS);
            if (!(hasSelectedClass || hasActivatedClass)) continue;
            selectedIndex = i;
            break;
        }
        return selectedIndex;
    };
    /**
     * Sets whether typeahead is enabled on the list.
     * @param hasTypeahead Whether typeahead is enabled.
     */ MDCListFoundation.prototype.setHasTypeahead = function(hasTypeahead) {
        this.hasTypeahead = hasTypeahead;
        if (hasTypeahead) this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex();
    };
    /**
     * @return Whether typeahead is currently matching a user-specified prefix.
     */ MDCListFoundation.prototype.isTypeaheadInProgress = function() {
        return this.hasTypeahead && _typeahead.isTypingInProgress(this.typeaheadState);
    };
    /** Toggle use of the "activated" CSS class. */ MDCListFoundation.prototype.setUseActivatedClass = function(useActivated) {
        this.useActivatedClass = useActivated;
    };
    /**
     * Toggles use of the selected attribute (true for aria-selected, false for
     * aria-checked).
     */ MDCListFoundation.prototype.setUseSelectedAttribute = function(useSelected) {
        this.useSelectedAttr = useSelected;
    };
    MDCListFoundation.prototype.getSelectedIndex = function() {
        return this.selectedIndex;
    };
    MDCListFoundation.prototype.setSelectedIndex = function(index, _a) {
        var _b = _a === void 0 ? {
        } : _a, forceUpdate = _b.forceUpdate;
        if (!this.isIndexValid(index)) return;
        if (this.isCheckboxList) this.setCheckboxAtIndex(index);
        else if (this.isRadioList) this.setRadioAtIndex(index);
        else this.setSingleSelectionAtIndex(index, {
            forceUpdate: forceUpdate
        });
    };
    /**
     * Focus in handler for the list items.
     */ MDCListFoundation.prototype.handleFocusIn = function(listItemIndex) {
        if (listItemIndex >= 0) {
            this.focusedItemIndex = listItemIndex;
            this.adapter.setAttributeForElementIndex(listItemIndex, 'tabindex', '0');
            this.adapter.setTabIndexForListItemChildren(listItemIndex, '0');
        }
    };
    /**
     * Focus out handler for the list items.
     */ MDCListFoundation.prototype.handleFocusOut = function(listItemIndex) {
        var _this = this;
        if (listItemIndex >= 0) {
            this.adapter.setAttributeForElementIndex(listItemIndex, 'tabindex', '-1');
            this.adapter.setTabIndexForListItemChildren(listItemIndex, '-1');
        }
        /**
         * Between Focusout & Focusin some browsers do not have focus on any
         * element. Setting a delay to wait till the focus is moved to next element.
         */ setTimeout(function() {
            if (!_this.adapter.isFocusInsideList()) _this.setTabindexToFirstSelectedOrFocusedItem();
        }, 0);
    };
    /**
     * Key handler for the list.
     */ MDCListFoundation.prototype.handleKeydown = function(event, isRootListItem, listItemIndex) {
        var _this = this;
        var isArrowLeft = _keyboard.normalizeKey(event) === 'ArrowLeft';
        var isArrowUp = _keyboard.normalizeKey(event) === 'ArrowUp';
        var isArrowRight = _keyboard.normalizeKey(event) === 'ArrowRight';
        var isArrowDown = _keyboard.normalizeKey(event) === 'ArrowDown';
        var isHome = _keyboard.normalizeKey(event) === 'Home';
        var isEnd = _keyboard.normalizeKey(event) === 'End';
        var isEnter = _keyboard.normalizeKey(event) === 'Enter';
        var isSpace = _keyboard.normalizeKey(event) === 'Spacebar';
        // Have to check both upper and lower case, because having caps lock on
        // affects the value.
        var isLetterA = event.key === 'A' || event.key === 'a';
        if (this.adapter.isRootFocused()) {
            if (isArrowUp || isEnd) {
                event.preventDefault();
                this.focusLastElement();
            } else if (isArrowDown || isHome) {
                event.preventDefault();
                this.focusFirstElement();
            }
            if (this.hasTypeahead) {
                var handleKeydownOpts = {
                    event: event,
                    focusItemAtIndex: function(index) {
                        _this.focusItemAtIndex(index);
                    },
                    focusedItemIndex: -1,
                    isTargetListItem: isRootListItem,
                    sortedIndexByFirstChar: this.sortedIndexByFirstChar,
                    isItemAtIndexDisabled: function(index) {
                        return _this.adapter.listItemAtIndexHasClass(index, _constants.cssClasses.LIST_ITEM_DISABLED_CLASS);
                    }
                };
                _typeahead.handleKeydown(handleKeydownOpts, this.typeaheadState);
            }
            return;
        }
        var currentIndex = this.adapter.getFocusedElementIndex();
        if (currentIndex === -1) {
            currentIndex = listItemIndex;
            if (currentIndex < 0) // If this event doesn't have a mdc-list-item ancestor from the
            // current list (not from a sublist), return early.
            return;
        }
        if (this.isVertical && isArrowDown || !this.isVertical && isArrowRight) {
            _events.preventDefaultEvent(event);
            this.focusNextElement(currentIndex);
        } else if (this.isVertical && isArrowUp || !this.isVertical && isArrowLeft) {
            _events.preventDefaultEvent(event);
            this.focusPrevElement(currentIndex);
        } else if (isHome) {
            _events.preventDefaultEvent(event);
            this.focusFirstElement();
        } else if (isEnd) {
            _events.preventDefaultEvent(event);
            this.focusLastElement();
        } else if (isLetterA && event.ctrlKey && this.isCheckboxList) {
            event.preventDefault();
            this.toggleAll(this.selectedIndex === _constants.numbers.UNSET_INDEX ? [] : this.selectedIndex);
        } else if (isEnter || isSpace) {
            if (isRootListItem) {
                // Return early if enter key is pressed on anchor element which triggers
                // synthetic MouseEvent event.
                var target = event.target;
                if (target && target.tagName === 'A' && isEnter) return;
                _events.preventDefaultEvent(event);
                if (this.adapter.listItemAtIndexHasClass(currentIndex, _constants.cssClasses.LIST_ITEM_DISABLED_CLASS)) return;
                if (!this.isTypeaheadInProgress()) {
                    if (this.isSelectableList()) this.setSelectedIndexOnAction(currentIndex);
                    this.adapter.notifyAction(currentIndex);
                }
            }
        }
        if (this.hasTypeahead) {
            var handleKeydownOpts = {
                event: event,
                focusItemAtIndex: function(index) {
                    _this.focusItemAtIndex(index);
                },
                focusedItemIndex: this.focusedItemIndex,
                isTargetListItem: isRootListItem,
                sortedIndexByFirstChar: this.sortedIndexByFirstChar,
                isItemAtIndexDisabled: function(index) {
                    return _this.adapter.listItemAtIndexHasClass(index, _constants.cssClasses.LIST_ITEM_DISABLED_CLASS);
                }
            };
            _typeahead.handleKeydown(handleKeydownOpts, this.typeaheadState);
        }
    };
    /**
     * Click handler for the list.
     */ MDCListFoundation.prototype.handleClick = function(index, toggleCheckbox) {
        if (index === _constants.numbers.UNSET_INDEX) return;
        if (this.adapter.listItemAtIndexHasClass(index, _constants.cssClasses.LIST_ITEM_DISABLED_CLASS)) return;
        if (this.isSelectableList()) this.setSelectedIndexOnAction(index, toggleCheckbox);
        this.adapter.notifyAction(index);
    };
    /**
     * Focuses the next element on the list.
     */ MDCListFoundation.prototype.focusNextElement = function(index) {
        var count = this.adapter.getListItemCount();
        var nextIndex = index + 1;
        if (nextIndex >= count) {
            if (this.wrapFocus) nextIndex = 0;
            else // Return early because last item is already focused.
            return index;
        }
        this.focusItemAtIndex(nextIndex);
        return nextIndex;
    };
    /**
     * Focuses the previous element on the list.
     */ MDCListFoundation.prototype.focusPrevElement = function(index) {
        var prevIndex = index - 1;
        if (prevIndex < 0) {
            if (this.wrapFocus) prevIndex = this.adapter.getListItemCount() - 1;
            else // Return early because first item is already focused.
            return index;
        }
        this.focusItemAtIndex(prevIndex);
        return prevIndex;
    };
    MDCListFoundation.prototype.focusFirstElement = function() {
        this.focusItemAtIndex(0);
        return 0;
    };
    MDCListFoundation.prototype.focusLastElement = function() {
        var lastIndex = this.adapter.getListItemCount() - 1;
        this.focusItemAtIndex(lastIndex);
        return lastIndex;
    };
    MDCListFoundation.prototype.focusInitialElement = function() {
        var initialIndex = this.getFirstSelectedOrFocusedItemIndex();
        this.focusItemAtIndex(initialIndex);
        return initialIndex;
    };
    /**
     * @param itemIndex Index of the list item
     * @param isEnabled Sets the list item to enabled or disabled.
     */ MDCListFoundation.prototype.setEnabled = function(itemIndex, isEnabled) {
        if (!this.isIndexValid(itemIndex)) return;
        if (isEnabled) {
            this.adapter.removeClassForElementIndex(itemIndex, _constants.cssClasses.LIST_ITEM_DISABLED_CLASS);
            this.adapter.setAttributeForElementIndex(itemIndex, _constants.strings.ARIA_DISABLED, 'false');
        } else {
            this.adapter.addClassForElementIndex(itemIndex, _constants.cssClasses.LIST_ITEM_DISABLED_CLASS);
            this.adapter.setAttributeForElementIndex(itemIndex, _constants.strings.ARIA_DISABLED, 'true');
        }
    };
    MDCListFoundation.prototype.setSingleSelectionAtIndex = function(index, _a) {
        var _b = _a === void 0 ? {
        } : _a, forceUpdate = _b.forceUpdate;
        if (this.selectedIndex === index && !forceUpdate) return;
        var selectedClassName = _constants.cssClasses.LIST_ITEM_SELECTED_CLASS;
        if (this.useActivatedClass) selectedClassName = _constants.cssClasses.LIST_ITEM_ACTIVATED_CLASS;
        if (this.selectedIndex !== _constants.numbers.UNSET_INDEX) this.adapter.removeClassForElementIndex(this.selectedIndex, selectedClassName);
        this.setAriaForSingleSelectionAtIndex(index);
        this.setTabindexAtIndex(index);
        if (index !== _constants.numbers.UNSET_INDEX) this.adapter.addClassForElementIndex(index, selectedClassName);
        this.selectedIndex = index;
    };
    /**
     * Sets aria attribute for single selection at given index.
     */ MDCListFoundation.prototype.setAriaForSingleSelectionAtIndex = function(index) {
        // Detect the presence of aria-current and get the value only during list
        // initialization when it is in unset state.
        if (this.selectedIndex === _constants.numbers.UNSET_INDEX) this.ariaCurrentAttrValue = this.adapter.getAttributeForElementIndex(index, _constants.strings.ARIA_CURRENT);
        var isAriaCurrent = this.ariaCurrentAttrValue !== null;
        var ariaAttribute = isAriaCurrent ? _constants.strings.ARIA_CURRENT : _constants.strings.ARIA_SELECTED;
        if (this.selectedIndex !== _constants.numbers.UNSET_INDEX) this.adapter.setAttributeForElementIndex(this.selectedIndex, ariaAttribute, 'false');
        if (index !== _constants.numbers.UNSET_INDEX) {
            var ariaAttributeValue = isAriaCurrent ? this.ariaCurrentAttrValue : 'true';
            this.adapter.setAttributeForElementIndex(index, ariaAttribute, ariaAttributeValue);
        }
    };
    /**
     * Returns the attribute to use for indicating selection status.
     */ MDCListFoundation.prototype.getSelectionAttribute = function() {
        return this.useSelectedAttr ? _constants.strings.ARIA_SELECTED : _constants.strings.ARIA_CHECKED;
    };
    /**
     * Toggles radio at give index. Radio doesn't change the checked state if it
     * is already checked.
     */ MDCListFoundation.prototype.setRadioAtIndex = function(index) {
        var selectionAttribute = this.getSelectionAttribute();
        this.adapter.setCheckedCheckboxOrRadioAtIndex(index, true);
        if (this.selectedIndex !== _constants.numbers.UNSET_INDEX) this.adapter.setAttributeForElementIndex(this.selectedIndex, selectionAttribute, 'false');
        this.adapter.setAttributeForElementIndex(index, selectionAttribute, 'true');
        this.selectedIndex = index;
    };
    MDCListFoundation.prototype.setCheckboxAtIndex = function(index) {
        var selectionAttribute = this.getSelectionAttribute();
        for(var i = 0; i < this.adapter.getListItemCount(); i++){
            var isChecked = false;
            if (index.indexOf(i) >= 0) isChecked = true;
            this.adapter.setCheckedCheckboxOrRadioAtIndex(i, isChecked);
            this.adapter.setAttributeForElementIndex(i, selectionAttribute, isChecked ? 'true' : 'false');
        }
        this.selectedIndex = index;
    };
    MDCListFoundation.prototype.setTabindexAtIndex = function(index) {
        if (this.focusedItemIndex === _constants.numbers.UNSET_INDEX && index !== 0) // If some list item was selected set first list item's tabindex to -1.
        // Generally, tabindex is set to 0 on first list item of list that has no
        // preselected items.
        this.adapter.setAttributeForElementIndex(0, 'tabindex', '-1');
        else if (this.focusedItemIndex >= 0 && this.focusedItemIndex !== index) this.adapter.setAttributeForElementIndex(this.focusedItemIndex, 'tabindex', '-1');
        // Set the previous selection's tabindex to -1. We need this because
        // in selection menus that are not visible, programmatically setting an
        // option will not change focus but will change where tabindex should be 0.
        if (!(this.selectedIndex instanceof Array) && this.selectedIndex !== index) this.adapter.setAttributeForElementIndex(this.selectedIndex, 'tabindex', '-1');
        if (index !== _constants.numbers.UNSET_INDEX) this.adapter.setAttributeForElementIndex(index, 'tabindex', '0');
    };
    /**
     * @return Return true if it is single selectin list, checkbox list or radio
     *     list.
     */ MDCListFoundation.prototype.isSelectableList = function() {
        return this.isSingleSelectionList || this.isCheckboxList || this.isRadioList;
    };
    MDCListFoundation.prototype.setTabindexToFirstSelectedOrFocusedItem = function() {
        var targetIndex = this.getFirstSelectedOrFocusedItemIndex();
        this.setTabindexAtIndex(targetIndex);
    };
    MDCListFoundation.prototype.getFirstSelectedOrFocusedItemIndex = function() {
        // Action lists retain focus on the most recently focused item.
        if (!this.isSelectableList()) return Math.max(this.focusedItemIndex, 0);
        // Single-selection lists focus the selected item.
        if (typeof this.selectedIndex === 'number' && this.selectedIndex !== _constants.numbers.UNSET_INDEX) return this.selectedIndex;
        // Multiple-selection lists focus the first selected item.
        if (isNumberArray(this.selectedIndex) && this.selectedIndex.length > 0) return this.selectedIndex.reduce(function(minIndex, currentIndex) {
            return Math.min(minIndex, currentIndex);
        });
        // Selection lists without a selection focus the first item.
        return 0;
    };
    MDCListFoundation.prototype.isIndexValid = function(index) {
        var _this = this;
        if (index instanceof Array) {
            if (!this.isCheckboxList) throw new Error('MDCListFoundation: Array of index is only supported for checkbox based list');
            if (index.length === 0) return true;
            else return index.some(function(i) {
                return _this.isIndexInRange(i);
            });
        } else if (typeof index === 'number') {
            if (this.isCheckboxList) throw new Error("MDCListFoundation: Expected array of index for checkbox based list but got number: " + index);
            return this.isIndexInRange(index) || this.isSingleSelectionList && index === _constants.numbers.UNSET_INDEX;
        } else return false;
    };
    MDCListFoundation.prototype.isIndexInRange = function(index) {
        var listSize = this.adapter.getListItemCount();
        return index >= 0 && index < listSize;
    };
    /**
     * Sets selected index on user action, toggles checkbox / radio based on
     * toggleCheckbox value. User interaction should not toggle list item(s) when
     * disabled.
     */ MDCListFoundation.prototype.setSelectedIndexOnAction = function(index, toggleCheckbox) {
        if (toggleCheckbox === void 0) toggleCheckbox = true;
        if (this.isCheckboxList) this.toggleCheckboxAtIndex(index, toggleCheckbox);
        else this.setSelectedIndex(index);
    };
    MDCListFoundation.prototype.toggleCheckboxAtIndex = function(index, toggleCheckbox) {
        var selectionAttribute = this.getSelectionAttribute();
        var isChecked = this.adapter.isCheckboxCheckedAtIndex(index);
        if (toggleCheckbox) {
            isChecked = !isChecked;
            this.adapter.setCheckedCheckboxOrRadioAtIndex(index, isChecked);
        }
        this.adapter.setAttributeForElementIndex(index, selectionAttribute, isChecked ? 'true' : 'false');
        // If none of the checkbox items are selected and selectedIndex is not
        // initialized then provide a default value.
        var selectedIndexes = this.selectedIndex === _constants.numbers.UNSET_INDEX ? [] : this.selectedIndex.slice();
        if (isChecked) selectedIndexes.push(index);
        else selectedIndexes = selectedIndexes.filter(function(i) {
            return i !== index;
        });
        this.selectedIndex = selectedIndexes;
    };
    MDCListFoundation.prototype.focusItemAtIndex = function(index) {
        this.adapter.focusItemAtIndex(index);
        this.focusedItemIndex = index;
    };
    MDCListFoundation.prototype.toggleAll = function(currentlySelectedIndexes) {
        var count = this.adapter.getListItemCount();
        // If all items are selected, deselect everything.
        if (currentlySelectedIndexes.length === count) this.setCheckboxAtIndex([]);
        else {
            // Otherwise select all enabled options.
            var allIndexes = [];
            for(var i = 0; i < count; i++)if (!this.adapter.listItemAtIndexHasClass(i, _constants.cssClasses.LIST_ITEM_DISABLED_CLASS) || currentlySelectedIndexes.indexOf(i) > -1) allIndexes.push(i);
            this.setCheckboxAtIndex(allIndexes);
        }
    };
    /**
     * Given the next desired character from the user, adds it to the typeahead
     * buffer. Then, attempts to find the next option matching the buffer. Wraps
     * around if at the end of options.
     *
     * @param nextChar The next character to add to the prefix buffer.
     * @param startingIndex The index from which to start matching. Only relevant
     *     when starting a new match sequence. To start a new match sequence,
     *     clear the buffer using `clearTypeaheadBuffer`, or wait for the buffer
     *     to clear after a set interval defined in list foundation. Defaults to
     *     the currently focused index.
     * @return The index of the matched item, or -1 if no match.
     */ MDCListFoundation.prototype.typeaheadMatchItem = function(nextChar, startingIndex, skipFocus) {
        var _this = this;
        if (skipFocus === void 0) skipFocus = false;
        var opts = {
            focusItemAtIndex: function(index) {
                _this.focusItemAtIndex(index);
            },
            focusedItemIndex: startingIndex ? startingIndex : this.focusedItemIndex,
            nextChar: nextChar,
            sortedIndexByFirstChar: this.sortedIndexByFirstChar,
            skipFocus: skipFocus,
            isItemAtIndexDisabled: function(index) {
                return _this.adapter.listItemAtIndexHasClass(index, _constants.cssClasses.LIST_ITEM_DISABLED_CLASS);
            }
        };
        return _typeahead.matchItem(opts, this.typeaheadState);
    };
    /**
     * Initializes the MDCListTextAndIndex data structure by indexing the current
     * list items by primary text.
     *
     * @return The primary texts of all the list items sorted by first character.
     */ MDCListFoundation.prototype.typeaheadInitSortedIndex = function() {
        return _typeahead.initSortedIndex(this.adapter.getListItemCount(), this.adapter.getPrimaryTextAtIndex);
    };
    /**
     * Clears the typeahead buffer.
     */ MDCListFoundation.prototype.clearTypeaheadBuffer = function() {
        _typeahead.clearBuffer(this.typeaheadState);
    };
    return MDCListFoundation;
}(_foundation.MDCFoundation);
exports.default = MDCListFoundation1;

},{"tslib":"lRdW5","@material/base/foundation":"kC5Yw","@material/dom/keyboard":"5gaWj","./constants":"5wBVC","./events":"dsWXg","./typeahead":"7rMsD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5gaWj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "KEY", ()=>KEY
);
/**
 * normalizeKey returns the normalized string for a navigational action.
 */ parcelHelpers.export(exports, "normalizeKey", ()=>normalizeKey
);
/**
 * isNavigationEvent returns whether the event is a navigation event
 */ parcelHelpers.export(exports, "isNavigationEvent", ()=>isNavigationEvent
);
var KEY = {
    UNKNOWN: 'Unknown',
    BACKSPACE: 'Backspace',
    ENTER: 'Enter',
    SPACEBAR: 'Spacebar',
    PAGE_UP: 'PageUp',
    PAGE_DOWN: 'PageDown',
    END: 'End',
    HOME: 'Home',
    ARROW_LEFT: 'ArrowLeft',
    ARROW_UP: 'ArrowUp',
    ARROW_RIGHT: 'ArrowRight',
    ARROW_DOWN: 'ArrowDown',
    DELETE: 'Delete',
    ESCAPE: 'Escape',
    TAB: 'Tab'
};
var normalizedKeys = new Set();
// IE11 has no support for new Map with iterable so we need to initialize this
// by hand.
normalizedKeys.add(KEY.BACKSPACE);
normalizedKeys.add(KEY.ENTER);
normalizedKeys.add(KEY.SPACEBAR);
normalizedKeys.add(KEY.PAGE_UP);
normalizedKeys.add(KEY.PAGE_DOWN);
normalizedKeys.add(KEY.END);
normalizedKeys.add(KEY.HOME);
normalizedKeys.add(KEY.ARROW_LEFT);
normalizedKeys.add(KEY.ARROW_UP);
normalizedKeys.add(KEY.ARROW_RIGHT);
normalizedKeys.add(KEY.ARROW_DOWN);
normalizedKeys.add(KEY.DELETE);
normalizedKeys.add(KEY.ESCAPE);
normalizedKeys.add(KEY.TAB);
var KEY_CODE = {
    BACKSPACE: 8,
    ENTER: 13,
    SPACEBAR: 32,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    END: 35,
    HOME: 36,
    ARROW_LEFT: 37,
    ARROW_UP: 38,
    ARROW_RIGHT: 39,
    ARROW_DOWN: 40,
    DELETE: 46,
    ESCAPE: 27,
    TAB: 9
};
var mappedKeyCodes = new Map();
// IE11 has no support for new Map with iterable so we need to initialize this
// by hand.
mappedKeyCodes.set(KEY_CODE.BACKSPACE, KEY.BACKSPACE);
mappedKeyCodes.set(KEY_CODE.ENTER, KEY.ENTER);
mappedKeyCodes.set(KEY_CODE.SPACEBAR, KEY.SPACEBAR);
mappedKeyCodes.set(KEY_CODE.PAGE_UP, KEY.PAGE_UP);
mappedKeyCodes.set(KEY_CODE.PAGE_DOWN, KEY.PAGE_DOWN);
mappedKeyCodes.set(KEY_CODE.END, KEY.END);
mappedKeyCodes.set(KEY_CODE.HOME, KEY.HOME);
mappedKeyCodes.set(KEY_CODE.ARROW_LEFT, KEY.ARROW_LEFT);
mappedKeyCodes.set(KEY_CODE.ARROW_UP, KEY.ARROW_UP);
mappedKeyCodes.set(KEY_CODE.ARROW_RIGHT, KEY.ARROW_RIGHT);
mappedKeyCodes.set(KEY_CODE.ARROW_DOWN, KEY.ARROW_DOWN);
mappedKeyCodes.set(KEY_CODE.DELETE, KEY.DELETE);
mappedKeyCodes.set(KEY_CODE.ESCAPE, KEY.ESCAPE);
mappedKeyCodes.set(KEY_CODE.TAB, KEY.TAB);
var navigationKeys = new Set();
// IE11 has no support for new Set with iterable so we need to initialize this
// by hand.
navigationKeys.add(KEY.PAGE_UP);
navigationKeys.add(KEY.PAGE_DOWN);
navigationKeys.add(KEY.END);
navigationKeys.add(KEY.HOME);
navigationKeys.add(KEY.ARROW_LEFT);
navigationKeys.add(KEY.ARROW_UP);
navigationKeys.add(KEY.ARROW_RIGHT);
navigationKeys.add(KEY.ARROW_DOWN);
function normalizeKey(evt) {
    var key = evt.key;
    // If the event already has a normalized key, return it
    if (normalizedKeys.has(key)) return key;
    // tslint:disable-next-line:deprecation
    var mappedKey = mappedKeyCodes.get(evt.keyCode);
    if (mappedKey) return mappedKey;
    return KEY.UNKNOWN;
}
function isNavigationEvent(evt) {
    return navigationKeys.has(normalizeKey(evt));
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dsWXg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "preventDefaultEvent", ()=>preventDefaultEvent
);
/**
 * @license
 * Copyright 2020 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var ELEMENTS_KEY_ALLOWED_IN = [
    'input',
    'button',
    'textarea',
    'select'
];
var preventDefaultEvent = function(evt) {
    var target = evt.target;
    if (!target) return;
    var tagName = ("" + target.tagName).toLowerCase();
    if (ELEMENTS_KEY_ALLOWED_IN.indexOf(tagName) === -1) evt.preventDefault();
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7rMsD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Initializes a state object for typeahead. Use the same reference for calls to
 * typeahead functions.
 *
 * @return The current state of the typeahead process. Each state reference
 *     represents a typeahead instance as the reference is typically mutated
 *     in-place.
 */ parcelHelpers.export(exports, "initState", ()=>initState
);
/**
 * Initializes typeahead state by indexing the current list items by primary
 * text into the sortedIndexByFirstChar data structure.
 *
 * @param listItemCount numer of items in the list
 * @param getPrimaryTextByItemIndex function that returns the primary text at a
 *     given index
 *
 * @return Map that maps the first character of the primary text to the full
 *     list text and it's index
 */ parcelHelpers.export(exports, "initSortedIndex", ()=>initSortedIndex
);
/**
 * Given the next desired character from the user, it attempts to find the next
 * list option matching the buffer. Wraps around if at the end of options.
 *
 * @param opts Options and accessors
 *   - nextChar - the next character to match against items
 *   - sortedIndexByFirstChar - output of `initSortedIndex(...)`
 *   - focusedItemIndex - the index of the currently focused item
 *   - focusItemAtIndex - function that focuses a list item at given index
 *   - skipFocus - whether or not to focus the matched item
 *   - isItemAtIndexDisabled - function that determines whether an item at a
 *        given index is disabled
 * @param state The typeahead state instance. See `initState`.
 *
 * @return The index of the matched item, or -1 if no match.
 */ parcelHelpers.export(exports, "matchItem", ()=>matchItem
);
/**
 * Whether or not the given typeahead instaance state is currently typing.
 *
 * @param state The typeahead state instance. See `initState`.
 */ parcelHelpers.export(exports, "isTypingInProgress", ()=>isTypingInProgress
);
/**
 * Clears the typeahaed buffer so that it resets item matching to the first
 * character.
 *
 * @param state The typeahead state instance. See `initState`.
 */ parcelHelpers.export(exports, "clearBuffer", ()=>clearBuffer
);
/**
 * Given a keydown event, it calculates whether or not to automatically focus a
 * list item depending on what was typed mimicing the typeahead functionality of
 * a standard <select> element that is open.
 *
 * @param opts Options and accessors
 *   - event - the KeyboardEvent to handle and parse
 *   - sortedIndexByFirstChar - output of `initSortedIndex(...)`
 *   - focusedItemIndex - the index of the currently focused item
 *   - focusItemAtIndex - function that focuses a list item at given index
 *   - isItemAtFocusedIndexDisabled - whether or not the currently focused item
 *      is disabled
 *   - isTargetListItem - whether or not the event target is a list item
 * @param state The typeahead state instance. See `initState`.
 *
 * @returns index of the item matched by the keydown. -1 if not matched.
 */ parcelHelpers.export(exports, "handleKeydown", ()=>handleKeydown
);
/**
 * @license
 * Copyright 2020 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _keyboard = require("@material/dom/keyboard");
var _constants = require("./constants");
var _events = require("./events");
function initState() {
    var state = {
        bufferClearTimeout: 0,
        currentFirstChar: '',
        sortedIndexCursor: 0,
        typeaheadBuffer: ''
    };
    return state;
}
function initSortedIndex(listItemCount, getPrimaryTextByItemIndex) {
    var sortedIndexByFirstChar = new Map();
    // Aggregate item text to index mapping
    for(var i = 0; i < listItemCount; i++){
        var primaryText = getPrimaryTextByItemIndex(i).trim();
        if (!primaryText) continue;
        var firstChar = primaryText[0].toLowerCase();
        if (!sortedIndexByFirstChar.has(firstChar)) sortedIndexByFirstChar.set(firstChar, []);
        sortedIndexByFirstChar.get(firstChar).push({
            text: primaryText.toLowerCase(),
            index: i
        });
    }
    // Sort the mapping
    // TODO(b/157162694): Investigate replacing forEach with Map.values()
    sortedIndexByFirstChar.forEach(function(values) {
        values.sort(function(first, second) {
            return first.index - second.index;
        });
    });
    return sortedIndexByFirstChar;
}
function matchItem(opts, state) {
    var nextChar = opts.nextChar, focusItemAtIndex = opts.focusItemAtIndex, sortedIndexByFirstChar = opts.sortedIndexByFirstChar, focusedItemIndex = opts.focusedItemIndex, skipFocus = opts.skipFocus, isItemAtIndexDisabled = opts.isItemAtIndexDisabled;
    clearTimeout(state.bufferClearTimeout);
    state.bufferClearTimeout = setTimeout(function() {
        clearBuffer(state);
    }, _constants.numbers.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS);
    state.typeaheadBuffer = state.typeaheadBuffer + nextChar;
    var index;
    if (state.typeaheadBuffer.length === 1) index = matchFirstChar(sortedIndexByFirstChar, focusedItemIndex, isItemAtIndexDisabled, state);
    else index = matchAllChars(sortedIndexByFirstChar, isItemAtIndexDisabled, state);
    if (index !== -1 && !skipFocus) focusItemAtIndex(index);
    return index;
}
/**
 * Matches the user's single input character in the buffer to the
 * next option that begins with such character. Wraps around if at
 * end of options. Returns -1 if no match is found.
 */ function matchFirstChar(sortedIndexByFirstChar, focusedItemIndex, isItemAtIndexDisabled, state) {
    var firstChar = state.typeaheadBuffer[0];
    var itemsMatchingFirstChar = sortedIndexByFirstChar.get(firstChar);
    if (!itemsMatchingFirstChar) return -1;
    // Has the same firstChar been recently matched?
    // Also, did starting index remain the same between key presses?
    // If both hold true, simply increment index.
    if (firstChar === state.currentFirstChar && itemsMatchingFirstChar[state.sortedIndexCursor].index === focusedItemIndex) {
        state.sortedIndexCursor = (state.sortedIndexCursor + 1) % itemsMatchingFirstChar.length;
        var newIndex = itemsMatchingFirstChar[state.sortedIndexCursor].index;
        if (!isItemAtIndexDisabled(newIndex)) return newIndex;
    }
    // If we're here, it means one of the following happened:
    // - either firstChar or startingIndex has changed, invalidating the
    // cursor.
    // - The next item of typeahead is disabled, so we have to look further.
    state.currentFirstChar = firstChar;
    var newCursorPosition = -1;
    var cursorPosition;
    // Find the first non-disabled item as a fallback.
    for(cursorPosition = 0; cursorPosition < itemsMatchingFirstChar.length; cursorPosition++)if (!isItemAtIndexDisabled(itemsMatchingFirstChar[cursorPosition].index)) {
        newCursorPosition = cursorPosition;
        break;
    }
    // Advance cursor to first item matching the firstChar that is positioned
    // after starting item. Cursor is unchanged from fallback if there's no
    // such item.
    for(; cursorPosition < itemsMatchingFirstChar.length; cursorPosition++)if (itemsMatchingFirstChar[cursorPosition].index > focusedItemIndex && !isItemAtIndexDisabled(itemsMatchingFirstChar[cursorPosition].index)) {
        newCursorPosition = cursorPosition;
        break;
    }
    if (newCursorPosition !== -1) {
        state.sortedIndexCursor = newCursorPosition;
        return itemsMatchingFirstChar[state.sortedIndexCursor].index;
    }
    return -1;
}
/**
 * Attempts to find the next item that matches all of the typeahead buffer.
 * Wraps around if at end of options. Returns -1 if no match is found.
 */ function matchAllChars(sortedIndexByFirstChar, isItemAtIndexDisabled, state) {
    var firstChar = state.typeaheadBuffer[0];
    var itemsMatchingFirstChar = sortedIndexByFirstChar.get(firstChar);
    if (!itemsMatchingFirstChar) return -1;
    // Do nothing if text already matches
    var startingItem = itemsMatchingFirstChar[state.sortedIndexCursor];
    if (startingItem.text.lastIndexOf(state.typeaheadBuffer, 0) === 0 && !isItemAtIndexDisabled(startingItem.index)) return startingItem.index;
    // Find next item that matches completely; if no match, we'll eventually
    // loop around to same position
    var cursorPosition = (state.sortedIndexCursor + 1) % itemsMatchingFirstChar.length;
    var nextCursorPosition = -1;
    while(cursorPosition !== state.sortedIndexCursor){
        var currentItem = itemsMatchingFirstChar[cursorPosition];
        var matches = currentItem.text.lastIndexOf(state.typeaheadBuffer, 0) === 0;
        var isEnabled = !isItemAtIndexDisabled(currentItem.index);
        if (matches && isEnabled) {
            nextCursorPosition = cursorPosition;
            break;
        }
        cursorPosition = (cursorPosition + 1) % itemsMatchingFirstChar.length;
    }
    if (nextCursorPosition !== -1) {
        state.sortedIndexCursor = nextCursorPosition;
        return itemsMatchingFirstChar[state.sortedIndexCursor].index;
    }
    return -1;
}
function isTypingInProgress(state) {
    return state.typeaheadBuffer.length > 0;
}
function clearBuffer(state) {
    state.typeaheadBuffer = '';
}
function handleKeydown(opts, state) {
    var event = opts.event, isTargetListItem = opts.isTargetListItem, focusedItemIndex = opts.focusedItemIndex, focusItemAtIndex = opts.focusItemAtIndex, sortedIndexByFirstChar = opts.sortedIndexByFirstChar, isItemAtIndexDisabled = opts.isItemAtIndexDisabled;
    var isArrowLeft = _keyboard.normalizeKey(event) === 'ArrowLeft';
    var isArrowUp = _keyboard.normalizeKey(event) === 'ArrowUp';
    var isArrowRight = _keyboard.normalizeKey(event) === 'ArrowRight';
    var isArrowDown = _keyboard.normalizeKey(event) === 'ArrowDown';
    var isHome = _keyboard.normalizeKey(event) === 'Home';
    var isEnd = _keyboard.normalizeKey(event) === 'End';
    var isEnter = _keyboard.normalizeKey(event) === 'Enter';
    var isSpace = _keyboard.normalizeKey(event) === 'Spacebar';
    if (event.ctrlKey || event.metaKey || isArrowLeft || isArrowUp || isArrowRight || isArrowDown || isHome || isEnd || isEnter) return -1;
    var isCharacterKey = !isSpace && event.key.length === 1;
    if (isCharacterKey) {
        _events.preventDefaultEvent(event);
        var matchItemOpts = {
            focusItemAtIndex: focusItemAtIndex,
            focusedItemIndex: focusedItemIndex,
            nextChar: event.key.toLowerCase(),
            sortedIndexByFirstChar: sortedIndexByFirstChar,
            skipFocus: false,
            isItemAtIndexDisabled: isItemAtIndexDisabled
        };
        return matchItem(matchItemOpts, state);
    }
    if (!isSpace) return -1;
    if (isTargetListItem) _events.preventDefaultEvent(event);
    var typeaheadOnListItem = isTargetListItem && isTypingInProgress(state);
    if (typeaheadOnListItem) {
        var matchItemOpts = {
            focusItemAtIndex: focusItemAtIndex,
            focusedItemIndex: focusedItemIndex,
            nextChar: ' ',
            sortedIndexByFirstChar: sortedIndexByFirstChar,
            skipFocus: false,
            isItemAtIndexDisabled: isItemAtIndexDisabled
        };
        // space participates in typeahead matching if in rapid typing mode
        return matchItem(matchItemOpts, state);
    }
    return -1;
}

},{"@material/dom/keyboard":"5gaWj","./constants":"5wBVC","./events":"dsWXg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dBuEB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCMenuSurface", ()=>MDCMenuSurface1
);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _component = require("@material/base/component");
var _constants = require("./constants");
var _foundation = require("./foundation");
var _util = require("@material/animation/util");
var MDCMenuSurface1 = function(_super) {
    _tslib.__extends(MDCMenuSurface, _super);
    function MDCMenuSurface() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCMenuSurface.attachTo = function(root) {
        return new MDCMenuSurface(root);
    };
    MDCMenuSurface.prototype.initialSyncWithDOM = function() {
        var _this = this;
        var parentEl = this.root.parentElement;
        this.anchorElement = parentEl && parentEl.classList.contains(_constants.cssClasses.ANCHOR) ? parentEl : null;
        if (this.root.classList.contains(_constants.cssClasses.FIXED)) this.setFixedPosition(true);
        this.handleKeydown = function(event) {
            _this.foundation.handleKeydown(event);
        };
        this.handleBodyClick = function(event) {
            _this.foundation.handleBodyClick(event);
        };
        // capture so that no race between handleBodyClick and quickOpen when
        // menusurface opened on button click which registers this listener
        this.registerBodyClickListener = function() {
            document.body.addEventListener('click', _this.handleBodyClick, {
                capture: true
            });
        };
        this.deregisterBodyClickListener = function() {
            document.body.removeEventListener('click', _this.handleBodyClick, {
                capture: true
            });
        };
        this.listen('keydown', this.handleKeydown);
        this.listen(_constants.strings.OPENED_EVENT, this.registerBodyClickListener);
        this.listen(_constants.strings.CLOSED_EVENT, this.deregisterBodyClickListener);
    };
    MDCMenuSurface.prototype.destroy = function() {
        this.unlisten('keydown', this.handleKeydown);
        this.unlisten(_constants.strings.OPENED_EVENT, this.registerBodyClickListener);
        this.unlisten(_constants.strings.CLOSED_EVENT, this.deregisterBodyClickListener);
        _super.prototype.destroy.call(this);
    };
    MDCMenuSurface.prototype.isOpen = function() {
        return this.foundation.isOpen();
    };
    MDCMenuSurface.prototype.open = function() {
        this.foundation.open();
    };
    MDCMenuSurface.prototype.close = function(skipRestoreFocus) {
        if (skipRestoreFocus === void 0) skipRestoreFocus = false;
        this.foundation.close(skipRestoreFocus);
    };
    Object.defineProperty(MDCMenuSurface.prototype, "quickOpen", {
        set: function(quickOpen) {
            this.foundation.setQuickOpen(quickOpen);
        },
        enumerable: false,
        configurable: true
    });
    /** Sets the foundation to use page offsets for an positioning when the menu is hoisted to the body. */ MDCMenuSurface.prototype.setIsHoisted = function(isHoisted) {
        this.foundation.setIsHoisted(isHoisted);
    };
    /** Sets the element that the menu-surface is anchored to. */ MDCMenuSurface.prototype.setMenuSurfaceAnchorElement = function(element) {
        this.anchorElement = element;
    };
    /** Sets the menu-surface to position: fixed. */ MDCMenuSurface.prototype.setFixedPosition = function(isFixed) {
        if (isFixed) this.root.classList.add(_constants.cssClasses.FIXED);
        else this.root.classList.remove(_constants.cssClasses.FIXED);
        this.foundation.setFixedPosition(isFixed);
    };
    /** Sets the absolute x/y position to position based on. Requires the menu to be hoisted. */ MDCMenuSurface.prototype.setAbsolutePosition = function(x, y) {
        this.foundation.setAbsolutePosition(x, y);
        this.setIsHoisted(true);
    };
    /**
     * @param corner Default anchor corner alignment of top-left surface corner.
     */ MDCMenuSurface.prototype.setAnchorCorner = function(corner) {
        this.foundation.setAnchorCorner(corner);
    };
    MDCMenuSurface.prototype.setAnchorMargin = function(margin) {
        this.foundation.setAnchorMargin(margin);
    };
    MDCMenuSurface.prototype.getDefaultFoundation = function() {
        var _this = this;
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        var adapter = {
            addClass: function(className) {
                return _this.root.classList.add(className);
            },
            removeClass: function(className) {
                return _this.root.classList.remove(className);
            },
            hasClass: function(className) {
                return _this.root.classList.contains(className);
            },
            hasAnchor: function() {
                return !!_this.anchorElement;
            },
            notifyClose: function() {
                return _this.emit(_foundation.MDCMenuSurfaceFoundation.strings.CLOSED_EVENT, {
                });
            },
            notifyClosing: function() {
                _this.emit(_foundation.MDCMenuSurfaceFoundation.strings.CLOSING_EVENT, {
                });
            },
            notifyOpen: function() {
                return _this.emit(_foundation.MDCMenuSurfaceFoundation.strings.OPENED_EVENT, {
                });
            },
            isElementInContainer: function(el) {
                return _this.root.contains(el);
            },
            isRtl: function() {
                return getComputedStyle(_this.root).getPropertyValue('direction') === 'rtl';
            },
            setTransformOrigin: function(origin) {
                var propertyName = _util.getCorrectPropertyName(window, 'transform') + "-origin";
                _this.root.style.setProperty(propertyName, origin);
            },
            isFocused: function() {
                return document.activeElement === _this.root;
            },
            saveFocus: function() {
                _this.previousFocus = document.activeElement;
            },
            restoreFocus: function() {
                if (_this.root.contains(document.activeElement)) {
                    if (_this.previousFocus && _this.previousFocus.focus) _this.previousFocus.focus();
                }
            },
            getInnerDimensions: function() {
                return {
                    width: _this.root.offsetWidth,
                    height: _this.root.offsetHeight
                };
            },
            getAnchorDimensions: function() {
                return _this.anchorElement ? _this.anchorElement.getBoundingClientRect() : null;
            },
            getWindowDimensions: function() {
                return {
                    width: window.innerWidth,
                    height: window.innerHeight
                };
            },
            getBodyDimensions: function() {
                return {
                    width: document.body.clientWidth,
                    height: document.body.clientHeight
                };
            },
            getWindowScroll: function() {
                return {
                    x: window.pageXOffset,
                    y: window.pageYOffset
                };
            },
            setPosition: function(position) {
                var rootHTML = _this.root;
                rootHTML.style.left = 'left' in position ? position.left + "px" : '';
                rootHTML.style.right = 'right' in position ? position.right + "px" : '';
                rootHTML.style.top = 'top' in position ? position.top + "px" : '';
                rootHTML.style.bottom = 'bottom' in position ? position.bottom + "px" : '';
            },
            setMaxHeight: function(height) {
                _this.root.style.maxHeight = height;
            }
        };
        // tslint:enable:object-literal-sort-keys
        return new _foundation.MDCMenuSurfaceFoundation(adapter);
    };
    return MDCMenuSurface;
}(_component.MDCComponent);

},{"tslib":"lRdW5","@material/base/component":"jLptS","./constants":"3BYDk","./foundation":"2cKnt","@material/animation/util":"9bCbd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2cKnt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCMenuSurfaceFoundation", ()=>MDCMenuSurfaceFoundation1
);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _foundation = require("@material/base/foundation");
var _constants = require("./constants");
var MDCMenuSurfaceFoundation1 = function(_super) {
    _tslib.__extends(MDCMenuSurfaceFoundation, _super);
    function MDCMenuSurfaceFoundation(adapter) {
        var _this = _super.call(this, _tslib.__assign(_tslib.__assign({
        }, MDCMenuSurfaceFoundation.defaultAdapter), adapter)) || this;
        _this.isSurfaceOpen = false;
        _this.isQuickOpen = false;
        _this.isHoistedElement = false;
        _this.isFixedPosition = false;
        _this.isHorizontallyCenteredOnViewport = false;
        _this.maxHeight = 0;
        _this.openAnimationEndTimerId = 0;
        _this.closeAnimationEndTimerId = 0;
        _this.animationRequestId = 0;
        _this.anchorCorner = _constants.Corner.TOP_START;
        /**
         * Corner of the menu surface to which menu surface is attached to anchor.
         *
         *  Anchor corner --->+----------+
         *                    |  ANCHOR  |
         *                    +----------+
         *  Origin corner --->+--------------+
         *                    |              |
         *                    |              |
         *                    | MENU SURFACE |
         *                    |              |
         *                    |              |
         *                    +--------------+
         */ _this.originCorner = _constants.Corner.TOP_START;
        _this.anchorMargin = {
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
        };
        _this.position = {
            x: 0,
            y: 0
        };
        return _this;
    }
    Object.defineProperty(MDCMenuSurfaceFoundation, "cssClasses", {
        get: function() {
            return _constants.cssClasses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCMenuSurfaceFoundation, "strings", {
        get: function() {
            return _constants.strings;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCMenuSurfaceFoundation, "numbers", {
        get: function() {
            return _constants.numbers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCMenuSurfaceFoundation, "Corner", {
        get: function() {
            return _constants.Corner;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCMenuSurfaceFoundation, "defaultAdapter", {
        /**
         * @see {@link MDCMenuSurfaceAdapter} for typing information on parameters and return types.
         */ get: function() {
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            return {
                addClass: function() {
                    return undefined;
                },
                removeClass: function() {
                    return undefined;
                },
                hasClass: function() {
                    return false;
                },
                hasAnchor: function() {
                    return false;
                },
                isElementInContainer: function() {
                    return false;
                },
                isFocused: function() {
                    return false;
                },
                isRtl: function() {
                    return false;
                },
                getInnerDimensions: function() {
                    return {
                        height: 0,
                        width: 0
                    };
                },
                getAnchorDimensions: function() {
                    return null;
                },
                getWindowDimensions: function() {
                    return {
                        height: 0,
                        width: 0
                    };
                },
                getBodyDimensions: function() {
                    return {
                        height: 0,
                        width: 0
                    };
                },
                getWindowScroll: function() {
                    return {
                        x: 0,
                        y: 0
                    };
                },
                setPosition: function() {
                    return undefined;
                },
                setMaxHeight: function() {
                    return undefined;
                },
                setTransformOrigin: function() {
                    return undefined;
                },
                saveFocus: function() {
                    return undefined;
                },
                restoreFocus: function() {
                    return undefined;
                },
                notifyClose: function() {
                    return undefined;
                },
                notifyOpen: function() {
                    return undefined;
                },
                notifyClosing: function() {
                    return undefined;
                }
            };
        // tslint:enable:object-literal-sort-keys
        },
        enumerable: false,
        configurable: true
    });
    MDCMenuSurfaceFoundation.prototype.init = function() {
        var _a = MDCMenuSurfaceFoundation.cssClasses, ROOT = _a.ROOT, OPEN = _a.OPEN;
        if (!this.adapter.hasClass(ROOT)) throw new Error(ROOT + " class required in root element.");
        if (this.adapter.hasClass(OPEN)) this.isSurfaceOpen = true;
    };
    MDCMenuSurfaceFoundation.prototype.destroy = function() {
        clearTimeout(this.openAnimationEndTimerId);
        clearTimeout(this.closeAnimationEndTimerId);
        // Cancel any currently running animations.
        cancelAnimationFrame(this.animationRequestId);
    };
    /**
     * @param corner Default anchor corner alignment of top-left menu surface
     *     corner.
     */ MDCMenuSurfaceFoundation.prototype.setAnchorCorner = function(corner) {
        this.anchorCorner = corner;
    };
    /**
     * Flip menu corner horizontally.
     */ MDCMenuSurfaceFoundation.prototype.flipCornerHorizontally = function() {
        this.originCorner = this.originCorner ^ _constants.CornerBit.RIGHT;
    };
    /**
     * @param margin Set of margin values from anchor.
     */ MDCMenuSurfaceFoundation.prototype.setAnchorMargin = function(margin) {
        this.anchorMargin.top = margin.top || 0;
        this.anchorMargin.right = margin.right || 0;
        this.anchorMargin.bottom = margin.bottom || 0;
        this.anchorMargin.left = margin.left || 0;
    };
    /** Used to indicate if the menu-surface is hoisted to the body. */ MDCMenuSurfaceFoundation.prototype.setIsHoisted = function(isHoisted) {
        this.isHoistedElement = isHoisted;
    };
    /**
     * Used to set the menu-surface calculations based on a fixed position menu.
     */ MDCMenuSurfaceFoundation.prototype.setFixedPosition = function(isFixedPosition) {
        this.isFixedPosition = isFixedPosition;
    };
    /**
     * @return Returns true if menu is in fixed (`position: fixed`) position.
     */ MDCMenuSurfaceFoundation.prototype.isFixed = function() {
        return this.isFixedPosition;
    };
    /** Sets the menu-surface position on the page. */ MDCMenuSurfaceFoundation.prototype.setAbsolutePosition = function(x, y) {
        this.position.x = this.isFinite(x) ? x : 0;
        this.position.y = this.isFinite(y) ? y : 0;
    };
    /** Sets whether menu-surface should be horizontally centered to viewport. */ MDCMenuSurfaceFoundation.prototype.setIsHorizontallyCenteredOnViewport = function(isCentered) {
        this.isHorizontallyCenteredOnViewport = isCentered;
    };
    MDCMenuSurfaceFoundation.prototype.setQuickOpen = function(quickOpen) {
        this.isQuickOpen = quickOpen;
    };
    /**
     * Sets maximum menu-surface height on open.
     * @param maxHeight The desired max-height. Set to 0 (default) to
     *     automatically calculate max height based on available viewport space.
     */ MDCMenuSurfaceFoundation.prototype.setMaxHeight = function(maxHeight) {
        this.maxHeight = maxHeight;
    };
    MDCMenuSurfaceFoundation.prototype.isOpen = function() {
        return this.isSurfaceOpen;
    };
    /**
     * Open the menu surface.
     */ MDCMenuSurfaceFoundation.prototype.open = function() {
        var _this = this;
        if (this.isSurfaceOpen) return;
        this.adapter.saveFocus();
        if (this.isQuickOpen) {
            this.isSurfaceOpen = true;
            this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);
            this.dimensions = this.adapter.getInnerDimensions();
            this.autoposition();
            this.adapter.notifyOpen();
        } else {
            this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_OPEN);
            this.animationRequestId = requestAnimationFrame(function() {
                _this.dimensions = _this.adapter.getInnerDimensions();
                _this.autoposition();
                _this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);
                _this.openAnimationEndTimerId = setTimeout(function() {
                    _this.openAnimationEndTimerId = 0;
                    _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_OPEN);
                    _this.adapter.notifyOpen();
                }, _constants.numbers.TRANSITION_OPEN_DURATION);
            });
            this.isSurfaceOpen = true;
        }
    };
    /**
     * Closes the menu surface.
     */ MDCMenuSurfaceFoundation.prototype.close = function(skipRestoreFocus) {
        var _this = this;
        if (skipRestoreFocus === void 0) skipRestoreFocus = false;
        if (!this.isSurfaceOpen) return;
        this.adapter.notifyClosing();
        if (this.isQuickOpen) {
            this.isSurfaceOpen = false;
            if (!skipRestoreFocus) this.maybeRestoreFocus();
            this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);
            this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.IS_OPEN_BELOW);
            this.adapter.notifyClose();
            return;
        }
        this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_CLOSED);
        requestAnimationFrame(function() {
            _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);
            _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.IS_OPEN_BELOW);
            _this.closeAnimationEndTimerId = setTimeout(function() {
                _this.closeAnimationEndTimerId = 0;
                _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_CLOSED);
                _this.adapter.notifyClose();
            }, _constants.numbers.TRANSITION_CLOSE_DURATION);
        });
        this.isSurfaceOpen = false;
        if (!skipRestoreFocus) this.maybeRestoreFocus();
    };
    /** Handle clicks and close if not within menu-surface element. */ MDCMenuSurfaceFoundation.prototype.handleBodyClick = function(evt) {
        var el = evt.target;
        if (this.adapter.isElementInContainer(el)) return;
        this.close();
    };
    /** Handle keys that close the surface. */ MDCMenuSurfaceFoundation.prototype.handleKeydown = function(evt) {
        var keyCode = evt.keyCode, key = evt.key;
        var isEscape = key === 'Escape' || keyCode === 27;
        if (isEscape) this.close();
    };
    MDCMenuSurfaceFoundation.prototype.autoposition = function() {
        var _a;
        // Compute measurements for autoposition methods reuse.
        this.measurements = this.getAutoLayoutmeasurements();
        var corner = this.getoriginCorner();
        var maxMenuSurfaceHeight = this.getMenuSurfaceMaxHeight(corner);
        var verticalAlignment = this.hasBit(corner, _constants.CornerBit.BOTTOM) ? 'bottom' : 'top';
        var horizontalAlignment = this.hasBit(corner, _constants.CornerBit.RIGHT) ? 'right' : 'left';
        var horizontalOffset = this.getHorizontalOriginOffset(corner);
        var verticalOffset = this.getVerticalOriginOffset(corner);
        var _b = this.measurements, anchorSize = _b.anchorSize, surfaceSize = _b.surfaceSize;
        var position = (_a = {
        }, _a[horizontalAlignment] = horizontalOffset, _a[verticalAlignment] = verticalOffset, _a);
        // Center align when anchor width is comparable or greater than menu
        // surface, otherwise keep corner.
        if (anchorSize.width / surfaceSize.width > _constants.numbers.ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO) horizontalAlignment = 'center';
        // If the menu-surface has been hoisted to the body, it's no longer relative
        // to the anchor element
        if (this.isHoistedElement || this.isFixedPosition) this.adjustPositionForHoistedElement(position);
        this.adapter.setTransformOrigin(horizontalAlignment + " " + verticalAlignment);
        this.adapter.setPosition(position);
        this.adapter.setMaxHeight(maxMenuSurfaceHeight ? maxMenuSurfaceHeight + 'px' : '');
        // If it is opened from the top then add is-open-below class
        if (!this.hasBit(corner, _constants.CornerBit.BOTTOM)) this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.IS_OPEN_BELOW);
    };
    /**
     * @return Measurements used to position menu surface popup.
     */ MDCMenuSurfaceFoundation.prototype.getAutoLayoutmeasurements = function() {
        var anchorRect = this.adapter.getAnchorDimensions();
        var bodySize = this.adapter.getBodyDimensions();
        var viewportSize = this.adapter.getWindowDimensions();
        var windowScroll = this.adapter.getWindowScroll();
        if (!anchorRect) // tslint:disable:object-literal-sort-keys Positional properties are more readable when they're grouped together
        anchorRect = {
            top: this.position.y,
            right: this.position.x,
            bottom: this.position.y,
            left: this.position.x,
            width: 0,
            height: 0
        };
        return {
            anchorSize: anchorRect,
            bodySize: bodySize,
            surfaceSize: this.dimensions,
            viewportDistance: {
                // tslint:disable:object-literal-sort-keys Positional properties are more readable when they're grouped together
                top: anchorRect.top,
                right: viewportSize.width - anchorRect.right,
                bottom: viewportSize.height - anchorRect.bottom,
                left: anchorRect.left
            },
            viewportSize: viewportSize,
            windowScroll: windowScroll
        };
    };
    /**
     * Computes the corner of the anchor from which to animate and position the
     * menu surface.
     *
     * Only LEFT or RIGHT bit is used to position the menu surface ignoring RTL
     * context. E.g., menu surface will be positioned from right side on TOP_END.
     */ MDCMenuSurfaceFoundation.prototype.getoriginCorner = function() {
        var corner = this.originCorner;
        var _a = this.measurements, viewportDistance = _a.viewportDistance, anchorSize = _a.anchorSize, surfaceSize = _a.surfaceSize;
        var MARGIN_TO_EDGE = MDCMenuSurfaceFoundation.numbers.MARGIN_TO_EDGE;
        var isAnchoredToBottom = this.hasBit(this.anchorCorner, _constants.CornerBit.BOTTOM);
        var availableTop;
        var availableBottom;
        if (isAnchoredToBottom) {
            availableTop = viewportDistance.top - MARGIN_TO_EDGE + this.anchorMargin.bottom;
            availableBottom = viewportDistance.bottom - MARGIN_TO_EDGE - this.anchorMargin.bottom;
        } else {
            availableTop = viewportDistance.top - MARGIN_TO_EDGE + this.anchorMargin.top;
            availableBottom = viewportDistance.bottom - MARGIN_TO_EDGE + anchorSize.height - this.anchorMargin.top;
        }
        var isAvailableBottom = availableBottom - surfaceSize.height > 0;
        if (!isAvailableBottom && availableTop > availableBottom) // Attach bottom side of surface to the anchor.
        corner = this.setBit(corner, _constants.CornerBit.BOTTOM);
        var isRtl = this.adapter.isRtl();
        var isFlipRtl = this.hasBit(this.anchorCorner, _constants.CornerBit.FLIP_RTL);
        var hasRightBit = this.hasBit(this.anchorCorner, _constants.CornerBit.RIGHT) || this.hasBit(corner, _constants.CornerBit.RIGHT);
        // Whether surface attached to right side of anchor element.
        var isAnchoredToRight = false;
        // Anchored to start
        if (isRtl && isFlipRtl) isAnchoredToRight = !hasRightBit;
        else // Anchored to right
        isAnchoredToRight = hasRightBit;
        var availableLeft;
        var availableRight;
        if (isAnchoredToRight) {
            availableLeft = viewportDistance.left + anchorSize.width + this.anchorMargin.right;
            availableRight = viewportDistance.right - this.anchorMargin.right;
        } else {
            availableLeft = viewportDistance.left + this.anchorMargin.left;
            availableRight = viewportDistance.right + anchorSize.width - this.anchorMargin.left;
        }
        var isAvailableLeft = availableLeft - surfaceSize.width > 0;
        var isAvailableRight = availableRight - surfaceSize.width > 0;
        var isOriginCornerAlignedToEnd = this.hasBit(corner, _constants.CornerBit.FLIP_RTL) && this.hasBit(corner, _constants.CornerBit.RIGHT);
        if (isAvailableRight && isOriginCornerAlignedToEnd && isRtl || !isAvailableLeft && isOriginCornerAlignedToEnd) // Attach left side of surface to the anchor.
        corner = this.unsetBit(corner, _constants.CornerBit.RIGHT);
        else if (isAvailableLeft && isAnchoredToRight && isRtl || isAvailableLeft && !isAnchoredToRight && hasRightBit || !isAvailableRight && availableLeft >= availableRight) // Attach right side of surface to the anchor.
        corner = this.setBit(corner, _constants.CornerBit.RIGHT);
        return corner;
    };
    /**
     * @param corner Origin corner of the menu surface.
     * @return Maximum height of the menu surface, based on available space. 0
     *     indicates should not be set.
     */ MDCMenuSurfaceFoundation.prototype.getMenuSurfaceMaxHeight = function(corner) {
        if (this.maxHeight > 0) return this.maxHeight;
        var viewportDistance = this.measurements.viewportDistance;
        var maxHeight = 0;
        var isBottomAligned = this.hasBit(corner, _constants.CornerBit.BOTTOM);
        var isBottomAnchored = this.hasBit(this.anchorCorner, _constants.CornerBit.BOTTOM);
        var MARGIN_TO_EDGE = MDCMenuSurfaceFoundation.numbers.MARGIN_TO_EDGE;
        // When maximum height is not specified, it is handled from CSS.
        if (isBottomAligned) {
            maxHeight = viewportDistance.top + this.anchorMargin.top - MARGIN_TO_EDGE;
            if (!isBottomAnchored) maxHeight += this.measurements.anchorSize.height;
        } else {
            maxHeight = viewportDistance.bottom - this.anchorMargin.bottom + this.measurements.anchorSize.height - MARGIN_TO_EDGE;
            if (isBottomAnchored) maxHeight -= this.measurements.anchorSize.height;
        }
        return maxHeight;
    };
    /**
     * @param corner Origin corner of the menu surface.
     * @return Horizontal offset of menu surface origin corner from corresponding
     *     anchor corner.
     */ MDCMenuSurfaceFoundation.prototype.getHorizontalOriginOffset = function(corner) {
        var anchorSize = this.measurements.anchorSize;
        // isRightAligned corresponds to using the 'right' property on the surface.
        var isRightAligned = this.hasBit(corner, _constants.CornerBit.RIGHT);
        var avoidHorizontalOverlap = this.hasBit(this.anchorCorner, _constants.CornerBit.RIGHT);
        if (isRightAligned) {
            var rightOffset = avoidHorizontalOverlap ? anchorSize.width - this.anchorMargin.left : this.anchorMargin.right;
            // For hoisted or fixed elements, adjust the offset by the difference
            // between viewport width and body width so when we calculate the right
            // value (`adjustPositionForHoistedElement`) based on the element
            // position, the right property is correct.
            if (this.isHoistedElement || this.isFixedPosition) return rightOffset - (this.measurements.viewportSize.width - this.measurements.bodySize.width);
            return rightOffset;
        }
        return avoidHorizontalOverlap ? anchorSize.width - this.anchorMargin.right : this.anchorMargin.left;
    };
    /**
     * @param corner Origin corner of the menu surface.
     * @return Vertical offset of menu surface origin corner from corresponding
     *     anchor corner.
     */ MDCMenuSurfaceFoundation.prototype.getVerticalOriginOffset = function(corner) {
        var anchorSize = this.measurements.anchorSize;
        var isBottomAligned = this.hasBit(corner, _constants.CornerBit.BOTTOM);
        var avoidVerticalOverlap = this.hasBit(this.anchorCorner, _constants.CornerBit.BOTTOM);
        var y = 0;
        if (isBottomAligned) y = avoidVerticalOverlap ? anchorSize.height - this.anchorMargin.top : -this.anchorMargin.bottom;
        else y = avoidVerticalOverlap ? anchorSize.height + this.anchorMargin.bottom : this.anchorMargin.top;
        return y;
    };
    /**
     * Calculates the offsets for positioning the menu-surface when the
     * menu-surface has been hoisted to the body.
     */ MDCMenuSurfaceFoundation.prototype.adjustPositionForHoistedElement = function(position) {
        var e_1, _a;
        var _b = this.measurements, windowScroll = _b.windowScroll, viewportDistance = _b.viewportDistance, surfaceSize = _b.surfaceSize, viewportSize = _b.viewportSize;
        var props = Object.keys(position);
        try {
            for(var props_1 = _tslib.__values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()){
                var prop = props_1_1.value;
                var value = position[prop] || 0;
                if (this.isHorizontallyCenteredOnViewport && (prop === 'left' || prop === 'right')) {
                    position[prop] = (viewportSize.width - surfaceSize.width) / 2;
                    continue;
                }
                // Hoisted surfaces need to have the anchor elements location on the page
                // added to the position properties for proper alignment on the body.
                value += viewportDistance[prop];
                // Surfaces that are absolutely positioned need to have additional
                // calculations for scroll and bottom positioning.
                if (!this.isFixedPosition) {
                    if (prop === 'top') value += windowScroll.y;
                    else if (prop === 'bottom') value -= windowScroll.y;
                    else if (prop === 'left') value += windowScroll.x;
                    else value -= windowScroll.x;
                }
                position[prop] = value;
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
    };
    /**
     * The last focused element when the menu surface was opened should regain
     * focus, if the user is focused on or within the menu surface when it is
     * closed.
     */ MDCMenuSurfaceFoundation.prototype.maybeRestoreFocus = function() {
        var _this = this;
        var isRootFocused = this.adapter.isFocused();
        var childHasFocus = document.activeElement && this.adapter.isElementInContainer(document.activeElement);
        if (isRootFocused || childHasFocus) // Wait before restoring focus when closing the menu surface. This is
        // important because if a touch event triggered the menu close, and the
        // subsequent mouse event occurs after focus is restored, then the
        // restored focus would be lost.
        setTimeout(function() {
            _this.adapter.restoreFocus();
        }, _constants.numbers.TOUCH_EVENT_WAIT_MS);
    };
    MDCMenuSurfaceFoundation.prototype.hasBit = function(corner, bit) {
        return Boolean(corner & bit); // tslint:disable-line:no-bitwise
    };
    MDCMenuSurfaceFoundation.prototype.setBit = function(corner, bit) {
        return corner | bit; // tslint:disable-line:no-bitwise
    };
    MDCMenuSurfaceFoundation.prototype.unsetBit = function(corner, bit) {
        return corner ^ bit;
    };
    /**
     * isFinite that doesn't force conversion to number type.
     * Equivalent to Number.isFinite in ES2015, which is not supported in IE.
     */ MDCMenuSurfaceFoundation.prototype.isFinite = function(num) {
        return typeof num === 'number' && isFinite(num);
    };
    return MDCMenuSurfaceFoundation;
}(_foundation.MDCFoundation);
exports.default = MDCMenuSurfaceFoundation1;

},{"tslib":"lRdW5","@material/base/foundation":"kC5Yw","./constants":"3BYDk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j2pZI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cssClasses", ()=>cssClasses
);
parcelHelpers.export(exports, "strings", ()=>strings
);
parcelHelpers.export(exports, "numbers", ()=>numbers
);
parcelHelpers.export(exports, "DefaultFocusState", ()=>DefaultFocusState1
);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var cssClasses = {
    MENU_SELECTED_LIST_ITEM: 'mdc-menu-item--selected',
    MENU_SELECTION_GROUP: 'mdc-menu__selection-group',
    ROOT: 'mdc-menu'
};
var strings = {
    ARIA_CHECKED_ATTR: 'aria-checked',
    ARIA_DISABLED_ATTR: 'aria-disabled',
    CHECKBOX_SELECTOR: 'input[type="checkbox"]',
    LIST_SELECTOR: '.mdc-list,.mdc-deprecated-list',
    SELECTED_EVENT: 'MDCMenu:selected',
    SKIP_RESTORE_FOCUS: 'data-menu-item-skip-restore-focus'
};
var numbers = {
    FOCUS_ROOT_INDEX: -1
};
var DefaultFocusState1;
(function(DefaultFocusState) {
    DefaultFocusState[DefaultFocusState["NONE"] = 0] = "NONE";
    DefaultFocusState[DefaultFocusState["LIST_ROOT"] = 1] = "LIST_ROOT";
    DefaultFocusState[DefaultFocusState["FIRST_ITEM"] = 2] = "FIRST_ITEM";
    DefaultFocusState[DefaultFocusState["LAST_ITEM"] = 3] = "LAST_ITEM";
})(DefaultFocusState1 || (DefaultFocusState1 = {
}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b3DBQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCMenuFoundation", ()=>MDCMenuFoundation1
);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _foundation = require("@material/base/foundation");
var _constants = require("@material/list/constants");
var _foundation1 = require("@material/menu-surface/foundation");
var _constants1 = require("./constants");
var MDCMenuFoundation1 = function(_super) {
    _tslib.__extends(MDCMenuFoundation, _super);
    function MDCMenuFoundation(adapter) {
        var _this = _super.call(this, _tslib.__assign(_tslib.__assign({
        }, MDCMenuFoundation.defaultAdapter), adapter)) || this;
        _this.closeAnimationEndTimerId = 0;
        _this.defaultFocusState = _constants1.DefaultFocusState.LIST_ROOT;
        _this.selectedIndex = -1;
        return _this;
    }
    Object.defineProperty(MDCMenuFoundation, "cssClasses", {
        get: function() {
            return _constants1.cssClasses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCMenuFoundation, "strings", {
        get: function() {
            return _constants1.strings;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCMenuFoundation, "numbers", {
        get: function() {
            return _constants1.numbers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCMenuFoundation, "defaultAdapter", {
        /**
         * @see {@link MDCMenuAdapter} for typing information on parameters and return types.
         */ get: function() {
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            return {
                addClassToElementAtIndex: function() {
                    return undefined;
                },
                removeClassFromElementAtIndex: function() {
                    return undefined;
                },
                addAttributeToElementAtIndex: function() {
                    return undefined;
                },
                removeAttributeFromElementAtIndex: function() {
                    return undefined;
                },
                getAttributeFromElementAtIndex: function() {
                    return null;
                },
                elementContainsClass: function() {
                    return false;
                },
                closeSurface: function() {
                    return undefined;
                },
                getElementIndex: function() {
                    return -1;
                },
                notifySelected: function() {
                    return undefined;
                },
                getMenuItemCount: function() {
                    return 0;
                },
                focusItemAtIndex: function() {
                    return undefined;
                },
                focusListRoot: function() {
                    return undefined;
                },
                getSelectedSiblingOfItemAtIndex: function() {
                    return -1;
                },
                isSelectableItemAtIndex: function() {
                    return false;
                }
            };
        // tslint:enable:object-literal-sort-keys
        },
        enumerable: false,
        configurable: true
    });
    MDCMenuFoundation.prototype.destroy = function() {
        if (this.closeAnimationEndTimerId) clearTimeout(this.closeAnimationEndTimerId);
        this.adapter.closeSurface();
    };
    MDCMenuFoundation.prototype.handleKeydown = function(evt) {
        var key = evt.key, keyCode = evt.keyCode;
        var isTab = key === 'Tab' || keyCode === 9;
        if (isTab) this.adapter.closeSurface(/** skipRestoreFocus */ true);
    };
    MDCMenuFoundation.prototype.handleItemAction = function(listItem) {
        var _this = this;
        var index = this.adapter.getElementIndex(listItem);
        if (index < 0) return;
        this.adapter.notifySelected({
            index: index
        });
        var skipRestoreFocus = this.adapter.getAttributeFromElementAtIndex(index, _constants1.strings.SKIP_RESTORE_FOCUS) === 'true';
        this.adapter.closeSurface(skipRestoreFocus);
        // Wait for the menu to close before adding/removing classes that affect styles.
        this.closeAnimationEndTimerId = setTimeout(function() {
            // Recompute the index in case the menu contents have changed.
            var recomputedIndex = _this.adapter.getElementIndex(listItem);
            if (recomputedIndex >= 0 && _this.adapter.isSelectableItemAtIndex(recomputedIndex)) _this.setSelectedIndex(recomputedIndex);
        }, _foundation1.MDCMenuSurfaceFoundation.numbers.TRANSITION_CLOSE_DURATION);
    };
    MDCMenuFoundation.prototype.handleMenuSurfaceOpened = function() {
        switch(this.defaultFocusState){
            case _constants1.DefaultFocusState.FIRST_ITEM:
                this.adapter.focusItemAtIndex(0);
                break;
            case _constants1.DefaultFocusState.LAST_ITEM:
                this.adapter.focusItemAtIndex(this.adapter.getMenuItemCount() - 1);
                break;
            case _constants1.DefaultFocusState.NONE:
                break;
            default:
                this.adapter.focusListRoot();
                break;
        }
    };
    /**
     * Sets default focus state where the menu should focus every time when menu
     * is opened. Focuses the list root (`DefaultFocusState.LIST_ROOT`) element by
     * default.
     */ MDCMenuFoundation.prototype.setDefaultFocusState = function(focusState) {
        this.defaultFocusState = focusState;
    };
    /** @return Index of the currently selected list item within the menu. */ MDCMenuFoundation.prototype.getSelectedIndex = function() {
        return this.selectedIndex;
    };
    /**
     * Selects the list item at `index` within the menu.
     * @param index Index of list item within the menu.
     */ MDCMenuFoundation.prototype.setSelectedIndex = function(index) {
        this.validatedIndex(index);
        if (!this.adapter.isSelectableItemAtIndex(index)) throw new Error('MDCMenuFoundation: No selection group at specified index.');
        var prevSelectedIndex = this.adapter.getSelectedSiblingOfItemAtIndex(index);
        if (prevSelectedIndex >= 0) {
            this.adapter.removeAttributeFromElementAtIndex(prevSelectedIndex, _constants1.strings.ARIA_CHECKED_ATTR);
            this.adapter.removeClassFromElementAtIndex(prevSelectedIndex, _constants1.cssClasses.MENU_SELECTED_LIST_ITEM);
        }
        this.adapter.addClassToElementAtIndex(index, _constants1.cssClasses.MENU_SELECTED_LIST_ITEM);
        this.adapter.addAttributeToElementAtIndex(index, _constants1.strings.ARIA_CHECKED_ATTR, 'true');
        this.selectedIndex = index;
    };
    /**
     * Sets the enabled state to isEnabled for the menu item at the given index.
     * @param index Index of the menu item
     * @param isEnabled The desired enabled state of the menu item.
     */ MDCMenuFoundation.prototype.setEnabled = function(index, isEnabled) {
        this.validatedIndex(index);
        if (isEnabled) {
            this.adapter.removeClassFromElementAtIndex(index, _constants.cssClasses.LIST_ITEM_DISABLED_CLASS);
            this.adapter.addAttributeToElementAtIndex(index, _constants1.strings.ARIA_DISABLED_ATTR, 'false');
        } else {
            this.adapter.addClassToElementAtIndex(index, _constants.cssClasses.LIST_ITEM_DISABLED_CLASS);
            this.adapter.addAttributeToElementAtIndex(index, _constants1.strings.ARIA_DISABLED_ATTR, 'true');
        }
    };
    MDCMenuFoundation.prototype.validatedIndex = function(index) {
        var menuSize = this.adapter.getMenuItemCount();
        var isIndexInRange = index >= 0 && index < menuSize;
        if (!isIndexInRange) throw new Error('MDCMenuFoundation: No list item at specified index.');
    };
    return MDCMenuFoundation;
}(_foundation.MDCFoundation);
exports.default = MDCMenuFoundation1;

},{"tslib":"lRdW5","@material/base/foundation":"kC5Yw","@material/list/constants":"5wBVC","@material/menu-surface/foundation":"2cKnt","./constants":"j2pZI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ibiBS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCNotchedOutline", ()=>MDCNotchedOutline1
);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _component = require("@material/base/component");
var _foundation = require("@material/floating-label/foundation");
var _constants = require("./constants");
var _foundation1 = require("./foundation");
var MDCNotchedOutline1 = function(_super) {
    _tslib.__extends(MDCNotchedOutline, _super);
    function MDCNotchedOutline() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCNotchedOutline.attachTo = function(root) {
        return new MDCNotchedOutline(root);
    };
    MDCNotchedOutline.prototype.initialSyncWithDOM = function() {
        this.notchElement = this.root.querySelector(_constants.strings.NOTCH_ELEMENT_SELECTOR);
        var label = this.root.querySelector('.' + _foundation.MDCFloatingLabelFoundation.cssClasses.ROOT);
        if (label) {
            label.style.transitionDuration = '0s';
            this.root.classList.add(_constants.cssClasses.OUTLINE_UPGRADED);
            requestAnimationFrame(function() {
                label.style.transitionDuration = '';
            });
        } else this.root.classList.add(_constants.cssClasses.NO_LABEL);
    };
    /**
     * Updates classes and styles to open the notch to the specified width.
     * @param notchWidth The notch width in the outline.
     */ MDCNotchedOutline.prototype.notch = function(notchWidth) {
        this.foundation.notch(notchWidth);
    };
    /**
     * Updates classes and styles to close the notch.
     */ MDCNotchedOutline.prototype.closeNotch = function() {
        this.foundation.closeNotch();
    };
    MDCNotchedOutline.prototype.getDefaultFoundation = function() {
        var _this = this;
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        var adapter = {
            addClass: function(className) {
                return _this.root.classList.add(className);
            },
            removeClass: function(className) {
                return _this.root.classList.remove(className);
            },
            setNotchWidthProperty: function(width) {
                _this.notchElement.style.setProperty('width', width + 'px');
            },
            removeNotchWidthProperty: function() {
                _this.notchElement.style.removeProperty('width');
            }
        };
        // tslint:enable:object-literal-sort-keys
        return new _foundation1.MDCNotchedOutlineFoundation(adapter);
    };
    return MDCNotchedOutline;
}(_component.MDCComponent);

},{"tslib":"lRdW5","@material/base/component":"jLptS","@material/floating-label/foundation":"824lp","./constants":"3IcFA","./foundation":"6fuu9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3IcFA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cssClasses", ()=>cssClasses
);
parcelHelpers.export(exports, "numbers", ()=>numbers
);
parcelHelpers.export(exports, "strings", ()=>strings
);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var strings = {
    NOTCH_ELEMENT_SELECTOR: '.mdc-notched-outline__notch'
};
var numbers = {
    // This should stay in sync with $mdc-notched-outline-padding * 2.
    NOTCH_ELEMENT_PADDING: 8
};
var cssClasses = {
    NO_LABEL: 'mdc-notched-outline--no-label',
    OUTLINE_NOTCHED: 'mdc-notched-outline--notched',
    OUTLINE_UPGRADED: 'mdc-notched-outline--upgraded'
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6fuu9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCNotchedOutlineFoundation", ()=>MDCNotchedOutlineFoundation1
);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _foundation = require("@material/base/foundation");
var _constants = require("./constants");
var MDCNotchedOutlineFoundation1 = function(_super) {
    _tslib.__extends(MDCNotchedOutlineFoundation, _super);
    function MDCNotchedOutlineFoundation(adapter) {
        return _super.call(this, _tslib.__assign(_tslib.__assign({
        }, MDCNotchedOutlineFoundation.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCNotchedOutlineFoundation, "strings", {
        get: function() {
            return _constants.strings;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCNotchedOutlineFoundation, "cssClasses", {
        get: function() {
            return _constants.cssClasses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCNotchedOutlineFoundation, "numbers", {
        get: function() {
            return _constants.numbers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCNotchedOutlineFoundation, "defaultAdapter", {
        /**
         * See {@link MDCNotchedOutlineAdapter} for typing information on parameters and return types.
         */ get: function() {
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            return {
                addClass: function() {
                    return undefined;
                },
                removeClass: function() {
                    return undefined;
                },
                setNotchWidthProperty: function() {
                    return undefined;
                },
                removeNotchWidthProperty: function() {
                    return undefined;
                }
            };
        // tslint:enable:object-literal-sort-keys
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Adds the outline notched selector and updates the notch width calculated based off of notchWidth.
     */ MDCNotchedOutlineFoundation.prototype.notch = function(notchWidth) {
        var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED;
        if (notchWidth > 0) notchWidth += _constants.numbers.NOTCH_ELEMENT_PADDING; // Add padding from left/right.
        this.adapter.setNotchWidthProperty(notchWidth);
        this.adapter.addClass(OUTLINE_NOTCHED);
    };
    /**
     * Removes notched outline selector to close the notch in the outline.
     */ MDCNotchedOutlineFoundation.prototype.closeNotch = function() {
        var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED;
        this.adapter.removeClass(OUTLINE_NOTCHED);
        this.adapter.removeNotchWidthProperty();
    };
    return MDCNotchedOutlineFoundation;
}(_foundation.MDCFoundation);
exports.default = MDCNotchedOutlineFoundation1;

},{"tslib":"lRdW5","@material/base/foundation":"kC5Yw","./constants":"3IcFA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eCawT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cssClasses", ()=>cssClasses
);
parcelHelpers.export(exports, "strings", ()=>strings
);
parcelHelpers.export(exports, "numbers", ()=>numbers
);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var cssClasses = {
    ACTIVATED: 'mdc-select--activated',
    DISABLED: 'mdc-select--disabled',
    FOCUSED: 'mdc-select--focused',
    INVALID: 'mdc-select--invalid',
    MENU_INVALID: 'mdc-select__menu--invalid',
    OUTLINED: 'mdc-select--outlined',
    REQUIRED: 'mdc-select--required',
    ROOT: 'mdc-select',
    WITH_LEADING_ICON: 'mdc-select--with-leading-icon'
};
var strings = {
    ARIA_CONTROLS: 'aria-controls',
    ARIA_DESCRIBEDBY: 'aria-describedby',
    ARIA_SELECTED_ATTR: 'aria-selected',
    CHANGE_EVENT: 'MDCSelect:change',
    HIDDEN_INPUT_SELECTOR: 'input[type="hidden"]',
    LABEL_SELECTOR: '.mdc-floating-label',
    LEADING_ICON_SELECTOR: '.mdc-select__icon',
    LINE_RIPPLE_SELECTOR: '.mdc-line-ripple',
    MENU_SELECTOR: '.mdc-select__menu',
    OUTLINE_SELECTOR: '.mdc-notched-outline',
    SELECTED_TEXT_SELECTOR: '.mdc-select__selected-text',
    SELECT_ANCHOR_SELECTOR: '.mdc-select__anchor',
    VALUE_ATTR: 'data-value'
};
var numbers = {
    LABEL_SCALE: 0.75,
    UNSET_INDEX: -1,
    CLICK_DEBOUNCE_TIMEOUT_MS: 330
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bvltu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCSelectFoundation", ()=>MDCSelectFoundation1
);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _foundation = require("@material/base/foundation");
var _keyboard = require("@material/dom/keyboard");
var _constants = require("@material/menu-surface/constants");
var _constants1 = require("./constants");
var MDCSelectFoundation1 = function(_super) {
    _tslib.__extends(MDCSelectFoundation, _super);
    /* istanbul ignore next: optional argument is not a branch statement */ /**
     * @param adapter
     * @param foundationMap Map from subcomponent names to their subfoundations.
     */ function MDCSelectFoundation(adapter, foundationMap) {
        if (foundationMap === void 0) foundationMap = {
        };
        var _this = _super.call(this, _tslib.__assign(_tslib.__assign({
        }, MDCSelectFoundation.defaultAdapter), adapter)) || this;
        // Disabled state
        _this.disabled = false;
        // isMenuOpen is used to track the state of the menu by listening to the
        // MDCMenuSurface:closed event For reference, menu.open will return false if
        // the menu is still closing, but isMenuOpen returns false only after the menu
        // has closed
        _this.isMenuOpen = false;
        // By default, select is invalid if it is required but no value is selected.
        _this.useDefaultValidation = true;
        _this.customValidity = true;
        _this.lastSelectedIndex = _constants1.numbers.UNSET_INDEX;
        _this.clickDebounceTimeout = 0;
        _this.recentlyClicked = false;
        _this.leadingIcon = foundationMap.leadingIcon;
        _this.helperText = foundationMap.helperText;
        return _this;
    }
    Object.defineProperty(MDCSelectFoundation, "cssClasses", {
        get: function() {
            return _constants1.cssClasses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCSelectFoundation, "numbers", {
        get: function() {
            return _constants1.numbers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCSelectFoundation, "strings", {
        get: function() {
            return _constants1.strings;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCSelectFoundation, "defaultAdapter", {
        /**
         * See {@link MDCSelectAdapter} for typing information on parameters and return types.
         */ get: function() {
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            return {
                addClass: function() {
                    return undefined;
                },
                removeClass: function() {
                    return undefined;
                },
                hasClass: function() {
                    return false;
                },
                activateBottomLine: function() {
                    return undefined;
                },
                deactivateBottomLine: function() {
                    return undefined;
                },
                getSelectedIndex: function() {
                    return -1;
                },
                setSelectedIndex: function() {
                    return undefined;
                },
                hasLabel: function() {
                    return false;
                },
                floatLabel: function() {
                    return undefined;
                },
                getLabelWidth: function() {
                    return 0;
                },
                setLabelRequired: function() {
                    return undefined;
                },
                hasOutline: function() {
                    return false;
                },
                notchOutline: function() {
                    return undefined;
                },
                closeOutline: function() {
                    return undefined;
                },
                setRippleCenter: function() {
                    return undefined;
                },
                notifyChange: function() {
                    return undefined;
                },
                setSelectedText: function() {
                    return undefined;
                },
                isSelectAnchorFocused: function() {
                    return false;
                },
                getSelectAnchorAttr: function() {
                    return '';
                },
                setSelectAnchorAttr: function() {
                    return undefined;
                },
                removeSelectAnchorAttr: function() {
                    return undefined;
                },
                addMenuClass: function() {
                    return undefined;
                },
                removeMenuClass: function() {
                    return undefined;
                },
                openMenu: function() {
                    return undefined;
                },
                closeMenu: function() {
                    return undefined;
                },
                getAnchorElement: function() {
                    return null;
                },
                setMenuAnchorElement: function() {
                    return undefined;
                },
                setMenuAnchorCorner: function() {
                    return undefined;
                },
                setMenuWrapFocus: function() {
                    return undefined;
                },
                focusMenuItemAtIndex: function() {
                    return undefined;
                },
                getMenuItemCount: function() {
                    return 0;
                },
                getMenuItemValues: function() {
                    return [];
                },
                getMenuItemTextAtIndex: function() {
                    return '';
                },
                isTypeaheadInProgress: function() {
                    return false;
                },
                typeaheadMatchItem: function() {
                    return -1;
                }
            };
        // tslint:enable:object-literal-sort-keys
        },
        enumerable: false,
        configurable: true
    });
    /** Returns the index of the currently selected menu item, or -1 if none. */ MDCSelectFoundation.prototype.getSelectedIndex = function() {
        return this.adapter.getSelectedIndex();
    };
    MDCSelectFoundation.prototype.setSelectedIndex = function(index, closeMenu, skipNotify) {
        if (closeMenu === void 0) closeMenu = false;
        if (skipNotify === void 0) skipNotify = false;
        if (index >= this.adapter.getMenuItemCount()) return;
        if (index === _constants1.numbers.UNSET_INDEX) this.adapter.setSelectedText('');
        else this.adapter.setSelectedText(this.adapter.getMenuItemTextAtIndex(index).trim());
        this.adapter.setSelectedIndex(index);
        if (closeMenu) this.adapter.closeMenu();
        if (!skipNotify && this.lastSelectedIndex !== index) this.handleChange();
        this.lastSelectedIndex = index;
    };
    MDCSelectFoundation.prototype.setValue = function(value, skipNotify) {
        if (skipNotify === void 0) skipNotify = false;
        var index = this.adapter.getMenuItemValues().indexOf(value);
        this.setSelectedIndex(index, /** closeMenu */ false, skipNotify);
    };
    MDCSelectFoundation.prototype.getValue = function() {
        var index = this.adapter.getSelectedIndex();
        var menuItemValues = this.adapter.getMenuItemValues();
        return index !== _constants1.numbers.UNSET_INDEX ? menuItemValues[index] : '';
    };
    MDCSelectFoundation.prototype.getDisabled = function() {
        return this.disabled;
    };
    MDCSelectFoundation.prototype.setDisabled = function(isDisabled) {
        this.disabled = isDisabled;
        if (this.disabled) {
            this.adapter.addClass(_constants1.cssClasses.DISABLED);
            this.adapter.closeMenu();
        } else this.adapter.removeClass(_constants1.cssClasses.DISABLED);
        if (this.leadingIcon) this.leadingIcon.setDisabled(this.disabled);
        if (this.disabled) // Prevent click events from focusing select. Simply pointer-events: none
        // is not enough since screenreader clicks may bypass this.
        this.adapter.removeSelectAnchorAttr('tabindex');
        else this.adapter.setSelectAnchorAttr('tabindex', '0');
        this.adapter.setSelectAnchorAttr('aria-disabled', this.disabled.toString());
    };
    /** Opens the menu. */ MDCSelectFoundation.prototype.openMenu = function() {
        this.adapter.addClass(_constants1.cssClasses.ACTIVATED);
        this.adapter.openMenu();
        this.isMenuOpen = true;
        this.adapter.setSelectAnchorAttr('aria-expanded', 'true');
    };
    /**
     * @param content Sets the content of the helper text.
     */ MDCSelectFoundation.prototype.setHelperTextContent = function(content) {
        if (this.helperText) this.helperText.setContent(content);
    };
    /**
     * Re-calculates if the notched outline should be notched and if the label
     * should float.
     */ MDCSelectFoundation.prototype.layout = function() {
        if (this.adapter.hasLabel()) {
            var optionHasValue = this.getValue().length > 0;
            var isFocused = this.adapter.hasClass(_constants1.cssClasses.FOCUSED);
            var shouldFloatAndNotch = optionHasValue || isFocused;
            var isRequired = this.adapter.hasClass(_constants1.cssClasses.REQUIRED);
            this.notchOutline(shouldFloatAndNotch);
            this.adapter.floatLabel(shouldFloatAndNotch);
            this.adapter.setLabelRequired(isRequired);
        }
    };
    /**
     * Synchronizes the list of options with the state of the foundation. Call
     * this whenever menu options are dynamically updated.
     */ MDCSelectFoundation.prototype.layoutOptions = function() {
        var menuItemValues = this.adapter.getMenuItemValues();
        var selectedIndex = menuItemValues.indexOf(this.getValue());
        this.setSelectedIndex(selectedIndex, /** closeMenu */ false, /** skipNotify */ true);
    };
    MDCSelectFoundation.prototype.handleMenuOpened = function() {
        if (this.adapter.getMenuItemValues().length === 0) return;
        // Menu should open to the last selected element, should open to first menu item otherwise.
        var selectedIndex = this.getSelectedIndex();
        var focusItemIndex = selectedIndex >= 0 ? selectedIndex : 0;
        this.adapter.focusMenuItemAtIndex(focusItemIndex);
    };
    MDCSelectFoundation.prototype.handleMenuClosing = function() {
        this.adapter.setSelectAnchorAttr('aria-expanded', 'false');
    };
    MDCSelectFoundation.prototype.handleMenuClosed = function() {
        this.adapter.removeClass(_constants1.cssClasses.ACTIVATED);
        this.isMenuOpen = false;
        // Unfocus the select if menu is closed without a selection
        if (!this.adapter.isSelectAnchorFocused()) this.blur();
    };
    /**
     * Handles value changes, via change event or programmatic updates.
     */ MDCSelectFoundation.prototype.handleChange = function() {
        this.layout();
        this.adapter.notifyChange(this.getValue());
        var isRequired = this.adapter.hasClass(_constants1.cssClasses.REQUIRED);
        if (isRequired && this.useDefaultValidation) this.setValid(this.isValid());
    };
    MDCSelectFoundation.prototype.handleMenuItemAction = function(index) {
        this.setSelectedIndex(index, /** closeMenu */ true);
    };
    /**
     * Handles focus events from select element.
     */ MDCSelectFoundation.prototype.handleFocus = function() {
        this.adapter.addClass(_constants1.cssClasses.FOCUSED);
        this.layout();
        this.adapter.activateBottomLine();
    };
    /**
     * Handles blur events from select element.
     */ MDCSelectFoundation.prototype.handleBlur = function() {
        if (this.isMenuOpen) return;
        this.blur();
    };
    MDCSelectFoundation.prototype.handleClick = function(normalizedX) {
        if (this.disabled || this.recentlyClicked) return;
        this.setClickDebounceTimeout();
        if (this.isMenuOpen) {
            this.adapter.closeMenu();
            return;
        }
        this.adapter.setRippleCenter(normalizedX);
        this.openMenu();
    };
    /**
     * Handles keydown events on select element. Depending on the type of
     * character typed, does typeahead matching or opens menu.
     */ MDCSelectFoundation.prototype.handleKeydown = function(event) {
        if (this.isMenuOpen || !this.adapter.hasClass(_constants1.cssClasses.FOCUSED)) return;
        var isEnter = _keyboard.normalizeKey(event) === _keyboard.KEY.ENTER;
        var isSpace = _keyboard.normalizeKey(event) === _keyboard.KEY.SPACEBAR;
        var arrowUp = _keyboard.normalizeKey(event) === _keyboard.KEY.ARROW_UP;
        var arrowDown = _keyboard.normalizeKey(event) === _keyboard.KEY.ARROW_DOWN;
        var isModifier = event.ctrlKey || event.metaKey;
        // Typeahead
        if (!isModifier && (!isSpace && event.key && event.key.length === 1 || isSpace && this.adapter.isTypeaheadInProgress())) {
            var key = isSpace ? ' ' : event.key;
            var typeaheadNextIndex = this.adapter.typeaheadMatchItem(key, this.getSelectedIndex());
            if (typeaheadNextIndex >= 0) this.setSelectedIndex(typeaheadNextIndex);
            event.preventDefault();
            return;
        }
        if (!isEnter && !isSpace && !arrowUp && !arrowDown) return;
        // Increment/decrement index as necessary and open menu.
        if (arrowUp && this.getSelectedIndex() > 0) this.setSelectedIndex(this.getSelectedIndex() - 1);
        else if (arrowDown && this.getSelectedIndex() < this.adapter.getMenuItemCount() - 1) this.setSelectedIndex(this.getSelectedIndex() + 1);
        this.openMenu();
        event.preventDefault();
    };
    /**
     * Opens/closes the notched outline.
     */ MDCSelectFoundation.prototype.notchOutline = function(openNotch) {
        if (!this.adapter.hasOutline()) return;
        var isFocused = this.adapter.hasClass(_constants1.cssClasses.FOCUSED);
        if (openNotch) {
            var labelScale = _constants1.numbers.LABEL_SCALE;
            var labelWidth = this.adapter.getLabelWidth() * labelScale;
            this.adapter.notchOutline(labelWidth);
        } else if (!isFocused) this.adapter.closeOutline();
    };
    /**
     * Sets the aria label of the leading icon.
     */ MDCSelectFoundation.prototype.setLeadingIconAriaLabel = function(label) {
        if (this.leadingIcon) this.leadingIcon.setAriaLabel(label);
    };
    /**
     * Sets the text content of the leading icon.
     */ MDCSelectFoundation.prototype.setLeadingIconContent = function(content) {
        if (this.leadingIcon) this.leadingIcon.setContent(content);
    };
    MDCSelectFoundation.prototype.getUseDefaultValidation = function() {
        return this.useDefaultValidation;
    };
    MDCSelectFoundation.prototype.setUseDefaultValidation = function(useDefaultValidation) {
        this.useDefaultValidation = useDefaultValidation;
    };
    MDCSelectFoundation.prototype.setValid = function(isValid) {
        if (!this.useDefaultValidation) this.customValidity = isValid;
        this.adapter.setSelectAnchorAttr('aria-invalid', (!isValid).toString());
        if (isValid) {
            this.adapter.removeClass(_constants1.cssClasses.INVALID);
            this.adapter.removeMenuClass(_constants1.cssClasses.MENU_INVALID);
        } else {
            this.adapter.addClass(_constants1.cssClasses.INVALID);
            this.adapter.addMenuClass(_constants1.cssClasses.MENU_INVALID);
        }
        this.syncHelperTextValidity(isValid);
    };
    MDCSelectFoundation.prototype.isValid = function() {
        if (this.useDefaultValidation && this.adapter.hasClass(_constants1.cssClasses.REQUIRED) && !this.adapter.hasClass(_constants1.cssClasses.DISABLED)) // See notes for required attribute under https://www.w3.org/TR/html52/sec-forms.html#the-select-element
        // TL;DR: Invalid if no index is selected, or if the first index is selected and has an empty value.
        return this.getSelectedIndex() !== _constants1.numbers.UNSET_INDEX && (this.getSelectedIndex() !== 0 || Boolean(this.getValue()));
        return this.customValidity;
    };
    MDCSelectFoundation.prototype.setRequired = function(isRequired) {
        if (isRequired) this.adapter.addClass(_constants1.cssClasses.REQUIRED);
        else this.adapter.removeClass(_constants1.cssClasses.REQUIRED);
        this.adapter.setSelectAnchorAttr('aria-required', isRequired.toString());
        this.adapter.setLabelRequired(isRequired);
    };
    MDCSelectFoundation.prototype.getRequired = function() {
        return this.adapter.getSelectAnchorAttr('aria-required') === 'true';
    };
    MDCSelectFoundation.prototype.init = function() {
        var anchorEl = this.adapter.getAnchorElement();
        if (anchorEl) {
            this.adapter.setMenuAnchorElement(anchorEl);
            this.adapter.setMenuAnchorCorner(_constants.Corner.BOTTOM_START);
        }
        this.adapter.setMenuWrapFocus(false);
        this.setDisabled(this.adapter.hasClass(_constants1.cssClasses.DISABLED));
        this.syncHelperTextValidity(!this.adapter.hasClass(_constants1.cssClasses.INVALID));
        this.layout();
        this.layoutOptions();
    };
    /**
     * Unfocuses the select component.
     */ MDCSelectFoundation.prototype.blur = function() {
        this.adapter.removeClass(_constants1.cssClasses.FOCUSED);
        this.layout();
        this.adapter.deactivateBottomLine();
        var isRequired = this.adapter.hasClass(_constants1.cssClasses.REQUIRED);
        if (isRequired && this.useDefaultValidation) this.setValid(this.isValid());
    };
    MDCSelectFoundation.prototype.syncHelperTextValidity = function(isValid) {
        if (!this.helperText) return;
        this.helperText.setValidity(isValid);
        var helperTextVisible = this.helperText.isVisible();
        var helperTextId = this.helperText.getId();
        if (helperTextVisible && helperTextId) this.adapter.setSelectAnchorAttr(_constants1.strings.ARIA_DESCRIBEDBY, helperTextId);
        else // Needed because screenreaders will read labels pointed to by
        // `aria-describedby` even if they are `aria-hidden`.
        this.adapter.removeSelectAnchorAttr(_constants1.strings.ARIA_DESCRIBEDBY);
    };
    MDCSelectFoundation.prototype.setClickDebounceTimeout = function() {
        var _this = this;
        clearTimeout(this.clickDebounceTimeout);
        this.clickDebounceTimeout = setTimeout(function() {
            _this.recentlyClicked = false;
        }, _constants1.numbers.CLICK_DEBOUNCE_TIMEOUT_MS);
        this.recentlyClicked = true;
    };
    return MDCSelectFoundation;
}(_foundation.MDCFoundation);
exports.default = MDCSelectFoundation1;

},{"tslib":"lRdW5","@material/base/foundation":"kC5Yw","@material/dom/keyboard":"5gaWj","@material/menu-surface/constants":"3BYDk","./constants":"eCawT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eZnQy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCSelectHelperText", ()=>MDCSelectHelperText1
);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _component = require("@material/base/component");
var _foundation = require("./foundation");
var MDCSelectHelperText1 = function(_super) {
    _tslib.__extends(MDCSelectHelperText, _super);
    function MDCSelectHelperText() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCSelectHelperText.attachTo = function(root) {
        return new MDCSelectHelperText(root);
    };
    Object.defineProperty(MDCSelectHelperText.prototype, "foundationForSelect", {
        // Provided for access by MDCSelect component
        get: function() {
            return this.foundation;
        },
        enumerable: false,
        configurable: true
    });
    MDCSelectHelperText.prototype.getDefaultFoundation = function() {
        var _this = this;
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        var adapter = {
            addClass: function(className) {
                return _this.root.classList.add(className);
            },
            removeClass: function(className) {
                return _this.root.classList.remove(className);
            },
            hasClass: function(className) {
                return _this.root.classList.contains(className);
            },
            getAttr: function(attr) {
                return _this.root.getAttribute(attr);
            },
            setAttr: function(attr, value) {
                return _this.root.setAttribute(attr, value);
            },
            removeAttr: function(attr) {
                return _this.root.removeAttribute(attr);
            },
            setContent: function(content) {
                _this.root.textContent = content;
            }
        };
        // tslint:enable:object-literal-sort-keys
        return new _foundation.MDCSelectHelperTextFoundation(adapter);
    };
    return MDCSelectHelperText;
}(_component.MDCComponent);

},{"tslib":"lRdW5","@material/base/component":"jLptS","./foundation":"9InYx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9InYx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCSelectHelperTextFoundation", ()=>MDCSelectHelperTextFoundation1
);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _foundation = require("@material/base/foundation");
var _constants = require("./constants");
var MDCSelectHelperTextFoundation1 = function(_super) {
    _tslib.__extends(MDCSelectHelperTextFoundation, _super);
    function MDCSelectHelperTextFoundation(adapter) {
        return _super.call(this, _tslib.__assign(_tslib.__assign({
        }, MDCSelectHelperTextFoundation.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCSelectHelperTextFoundation, "cssClasses", {
        get: function() {
            return _constants.cssClasses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCSelectHelperTextFoundation, "strings", {
        get: function() {
            return _constants.strings;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCSelectHelperTextFoundation, "defaultAdapter", {
        /**
         * See {@link MDCSelectHelperTextAdapter} for typing information on parameters and return types.
         */ get: function() {
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            return {
                addClass: function() {
                    return undefined;
                },
                removeClass: function() {
                    return undefined;
                },
                hasClass: function() {
                    return false;
                },
                setAttr: function() {
                    return undefined;
                },
                getAttr: function() {
                    return null;
                },
                removeAttr: function() {
                    return undefined;
                },
                setContent: function() {
                    return undefined;
                }
            };
        // tslint:enable:object-literal-sort-keys
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @return The ID of the helper text, or null if none is set.
     */ MDCSelectHelperTextFoundation.prototype.getId = function() {
        return this.adapter.getAttr('id');
    };
    /**
     * @return Whether the helper text is currently visible.
     */ MDCSelectHelperTextFoundation.prototype.isVisible = function() {
        return this.adapter.getAttr(_constants.strings.ARIA_HIDDEN) !== 'true';
    };
    /**
     * Sets the content of the helper text field.
     */ MDCSelectHelperTextFoundation.prototype.setContent = function(content) {
        this.adapter.setContent(content);
    };
    /**
     * Sets the helper text to act as a validation message.
     * By default, validation messages are hidden when the select is valid and
     * visible when the select is invalid.
     *
     * @param isValidation True to make the helper text act as an error validation
     *     message.
     */ MDCSelectHelperTextFoundation.prototype.setValidation = function(isValidation) {
        if (isValidation) this.adapter.addClass(_constants.cssClasses.HELPER_TEXT_VALIDATION_MSG);
        else this.adapter.removeClass(_constants.cssClasses.HELPER_TEXT_VALIDATION_MSG);
    };
    /**
     * Sets the persistency of the validation helper text.
     * This keeps the validation message visible even if the select is valid,
     * though it will be displayed in the normal (grey) color.
     */ MDCSelectHelperTextFoundation.prototype.setValidationMsgPersistent = function(isPersistent) {
        if (isPersistent) this.adapter.addClass(_constants.cssClasses.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
        else this.adapter.removeClass(_constants.cssClasses.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
    };
    /**
     * When acting as a validation message, shows/hides the helper text and
     * triggers alerts as necessary based on the select's validity.
     */ MDCSelectHelperTextFoundation.prototype.setValidity = function(selectIsValid) {
        var isValidationMsg = this.adapter.hasClass(_constants.cssClasses.HELPER_TEXT_VALIDATION_MSG);
        if (!isValidationMsg) // Non-validating helper-text is always displayed and does not participate
        // in validation logic.
        return;
        var isPersistentValidationMsg = this.adapter.hasClass(_constants.cssClasses.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
        // Validating helper text is displayed if select is invalid, unless it is
        // set as persistent, in which case it always displays.
        var msgShouldDisplay = !selectIsValid || isPersistentValidationMsg;
        if (msgShouldDisplay) {
            this.showToScreenReader();
            // In addition to displaying, also trigger an alert if the select
            // has become invalid.
            if (!selectIsValid) this.adapter.setAttr(_constants.strings.ROLE, 'alert');
            else this.adapter.removeAttr(_constants.strings.ROLE);
            return;
        }
        // Hide everything.
        this.adapter.removeAttr(_constants.strings.ROLE);
        this.hide();
    };
    /**
     * Makes the helper text visible to screen readers.
     */ MDCSelectHelperTextFoundation.prototype.showToScreenReader = function() {
        this.adapter.removeAttr(_constants.strings.ARIA_HIDDEN);
    };
    /**
     * Hides the help text from screen readers.
     */ MDCSelectHelperTextFoundation.prototype.hide = function() {
        this.adapter.setAttr(_constants.strings.ARIA_HIDDEN, 'true');
    };
    return MDCSelectHelperTextFoundation;
}(_foundation.MDCFoundation);
exports.default = MDCSelectHelperTextFoundation1;

},{"tslib":"lRdW5","@material/base/foundation":"kC5Yw","./constants":"7CaGn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7CaGn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "strings", ()=>strings
);
parcelHelpers.export(exports, "cssClasses", ()=>cssClasses
);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var strings = {
    ARIA_HIDDEN: 'aria-hidden',
    ROLE: 'role'
};
var cssClasses = {
    HELPER_TEXT_VALIDATION_MSG: 'mdc-select-helper-text--validation-msg',
    HELPER_TEXT_VALIDATION_MSG_PERSISTENT: 'mdc-select-helper-text--validation-msg-persistent'
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kACFb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCSelectIcon", ()=>MDCSelectIcon1
);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _component = require("@material/base/component");
var _foundation = require("./foundation");
var MDCSelectIcon1 = function(_super) {
    _tslib.__extends(MDCSelectIcon, _super);
    function MDCSelectIcon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCSelectIcon.attachTo = function(root) {
        return new MDCSelectIcon(root);
    };
    Object.defineProperty(MDCSelectIcon.prototype, "foundationForSelect", {
        // Provided for access by MDCSelect component
        get: function() {
            return this.foundation;
        },
        enumerable: false,
        configurable: true
    });
    MDCSelectIcon.prototype.getDefaultFoundation = function() {
        var _this = this;
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        var adapter = {
            getAttr: function(attr) {
                return _this.root.getAttribute(attr);
            },
            setAttr: function(attr, value) {
                return _this.root.setAttribute(attr, value);
            },
            removeAttr: function(attr) {
                return _this.root.removeAttribute(attr);
            },
            setContent: function(content) {
                _this.root.textContent = content;
            },
            registerInteractionHandler: function(evtType, handler) {
                return _this.listen(evtType, handler);
            },
            deregisterInteractionHandler: function(evtType, handler) {
                return _this.unlisten(evtType, handler);
            },
            notifyIconAction: function() {
                return _this.emit(_foundation.MDCSelectIconFoundation.strings.ICON_EVENT, {
                } /* evtData */ , true);
            }
        };
        // tslint:enable:object-literal-sort-keys
        return new _foundation.MDCSelectIconFoundation(adapter);
    };
    return MDCSelectIcon;
}(_component.MDCComponent);

},{"tslib":"lRdW5","@material/base/component":"jLptS","./foundation":"1gytr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1gytr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCSelectIconFoundation", ()=>MDCSelectIconFoundation1
);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _foundation = require("@material/base/foundation");
var _constants = require("./constants");
var INTERACTION_EVENTS = [
    'click',
    'keydown'
];
var MDCSelectIconFoundation1 = function(_super) {
    _tslib.__extends(MDCSelectIconFoundation, _super);
    function MDCSelectIconFoundation(adapter) {
        var _this = _super.call(this, _tslib.__assign(_tslib.__assign({
        }, MDCSelectIconFoundation.defaultAdapter), adapter)) || this;
        _this.savedTabIndex = null;
        _this.interactionHandler = function(evt) {
            _this.handleInteraction(evt);
        };
        return _this;
    }
    Object.defineProperty(MDCSelectIconFoundation, "strings", {
        get: function() {
            return _constants.strings;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCSelectIconFoundation, "defaultAdapter", {
        /**
         * See {@link MDCSelectIconAdapter} for typing information on parameters and return types.
         */ get: function() {
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            return {
                getAttr: function() {
                    return null;
                },
                setAttr: function() {
                    return undefined;
                },
                removeAttr: function() {
                    return undefined;
                },
                setContent: function() {
                    return undefined;
                },
                registerInteractionHandler: function() {
                    return undefined;
                },
                deregisterInteractionHandler: function() {
                    return undefined;
                },
                notifyIconAction: function() {
                    return undefined;
                }
            };
        // tslint:enable:object-literal-sort-keys
        },
        enumerable: false,
        configurable: true
    });
    MDCSelectIconFoundation.prototype.init = function() {
        var e_1, _a;
        this.savedTabIndex = this.adapter.getAttr('tabindex');
        try {
            for(var INTERACTION_EVENTS_1 = _tslib.__values(INTERACTION_EVENTS), INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next(); !INTERACTION_EVENTS_1_1.done; INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next()){
                var evtType = INTERACTION_EVENTS_1_1.value;
                this.adapter.registerInteractionHandler(evtType, this.interactionHandler);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (INTERACTION_EVENTS_1_1 && !INTERACTION_EVENTS_1_1.done && (_a = INTERACTION_EVENTS_1.return)) _a.call(INTERACTION_EVENTS_1);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
    };
    MDCSelectIconFoundation.prototype.destroy = function() {
        var e_2, _a;
        try {
            for(var INTERACTION_EVENTS_2 = _tslib.__values(INTERACTION_EVENTS), INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next(); !INTERACTION_EVENTS_2_1.done; INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next()){
                var evtType = INTERACTION_EVENTS_2_1.value;
                this.adapter.deregisterInteractionHandler(evtType, this.interactionHandler);
            }
        } catch (e_2_1) {
            e_2 = {
                error: e_2_1
            };
        } finally{
            try {
                if (INTERACTION_EVENTS_2_1 && !INTERACTION_EVENTS_2_1.done && (_a = INTERACTION_EVENTS_2.return)) _a.call(INTERACTION_EVENTS_2);
            } finally{
                if (e_2) throw e_2.error;
            }
        }
    };
    MDCSelectIconFoundation.prototype.setDisabled = function(disabled) {
        if (!this.savedTabIndex) return;
        if (disabled) {
            this.adapter.setAttr('tabindex', '-1');
            this.adapter.removeAttr('role');
        } else {
            this.adapter.setAttr('tabindex', this.savedTabIndex);
            this.adapter.setAttr('role', _constants.strings.ICON_ROLE);
        }
    };
    MDCSelectIconFoundation.prototype.setAriaLabel = function(label) {
        this.adapter.setAttr('aria-label', label);
    };
    MDCSelectIconFoundation.prototype.setContent = function(content) {
        this.adapter.setContent(content);
    };
    MDCSelectIconFoundation.prototype.handleInteraction = function(evt) {
        var isEnterKey = evt.key === 'Enter' || evt.keyCode === 13;
        if (evt.type === 'click' || isEnterKey) this.adapter.notifyIconAction();
    };
    return MDCSelectIconFoundation;
}(_foundation.MDCFoundation);
exports.default = MDCSelectIconFoundation1;

},{"tslib":"lRdW5","@material/base/foundation":"kC5Yw","./constants":"bS9Ra","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bS9Ra":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "strings", ()=>strings
);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var strings = {
    ICON_EVENT: 'MDCSelect:icon',
    ICON_ROLE: 'button'
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9fDBn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jc1iu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "helperTextCssClasses", ()=>_constants.cssClasses
);
parcelHelpers.export(exports, "helperTextStrings", ()=>_constants.strings
);
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _adapter = require("./adapter");
parcelHelpers.exportAll(_adapter, exports);
var _component = require("./component");
parcelHelpers.exportAll(_component, exports);
var _foundation = require("./foundation");
parcelHelpers.exportAll(_foundation, exports);
var _constants = require("./constants");

},{"./adapter":"c5O7u","./component":"eZnQy","./foundation":"9InYx","./constants":"7CaGn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c5O7u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8GVWV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "iconStrings", ()=>_constants.strings
);
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _adapter = require("./adapter");
parcelHelpers.exportAll(_adapter, exports);
var _component = require("./component");
parcelHelpers.exportAll(_component, exports);
var _foundation = require("./foundation");
parcelHelpers.exportAll(_foundation, exports);
var _constants = require("./constants");

},{"./adapter":"4eC8o","./component":"kACFb","./foundation":"1gytr","./constants":"bS9Ra","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4eC8o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8O6sG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _circularProgress = require("@material/circular-progress");
class Spinner {
    oncreate(vnode) {
        try {
            this.mdcInstance = new _circularProgress.MDCCircularProgress(vnode.dom);
        } catch (e) {
        }
    }
    view() {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
            class: "mdc-circular-progress mdc-circular-progress--indeterminate",
            style: "width:48px;height:48px;",
            role: "progressbar",
            "aria-valuemin": "0",
            "aria-valuemax": "1"
        }, _mithrilDefault.default("div", {
            class: "mdc-circular-progress__determinate-container"
        }, _mithrilDefault.default("svg", {
            class: "mdc-circular-progress__determinate-circle-graphic",
            viewBox: "0 0 48 48",
            xmlns: "http://www.w3.org/2000/svg"
        }, _mithrilDefault.default("circle", {
            class: "mdc-circular-progress__determinate-track",
            cx: "24",
            cy: "24",
            r: "18",
            "stroke-width": "4"
        }), _mithrilDefault.default("circle", {
            class: "mdc-circular-progress__determinate-circle",
            cx: "24",
            cy: "24",
            r: "18",
            "stroke-dasharray": "113.097",
            "stroke-dashoffset": "113.097",
            "stroke-width": "4"
        }))), _mithrilDefault.default("div", {
            class: "mdc-circular-progress__indeterminate-container"
        }, _mithrilDefault.default("div", {
            class: "mdc-circular-progress__spinner-layer"
        }, _mithrilDefault.default("div", {
            class: "mdc-circular-progress__circle-clipper mdc-circular-progress__circle-left"
        }, _mithrilDefault.default("svg", {
            class: "mdc-circular-progress__indeterminate-circle-graphic",
            viewBox: "0 0 48 48",
            xmlns: "http://www.w3.org/2000/svg"
        }, _mithrilDefault.default("circle", {
            cx: "24",
            cy: "24",
            r: "18",
            "stroke-dasharray": "113.097",
            "stroke-dashoffset": "56.549",
            "stroke-width": "4"
        }))), _mithrilDefault.default("div", {
            class: "mdc-circular-progress__gap-patch"
        }, _mithrilDefault.default("svg", {
            class: "mdc-circular-progress__indeterminate-circle-graphic",
            viewBox: "0 0 48 48",
            xmlns: "http://www.w3.org/2000/svg"
        }, _mithrilDefault.default("circle", {
            cx: "24",
            cy: "24",
            r: "18",
            "stroke-dasharray": "113.097",
            "stroke-dashoffset": "56.549",
            "stroke-width": "3.2"
        }))), _mithrilDefault.default("div", {
            class: "mdc-circular-progress__circle-clipper mdc-circular-progress__circle-right"
        }, _mithrilDefault.default("svg", {
            class: "mdc-circular-progress__indeterminate-circle-graphic",
            viewBox: "0 0 48 48",
            xmlns: "http://www.w3.org/2000/svg"
        }, _mithrilDefault.default("circle", {
            cx: "24",
            cy: "24",
            r: "18",
            "stroke-dasharray": "113.097",
            "stroke-dashoffset": "56.549",
            "stroke-width": "4"
        })))))));
    }
}
module.exports = Spinner;

},{"mithril":"1zcoP","@material/circular-progress":"ejbRE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ejbRE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2020 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _adapter = require("./adapter");
parcelHelpers.exportAll(_adapter, exports);
var _component = require("./component");
parcelHelpers.exportAll(_component, exports);
var _constants = require("./constants");
parcelHelpers.exportAll(_constants, exports);
var _foundation = require("./foundation");
parcelHelpers.exportAll(_foundation, exports);

},{"./adapter":"jfL0c","./component":"6jg9N","./constants":"jzF0P","./foundation":"3AdP6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jfL0c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6jg9N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCCircularProgress", ()=>MDCCircularProgress1
);
/**
 * @license
 * Copyright 2020 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _component = require("@material/base/component");
var _foundation = require("./foundation");
var MDCCircularProgress1 = function(_super) {
    _tslib.__extends(MDCCircularProgress, _super);
    function MDCCircularProgress() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCCircularProgress.prototype.initialize = function() {
        this.determinateCircle = this.root.querySelector(_foundation.MDCCircularProgressFoundation.strings.DETERMINATE_CIRCLE_SELECTOR);
    };
    MDCCircularProgress.attachTo = function(root) {
        return new MDCCircularProgress(root);
    };
    Object.defineProperty(MDCCircularProgress.prototype, "determinate", {
        /**
         * Sets whether the progress indicator is in determinate mode.
         * @param isDeterminate Whether the indicator should be determinate.
         */ set: function(value) {
            this.foundation.setDeterminate(value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCCircularProgress.prototype, "progress", {
        /**
         * Sets the current progress value. In indeterminate mode, this has no
         * visual effect but will be reflected if the indicator is switched to
         * determinate mode.
         * @param value The current progress value, which must be between 0 and 1.
         */ set: function(value) {
            this.foundation.setProgress(value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCCircularProgress.prototype, "isClosed", {
        /**
         * Whether the progress indicator is hidden.
         */ get: function() {
            return this.foundation.isClosed();
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Shows the progress indicator.
     */ MDCCircularProgress.prototype.open = function() {
        this.foundation.open();
    };
    /**
     * Hides the progress indicator.
     */ MDCCircularProgress.prototype.close = function() {
        this.foundation.close();
    };
    MDCCircularProgress.prototype.getDefaultFoundation = function() {
        var _this = this;
        // DO NOT INLINE this variable. For backward compatibility, foundations take
        // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any
        // methods, we need a separate, strongly typed adapter variable.
        var adapter = {
            addClass: function(className) {
                _this.root.classList.add(className);
            },
            getDeterminateCircleAttribute: function(attributeName) {
                return _this.determinateCircle.getAttribute(attributeName);
            },
            hasClass: function(className) {
                return _this.root.classList.contains(className);
            },
            removeClass: function(className) {
                _this.root.classList.remove(className);
            },
            removeAttribute: function(attributeName) {
                _this.root.removeAttribute(attributeName);
            },
            setAttribute: function(attributeName, value) {
                _this.root.setAttribute(attributeName, value);
            },
            setDeterminateCircleAttribute: function(attributeName, value) {
                _this.determinateCircle.setAttribute(attributeName, value);
            }
        };
        return new _foundation.MDCCircularProgressFoundation(adapter);
    };
    return MDCCircularProgress;
}(_component.MDCComponent);

},{"tslib":"lRdW5","@material/base/component":"jLptS","./foundation":"3AdP6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3AdP6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCCircularProgressFoundation", ()=>MDCCircularProgressFoundation1
);
/**
 * @license
 * Copyright 2020 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _foundation = require("@material/base/foundation");
var _constants = require("./constants");
var MDCCircularProgressFoundation1 = function(_super) {
    _tslib.__extends(MDCCircularProgressFoundation, _super);
    function MDCCircularProgressFoundation(adapter) {
        return _super.call(this, _tslib.__assign(_tslib.__assign({
        }, MDCCircularProgressFoundation.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCCircularProgressFoundation, "cssClasses", {
        get: function() {
            return _constants.cssClasses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCCircularProgressFoundation, "strings", {
        get: function() {
            return _constants.strings;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCCircularProgressFoundation, "defaultAdapter", {
        get: function() {
            return {
                addClass: function() {
                    return undefined;
                },
                getDeterminateCircleAttribute: function() {
                    return null;
                },
                hasClass: function() {
                    return false;
                },
                removeClass: function() {
                    return undefined;
                },
                removeAttribute: function() {
                    return undefined;
                },
                setAttribute: function() {
                    return undefined;
                },
                setDeterminateCircleAttribute: function() {
                    return undefined;
                }
            };
        },
        enumerable: false,
        configurable: true
    });
    MDCCircularProgressFoundation.prototype.init = function() {
        this.closed = this.adapter.hasClass(_constants.cssClasses.CLOSED_CLASS);
        this.determinate = !this.adapter.hasClass(_constants.cssClasses.INDETERMINATE_CLASS);
        this.progress = 0;
        if (this.determinate) this.adapter.setAttribute(_constants.strings.ARIA_VALUENOW, this.progress.toString());
        this.radius = Number(this.adapter.getDeterminateCircleAttribute(_constants.strings.RADIUS));
    };
    /**
     * Sets whether the progress indicator is in determinate mode.
     * @param determinate Whether the indicator should be determinate.
     */ MDCCircularProgressFoundation.prototype.setDeterminate = function(determinate) {
        this.determinate = determinate;
        if (this.determinate) {
            this.adapter.removeClass(_constants.cssClasses.INDETERMINATE_CLASS);
            this.setProgress(this.progress);
        } else {
            this.adapter.addClass(_constants.cssClasses.INDETERMINATE_CLASS);
            this.adapter.removeAttribute(_constants.strings.ARIA_VALUENOW);
        }
    };
    MDCCircularProgressFoundation.prototype.isDeterminate = function() {
        return this.determinate;
    };
    /**
     * Sets the current progress value. In indeterminate mode, this has no
     * visual effect but will be reflected if the indicator is switched to
     * determinate mode.
     * @param value The current progress value, which must be between 0 and 1.
     */ MDCCircularProgressFoundation.prototype.setProgress = function(value) {
        this.progress = value;
        if (this.determinate) {
            var unfilledArcLength = (1 - this.progress) * (2 * Math.PI * this.radius);
            this.adapter.setDeterminateCircleAttribute(_constants.strings.STROKE_DASHOFFSET, "" + unfilledArcLength);
            this.adapter.setAttribute(_constants.strings.ARIA_VALUENOW, this.progress.toString());
        }
    };
    MDCCircularProgressFoundation.prototype.getProgress = function() {
        return this.progress;
    };
    /**
     * Shows the progress indicator.
     */ MDCCircularProgressFoundation.prototype.open = function() {
        this.closed = false;
        this.adapter.removeClass(_constants.cssClasses.CLOSED_CLASS);
        this.adapter.removeAttribute(_constants.strings.ARIA_HIDDEN);
    };
    /**
     * Hides the progress indicator
     */ MDCCircularProgressFoundation.prototype.close = function() {
        this.closed = true;
        this.adapter.addClass(_constants.cssClasses.CLOSED_CLASS);
        this.adapter.setAttribute(_constants.strings.ARIA_HIDDEN, 'true');
    };
    /**
     * @return Returns whether the progress indicator is hidden.
     */ MDCCircularProgressFoundation.prototype.isClosed = function() {
        return this.closed;
    };
    return MDCCircularProgressFoundation;
}(_foundation.MDCFoundation);
exports.default = MDCCircularProgressFoundation1;

},{"tslib":"lRdW5","@material/base/foundation":"kC5Yw","./constants":"jzF0P","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jzF0P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cssClasses", ()=>cssClasses
);
parcelHelpers.export(exports, "strings", ()=>strings
);
var cssClasses = {
    INDETERMINATE_CLASS: 'mdc-circular-progress--indeterminate',
    CLOSED_CLASS: 'mdc-circular-progress--closed'
};
var strings = {
    ARIA_HIDDEN: 'aria-hidden',
    ARIA_VALUENOW: 'aria-valuenow',
    DETERMINATE_CIRCLE_SELECTOR: '.mdc-circular-progress__determinate-circle',
    RADIUS: 'r',
    STROKE_DASHOFFSET: 'stroke-dashoffset'
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1cD4S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _stepsScss = require("./steps.scss");
class Steps {
    view(vnode) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
            class: "steps",
            style: vnode.attrs.style
        }, [
            ...Array(vnode.attrs.count)
        ].map((s, idx)=>{
            return _mithrilDefault.default("div", {
                class: 'step' + (idx === vnode.attrs.selected ? ' step--selected' : ''),
                style: {
                    cursor: 'pointer'
                },
                onclick: ()=>{
                    vnode.attrs.selectedChange(idx);
                }
            });
        })));
    }
}
module.exports = Steps;

},{"mithril":"1zcoP","./steps.scss":"h4xie","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h4xie":[function() {},{}],"ifkQA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _textfield = require("@material/textfield");
class TextField {
    constructor(){
        this.textfieldClass = 'mdc-text-field';
        this.optionDefaults = {
            cols: 40,
            class: null,
            disabled: false,
            filled: false,
            fluid: false,
            iconLeading: null,
            iconTrailing: null,
            label: null,
            maxlength: null,
            minlength: null,
            oninput: null,
            outlined: false,
            pattern: null,
            placeholder: '',
            rows: 4,
            style: null,
            textarea: false,
            type: 'text',
            value: ''
        };
        this.options = null;
    }
    assignOptions(vnode) {
        this.options = Object.assign({
        }, this.optionDefaults, vnode.attrs);
    }
    setClass() {
        this.textfieldClass = 'mdc-text-field';
        if (this.options.filled) this.textfieldClass += ' mdc-text-field--filled';
        if (this.options.outlined) this.textfieldClass += ' mdc-text-field--outlined';
        if (this.options.textarea) this.textfieldClass += ' mdc-text-field--textarea';
        if (!this.options.label) this.textfieldClass += ' mdc-text-field--no-label';
        if (this.options.disabled) this.textfieldClass += ' mdc-text-field--disabled';
        if (this.options.iconLeading) this.textfieldClass += ' mdc-text-field--with-leading-icon';
        if (this.options.iconTrailing) this.textfieldClass += ' mdc-text-field--with-trailing-icon';
        if (this.options.class) this.textfieldClass += ` ${this.options.class}`;
    }
    oninit(vnode1) {
        this.assignOptions(vnode1);
        this.setClass();
    }
    oncreate(vnode2) {
        try {
            this.mdcInstance = new _textfield.MDCTextField(vnode2.dom);
        } catch (e) {
        }
    }
    onbeforeupdate(vnode3) {
        this.assignOptions(vnode3);
        this.setClass();
    }
    view(vnode4) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("label", {
            class: this.textfieldClass,
            style: {
                width: this.options.fluid ? '100%' : 'auto',
                ...this.options.style
            }
        }, _mithrilDefault.default("span", {
            class: "mdc-text-field__ripple"
        }), this.options.filled && this.options.label && !this.options.textarea && _mithrilDefault.default('[', null, _mithrilDefault.default("span", {
            class: "mdc-floating-label"
        }, this.options.label)), this.options.outlined && !this.options.textarea && _mithrilDefault.default('[', null, _mithrilDefault.default("span", {
            class: "mdc-notched-outline"
        }, _mithrilDefault.default("span", {
            class: "mdc-notched-outline__leading"
        }), this.options.label && _mithrilDefault.default("span", {
            class: "mdc-notched-outline__notch"
        }, _mithrilDefault.default("span", {
            class: "mdc-floating-label"
        }, this.options.label)), _mithrilDefault.default("span", {
            class: "mdc-notched-outline__trailing"
        }))), this.options.outlined && this.options.textarea && _mithrilDefault.default('[', null, _mithrilDefault.default("span", {
            class: "mdc-notched-outline"
        }, _mithrilDefault.default("span", {
            class: "mdc-notched-outline__leading"
        }), _mithrilDefault.default("span", {
            class: "mdc-notched-outline__trailing"
        }))), this.options.iconLeading && _mithrilDefault.default("i", {
            class: "material-icons mdc-text-field__icon mdc-text-field__icon--leading",
            tabindex: this.options.iconLeading.onclick ? '0' : null,
            role: this.options.iconLeading.onclick ? 'button' : null,
            onclick: this.options.iconLeading.onclick
        }, this.options.iconLeading.icon), this.options.textarea ? _mithrilDefault.default("span", {
            class: "mdc-text-field__resizer"
        }, _mithrilDefault.default("textarea", {
            class: "mdc-text-field__input",
            rows: this.options.rows,
            cols: this.options.cols,
            pattern: this.options.pattern,
            minlength: this.options.minlength,
            maxlength: this.options.maxlength,
            disabled: this.options.disabled,
            placeholder: this.options.placeholder,
            oninput: (e)=>{
                if (this.options.oninput) this.options.oninput(e);
            }
        }, this.options.value)) : _mithrilDefault.default("input", {
            class: "mdc-text-field__input",
            type: this.options.type,
            pattern: this.options.pattern,
            minlength: this.options.minlength,
            maxlength: this.options.maxlength,
            placeholder: this.options.placeholder,
            disabled: this.options.disabled,
            value: this.options.value,
            oninput: (e)=>{
                if (this.options.oninput) this.options.oninput(e);
            }
        }), this.options.iconTrailing && _mithrilDefault.default("i", {
            class: "material-icons mdc-text-field__icon mdc-text-field__icon--trailing",
            tabindex: this.options.iconTrailing.onclick ? '0' : null,
            role: this.options.iconTrailing.onclick ? 'button' : null,
            onclick: this.options.iconTrailing.onclick
        }, this.options.iconTrailing.icon), this.options.filled && _mithrilDefault.default("span", {
            class: "mdc-line-ripple"
        })));
    }
}
module.exports = TextField;

},{"mithril":"1zcoP","@material/textfield":"iAIQW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iAIQW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _adapter = require("./adapter");
parcelHelpers.exportAll(_adapter, exports);
var _component = require("./component");
parcelHelpers.exportAll(_component, exports);
var _constants = require("./constants");
parcelHelpers.exportAll(_constants, exports);
var _foundation = require("./foundation");
parcelHelpers.exportAll(_foundation, exports);
var _types = require("./types");
parcelHelpers.exportAll(_types, exports);
var _index = require("./character-counter/index");
parcelHelpers.exportAll(_index, exports);
var _index1 = require("./helper-text/index");
parcelHelpers.exportAll(_index1, exports);
var _index2 = require("./icon/index");
parcelHelpers.exportAll(_index2, exports);

},{"./adapter":"9lQks","./component":"druY6","./constants":"wdBr4","./foundation":"2UHkh","./types":"4SZIS","./character-counter/index":"8ibHT","./helper-text/index":"j9yda","./icon/index":"82Zgi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9lQks":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"druY6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCTextField", ()=>MDCTextField1
);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _component = require("@material/base/component");
var _events = require("@material/dom/events");
var _ponyfill = require("@material/dom/ponyfill");
var _component1 = require("@material/floating-label/component");
var _component2 = require("@material/line-ripple/component");
var _component3 = require("@material/notched-outline/component");
var _component4 = require("@material/ripple/component");
var _foundation = require("@material/ripple/foundation");
var _component5 = require("./character-counter/component");
var _foundation1 = require("./character-counter/foundation");
var _constants = require("./constants");
var _foundation2 = require("./foundation");
var _component6 = require("./helper-text/component");
var _foundation3 = require("./helper-text/foundation");
var _component7 = require("./icon/component");
var MDCTextField1 = function(_super) {
    _tslib.__extends(MDCTextField, _super);
    function MDCTextField() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCTextField.attachTo = function(root) {
        return new MDCTextField(root);
    };
    MDCTextField.prototype.initialize = function(rippleFactory, lineRippleFactory, helperTextFactory, characterCounterFactory, iconFactory, labelFactory, outlineFactory) {
        if (rippleFactory === void 0) rippleFactory = function(el, foundation) {
            return new _component4.MDCRipple(el, foundation);
        };
        if (lineRippleFactory === void 0) lineRippleFactory = function(el) {
            return new _component2.MDCLineRipple(el);
        };
        if (helperTextFactory === void 0) helperTextFactory = function(el) {
            return new _component6.MDCTextFieldHelperText(el);
        };
        if (characterCounterFactory === void 0) characterCounterFactory = function(el) {
            return new _component5.MDCTextFieldCharacterCounter(el);
        };
        if (iconFactory === void 0) iconFactory = function(el) {
            return new _component7.MDCTextFieldIcon(el);
        };
        if (labelFactory === void 0) labelFactory = function(el) {
            return new _component1.MDCFloatingLabel(el);
        };
        if (outlineFactory === void 0) outlineFactory = function(el) {
            return new _component3.MDCNotchedOutline(el);
        };
        this.input = this.root.querySelector(_constants.strings.INPUT_SELECTOR);
        var labelElement = this.root.querySelector(_constants.strings.LABEL_SELECTOR);
        this.label = labelElement ? labelFactory(labelElement) : null;
        var lineRippleElement = this.root.querySelector(_constants.strings.LINE_RIPPLE_SELECTOR);
        this.lineRipple = lineRippleElement ? lineRippleFactory(lineRippleElement) : null;
        var outlineElement = this.root.querySelector(_constants.strings.OUTLINE_SELECTOR);
        this.outline = outlineElement ? outlineFactory(outlineElement) : null;
        // Helper text
        var helperTextStrings = _foundation3.MDCTextFieldHelperTextFoundation.strings;
        var nextElementSibling = this.root.nextElementSibling;
        var hasHelperLine = nextElementSibling && nextElementSibling.classList.contains(_constants.cssClasses.HELPER_LINE);
        var helperTextEl = hasHelperLine && nextElementSibling && nextElementSibling.querySelector(helperTextStrings.ROOT_SELECTOR);
        this.helperText = helperTextEl ? helperTextFactory(helperTextEl) : null;
        // Character counter
        var characterCounterStrings = _foundation1.MDCTextFieldCharacterCounterFoundation.strings;
        var characterCounterEl = this.root.querySelector(characterCounterStrings.ROOT_SELECTOR);
        // If character counter is not found in root element search in sibling element.
        if (!characterCounterEl && hasHelperLine && nextElementSibling) characterCounterEl = nextElementSibling.querySelector(characterCounterStrings.ROOT_SELECTOR);
        this.characterCounter = characterCounterEl ? characterCounterFactory(characterCounterEl) : null;
        // Leading icon
        var leadingIconEl = this.root.querySelector(_constants.strings.LEADING_ICON_SELECTOR);
        this.leadingIcon = leadingIconEl ? iconFactory(leadingIconEl) : null;
        // Trailing icon
        var trailingIconEl = this.root.querySelector(_constants.strings.TRAILING_ICON_SELECTOR);
        this.trailingIcon = trailingIconEl ? iconFactory(trailingIconEl) : null;
        // Prefix and Suffix
        this.prefix = this.root.querySelector(_constants.strings.PREFIX_SELECTOR);
        this.suffix = this.root.querySelector(_constants.strings.SUFFIX_SELECTOR);
        this.ripple = this.createRipple(rippleFactory);
    };
    MDCTextField.prototype.destroy = function() {
        if (this.ripple) this.ripple.destroy();
        if (this.lineRipple) this.lineRipple.destroy();
        if (this.helperText) this.helperText.destroy();
        if (this.characterCounter) this.characterCounter.destroy();
        if (this.leadingIcon) this.leadingIcon.destroy();
        if (this.trailingIcon) this.trailingIcon.destroy();
        if (this.label) this.label.destroy();
        if (this.outline) this.outline.destroy();
        _super.prototype.destroy.call(this);
    };
    /**
     * Initializes the Text Field's internal state based on the environment's
     * state.
     */ MDCTextField.prototype.initialSyncWithDOM = function() {
        this.disabled = this.input.disabled;
    };
    Object.defineProperty(MDCTextField.prototype, "value", {
        get: function() {
            return this.foundation.getValue();
        },
        /**
         * @param value The value to set on the input.
         */ set: function(value) {
            this.foundation.setValue(value);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextField.prototype, "disabled", {
        get: function() {
            return this.foundation.isDisabled();
        },
        /**
         * @param disabled Sets the Text Field disabled or enabled.
         */ set: function(disabled) {
            this.foundation.setDisabled(disabled);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextField.prototype, "valid", {
        get: function() {
            return this.foundation.isValid();
        },
        /**
         * @param valid Sets the Text Field valid or invalid.
         */ set: function(valid) {
            this.foundation.setValid(valid);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextField.prototype, "required", {
        get: function() {
            return this.input.required;
        },
        /**
         * @param required Sets the Text Field to required.
         */ set: function(required) {
            this.input.required = required;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextField.prototype, "pattern", {
        get: function() {
            return this.input.pattern;
        },
        /**
         * @param pattern Sets the input element's validation pattern.
         */ set: function(pattern) {
            this.input.pattern = pattern;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextField.prototype, "minLength", {
        get: function() {
            return this.input.minLength;
        },
        /**
         * @param minLength Sets the input element's minLength.
         */ set: function(minLength) {
            this.input.minLength = minLength;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextField.prototype, "maxLength", {
        get: function() {
            return this.input.maxLength;
        },
        /**
         * @param maxLength Sets the input element's maxLength.
         */ set: function(maxLength) {
            // Chrome throws exception if maxLength is set to a value less than zero
            if (maxLength < 0) this.input.removeAttribute('maxLength');
            else this.input.maxLength = maxLength;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextField.prototype, "min", {
        get: function() {
            return this.input.min;
        },
        /**
         * @param min Sets the input element's min.
         */ set: function(min) {
            this.input.min = min;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextField.prototype, "max", {
        get: function() {
            return this.input.max;
        },
        /**
         * @param max Sets the input element's max.
         */ set: function(max) {
            this.input.max = max;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextField.prototype, "step", {
        get: function() {
            return this.input.step;
        },
        /**
         * @param step Sets the input element's step.
         */ set: function(step) {
            this.input.step = step;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextField.prototype, "helperTextContent", {
        /**
         * Sets the helper text element content.
         */ set: function(content) {
            this.foundation.setHelperTextContent(content);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextField.prototype, "leadingIconAriaLabel", {
        /**
         * Sets the aria label of the leading icon.
         */ set: function(label) {
            this.foundation.setLeadingIconAriaLabel(label);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextField.prototype, "leadingIconContent", {
        /**
         * Sets the text content of the leading icon.
         */ set: function(content) {
            this.foundation.setLeadingIconContent(content);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextField.prototype, "trailingIconAriaLabel", {
        /**
         * Sets the aria label of the trailing icon.
         */ set: function(label) {
            this.foundation.setTrailingIconAriaLabel(label);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextField.prototype, "trailingIconContent", {
        /**
         * Sets the text content of the trailing icon.
         */ set: function(content) {
            this.foundation.setTrailingIconContent(content);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextField.prototype, "useNativeValidation", {
        /**
         * Enables or disables the use of native validation. Use this for custom validation.
         * @param useNativeValidation Set this to false to ignore native input validation.
         */ set: function(useNativeValidation) {
            this.foundation.setUseNativeValidation(useNativeValidation);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextField.prototype, "prefixText", {
        /**
         * Gets the text content of the prefix, or null if it does not exist.
         */ get: function() {
            return this.prefix ? this.prefix.textContent : null;
        },
        /**
         * Sets the text content of the prefix, if it exists.
         */ set: function(prefixText) {
            if (this.prefix) this.prefix.textContent = prefixText;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextField.prototype, "suffixText", {
        /**
         * Gets the text content of the suffix, or null if it does not exist.
         */ get: function() {
            return this.suffix ? this.suffix.textContent : null;
        },
        /**
         * Sets the text content of the suffix, if it exists.
         */ set: function(suffixText) {
            if (this.suffix) this.suffix.textContent = suffixText;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Focuses the input element.
     */ MDCTextField.prototype.focus = function() {
        this.input.focus();
    };
    /**
     * Recomputes the outline SVG path for the outline element.
     */ MDCTextField.prototype.layout = function() {
        var openNotch = this.foundation.shouldFloat;
        this.foundation.notchOutline(openNotch);
    };
    MDCTextField.prototype.getDefaultFoundation = function() {
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        var adapter = _tslib.__assign(_tslib.__assign(_tslib.__assign(_tslib.__assign(_tslib.__assign({
        }, this.getRootAdapterMethods()), this.getInputAdapterMethods()), this.getLabelAdapterMethods()), this.getLineRippleAdapterMethods()), this.getOutlineAdapterMethods());
        // tslint:enable:object-literal-sort-keys
        return new _foundation2.MDCTextFieldFoundation(adapter, this.getFoundationMap());
    };
    MDCTextField.prototype.getRootAdapterMethods = function() {
        var _this = this;
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
            addClass: function(className) {
                return _this.root.classList.add(className);
            },
            removeClass: function(className) {
                return _this.root.classList.remove(className);
            },
            hasClass: function(className) {
                return _this.root.classList.contains(className);
            },
            registerTextFieldInteractionHandler: function(evtType, handler) {
                _this.listen(evtType, handler);
            },
            deregisterTextFieldInteractionHandler: function(evtType, handler) {
                _this.unlisten(evtType, handler);
            },
            registerValidationAttributeChangeHandler: function(handler) {
                var getAttributesList = function(mutationsList) {
                    return mutationsList.map(function(mutation) {
                        return mutation.attributeName;
                    }).filter(function(attributeName) {
                        return attributeName;
                    });
                };
                var observer = new MutationObserver(function(mutationsList) {
                    return handler(getAttributesList(mutationsList));
                });
                var config = {
                    attributes: true
                };
                observer.observe(_this.input, config);
                return observer;
            },
            deregisterValidationAttributeChangeHandler: function(observer) {
                observer.disconnect();
            }
        };
    // tslint:enable:object-literal-sort-keys
    };
    MDCTextField.prototype.getInputAdapterMethods = function() {
        var _this = this;
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        return {
            getNativeInput: function() {
                return _this.input;
            },
            setInputAttr: function(attr, value) {
                _this.input.setAttribute(attr, value);
            },
            removeInputAttr: function(attr) {
                _this.input.removeAttribute(attr);
            },
            isFocused: function() {
                return document.activeElement === _this.input;
            },
            registerInputInteractionHandler: function(evtType, handler) {
                _this.input.addEventListener(evtType, handler, _events.applyPassive());
            },
            deregisterInputInteractionHandler: function(evtType, handler) {
                _this.input.removeEventListener(evtType, handler, _events.applyPassive());
            }
        };
    // tslint:enable:object-literal-sort-keys
    };
    MDCTextField.prototype.getLabelAdapterMethods = function() {
        var _this = this;
        return {
            floatLabel: function(shouldFloat) {
                _this.label && _this.label.float(shouldFloat);
            },
            getLabelWidth: function() {
                return _this.label ? _this.label.getWidth() : 0;
            },
            hasLabel: function() {
                return Boolean(_this.label);
            },
            shakeLabel: function(shouldShake) {
                _this.label && _this.label.shake(shouldShake);
            },
            setLabelRequired: function(isRequired) {
                _this.label && _this.label.setRequired(isRequired);
            }
        };
    };
    MDCTextField.prototype.getLineRippleAdapterMethods = function() {
        var _this = this;
        return {
            activateLineRipple: function() {
                if (_this.lineRipple) _this.lineRipple.activate();
            },
            deactivateLineRipple: function() {
                if (_this.lineRipple) _this.lineRipple.deactivate();
            },
            setLineRippleTransformOrigin: function(normalizedX) {
                if (_this.lineRipple) _this.lineRipple.setRippleCenter(normalizedX);
            }
        };
    };
    MDCTextField.prototype.getOutlineAdapterMethods = function() {
        var _this = this;
        return {
            closeOutline: function() {
                _this.outline && _this.outline.closeNotch();
            },
            hasOutline: function() {
                return Boolean(_this.outline);
            },
            notchOutline: function(labelWidth) {
                _this.outline && _this.outline.notch(labelWidth);
            }
        };
    };
    /**
     * @return A map of all subcomponents to subfoundations.
     */ MDCTextField.prototype.getFoundationMap = function() {
        return {
            characterCounter: this.characterCounter ? this.characterCounter.foundationForTextField : undefined,
            helperText: this.helperText ? this.helperText.foundationForTextField : undefined,
            leadingIcon: this.leadingIcon ? this.leadingIcon.foundationForTextField : undefined,
            trailingIcon: this.trailingIcon ? this.trailingIcon.foundationForTextField : undefined
        };
    };
    MDCTextField.prototype.createRipple = function(rippleFactory) {
        var _this = this;
        var isTextArea = this.root.classList.contains(_constants.cssClasses.TEXTAREA);
        var isOutlined = this.root.classList.contains(_constants.cssClasses.OUTLINED);
        if (isTextArea || isOutlined) return null;
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        var adapter = _tslib.__assign(_tslib.__assign({
        }, _component4.MDCRipple.createAdapter(this)), {
            isSurfaceActive: function() {
                return _ponyfill.matches(_this.input, ':active');
            },
            registerInteractionHandler: function(evtType, handler) {
                _this.input.addEventListener(evtType, handler, _events.applyPassive());
            },
            deregisterInteractionHandler: function(evtType, handler) {
                _this.input.removeEventListener(evtType, handler, _events.applyPassive());
            }
        });
        // tslint:enable:object-literal-sort-keys
        return rippleFactory(this.root, new _foundation.MDCRippleFoundation(adapter));
    };
    return MDCTextField;
}(_component.MDCComponent);

},{"tslib":"lRdW5","@material/base/component":"jLptS","@material/dom/events":"87xmx","@material/dom/ponyfill":"8pLcv","@material/floating-label/component":"larjq","@material/line-ripple/component":"4xpf3","@material/notched-outline/component":"ibiBS","@material/ripple/component":"035sE","@material/ripple/foundation":"7frpT","./character-counter/component":"hwtce","./character-counter/foundation":"dpux4","./constants":"wdBr4","./foundation":"2UHkh","./helper-text/component":"bX2wx","./helper-text/foundation":"5gLP0","./icon/component":"gn4Te","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hwtce":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCTextFieldCharacterCounter", ()=>MDCTextFieldCharacterCounter1
);
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _component = require("@material/base/component");
var _foundation = require("./foundation");
var MDCTextFieldCharacterCounter1 = function(_super) {
    _tslib.__extends(MDCTextFieldCharacterCounter, _super);
    function MDCTextFieldCharacterCounter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCTextFieldCharacterCounter.attachTo = function(root) {
        return new MDCTextFieldCharacterCounter(root);
    };
    Object.defineProperty(MDCTextFieldCharacterCounter.prototype, "foundationForTextField", {
        // Provided for access by MDCTextField component
        get: function() {
            return this.foundation;
        },
        enumerable: false,
        configurable: true
    });
    MDCTextFieldCharacterCounter.prototype.getDefaultFoundation = function() {
        var _this = this;
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        var adapter = {
            setContent: function(content) {
                _this.root.textContent = content;
            }
        };
        return new _foundation.MDCTextFieldCharacterCounterFoundation(adapter);
    };
    return MDCTextFieldCharacterCounter;
}(_component.MDCComponent);

},{"tslib":"lRdW5","@material/base/component":"jLptS","./foundation":"dpux4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dpux4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCTextFieldCharacterCounterFoundation", ()=>MDCTextFieldCharacterCounterFoundation1
);
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _foundation = require("@material/base/foundation");
var _constants = require("./constants");
var MDCTextFieldCharacterCounterFoundation1 = function(_super) {
    _tslib.__extends(MDCTextFieldCharacterCounterFoundation, _super);
    function MDCTextFieldCharacterCounterFoundation(adapter) {
        return _super.call(this, _tslib.__assign(_tslib.__assign({
        }, MDCTextFieldCharacterCounterFoundation.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCTextFieldCharacterCounterFoundation, "cssClasses", {
        get: function() {
            return _constants.cssClasses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextFieldCharacterCounterFoundation, "strings", {
        get: function() {
            return _constants.strings;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextFieldCharacterCounterFoundation, "defaultAdapter", {
        /**
         * See {@link MDCTextFieldCharacterCounterAdapter} for typing information on parameters and return types.
         */ get: function() {
            return {
                setContent: function() {
                    return undefined;
                }
            };
        },
        enumerable: false,
        configurable: true
    });
    MDCTextFieldCharacterCounterFoundation.prototype.setCounterValue = function(currentLength, maxLength) {
        currentLength = Math.min(currentLength, maxLength);
        this.adapter.setContent(currentLength + " / " + maxLength);
    };
    return MDCTextFieldCharacterCounterFoundation;
}(_foundation.MDCFoundation);
exports.default = MDCTextFieldCharacterCounterFoundation1;

},{"tslib":"lRdW5","@material/base/foundation":"kC5Yw","./constants":"1cPx3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1cPx3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "strings", ()=>strings
);
parcelHelpers.export(exports, "cssClasses", ()=>cssClasses
);
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var cssClasses = {
    ROOT: 'mdc-text-field-character-counter'
};
var strings = {
    ROOT_SELECTOR: "." + cssClasses.ROOT
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"wdBr4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cssClasses", ()=>cssClasses
);
parcelHelpers.export(exports, "strings", ()=>strings
);
parcelHelpers.export(exports, "numbers", ()=>numbers
);
parcelHelpers.export(exports, "VALIDATION_ATTR_WHITELIST", ()=>VALIDATION_ATTR_WHITELIST
);
parcelHelpers.export(exports, "ALWAYS_FLOAT_TYPES", ()=>ALWAYS_FLOAT_TYPES
);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var strings = {
    ARIA_CONTROLS: 'aria-controls',
    ARIA_DESCRIBEDBY: 'aria-describedby',
    INPUT_SELECTOR: '.mdc-text-field__input',
    LABEL_SELECTOR: '.mdc-floating-label',
    LEADING_ICON_SELECTOR: '.mdc-text-field__icon--leading',
    LINE_RIPPLE_SELECTOR: '.mdc-line-ripple',
    OUTLINE_SELECTOR: '.mdc-notched-outline',
    PREFIX_SELECTOR: '.mdc-text-field__affix--prefix',
    SUFFIX_SELECTOR: '.mdc-text-field__affix--suffix',
    TRAILING_ICON_SELECTOR: '.mdc-text-field__icon--trailing'
};
var cssClasses = {
    DISABLED: 'mdc-text-field--disabled',
    FOCUSED: 'mdc-text-field--focused',
    HELPER_LINE: 'mdc-text-field-helper-line',
    INVALID: 'mdc-text-field--invalid',
    LABEL_FLOATING: 'mdc-text-field--label-floating',
    NO_LABEL: 'mdc-text-field--no-label',
    OUTLINED: 'mdc-text-field--outlined',
    ROOT: 'mdc-text-field',
    TEXTAREA: 'mdc-text-field--textarea',
    WITH_LEADING_ICON: 'mdc-text-field--with-leading-icon',
    WITH_TRAILING_ICON: 'mdc-text-field--with-trailing-icon',
    WITH_INTERNAL_COUNTER: 'mdc-text-field--with-internal-counter'
};
var numbers = {
    LABEL_SCALE: 0.75
};
/**
 * Whitelist based off of
 * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation
 * under the "Validation-related attributes" section.
 */ var VALIDATION_ATTR_WHITELIST = [
    'pattern',
    'min',
    'max',
    'required',
    'step',
    'minlength',
    'maxlength', 
];
/**
 * Label should always float for these types as they show some UI even if value
 * is empty.
 */ var ALWAYS_FLOAT_TYPES = [
    'color',
    'date',
    'datetime-local',
    'month',
    'range',
    'time',
    'week', 
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2UHkh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCTextFieldFoundation", ()=>MDCTextFieldFoundation1
);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _foundation = require("@material/base/foundation");
var _constants = require("./constants");
var POINTERDOWN_EVENTS = [
    'mousedown',
    'touchstart'
];
var INTERACTION_EVENTS = [
    'click',
    'keydown'
];
var MDCTextFieldFoundation1 = function(_super) {
    _tslib.__extends(MDCTextFieldFoundation, _super);
    /**
     * @param adapter
     * @param foundationMap Map from subcomponent names to their subfoundations.
     */ function MDCTextFieldFoundation(adapter, foundationMap) {
        if (foundationMap === void 0) foundationMap = {
        };
        var _this = _super.call(this, _tslib.__assign(_tslib.__assign({
        }, MDCTextFieldFoundation.defaultAdapter), adapter)) || this;
        _this.isFocused = false;
        _this.receivedUserInput = false;
        _this.valid = true;
        _this.useNativeValidation = true;
        _this.validateOnValueChange = true;
        _this.helperText = foundationMap.helperText;
        _this.characterCounter = foundationMap.characterCounter;
        _this.leadingIcon = foundationMap.leadingIcon;
        _this.trailingIcon = foundationMap.trailingIcon;
        _this.inputFocusHandler = function() {
            _this.activateFocus();
        };
        _this.inputBlurHandler = function() {
            _this.deactivateFocus();
        };
        _this.inputInputHandler = function() {
            _this.handleInput();
        };
        _this.setPointerXOffset = function(evt) {
            _this.setTransformOrigin(evt);
        };
        _this.textFieldInteractionHandler = function() {
            _this.handleTextFieldInteraction();
        };
        _this.validationAttributeChangeHandler = function(attributesList) {
            _this.handleValidationAttributeChange(attributesList);
        };
        return _this;
    }
    Object.defineProperty(MDCTextFieldFoundation, "cssClasses", {
        get: function() {
            return _constants.cssClasses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation, "strings", {
        get: function() {
            return _constants.strings;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation, "numbers", {
        get: function() {
            return _constants.numbers;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldAlwaysFloat", {
        get: function() {
            var type = this.getNativeInput().type;
            return _constants.ALWAYS_FLOAT_TYPES.indexOf(type) >= 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldFloat", {
        get: function() {
            return this.shouldAlwaysFloat || this.isFocused || !!this.getValue() || this.isBadInput();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldShake", {
        get: function() {
            return !this.isFocused && !this.isValid() && !!this.getValue();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation, "defaultAdapter", {
        /**
         * See {@link MDCTextFieldAdapter} for typing information on parameters and
         * return types.
         */ get: function() {
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            return {
                addClass: function() {
                    return undefined;
                },
                removeClass: function() {
                    return undefined;
                },
                hasClass: function() {
                    return true;
                },
                setInputAttr: function() {
                    return undefined;
                },
                removeInputAttr: function() {
                    return undefined;
                },
                registerTextFieldInteractionHandler: function() {
                    return undefined;
                },
                deregisterTextFieldInteractionHandler: function() {
                    return undefined;
                },
                registerInputInteractionHandler: function() {
                    return undefined;
                },
                deregisterInputInteractionHandler: function() {
                    return undefined;
                },
                registerValidationAttributeChangeHandler: function() {
                    return new MutationObserver(function() {
                        return undefined;
                    });
                },
                deregisterValidationAttributeChangeHandler: function() {
                    return undefined;
                },
                getNativeInput: function() {
                    return null;
                },
                isFocused: function() {
                    return false;
                },
                activateLineRipple: function() {
                    return undefined;
                },
                deactivateLineRipple: function() {
                    return undefined;
                },
                setLineRippleTransformOrigin: function() {
                    return undefined;
                },
                shakeLabel: function() {
                    return undefined;
                },
                floatLabel: function() {
                    return undefined;
                },
                setLabelRequired: function() {
                    return undefined;
                },
                hasLabel: function() {
                    return false;
                },
                getLabelWidth: function() {
                    return 0;
                },
                hasOutline: function() {
                    return false;
                },
                notchOutline: function() {
                    return undefined;
                },
                closeOutline: function() {
                    return undefined;
                }
            };
        // tslint:enable:object-literal-sort-keys
        },
        enumerable: false,
        configurable: true
    });
    MDCTextFieldFoundation.prototype.init = function() {
        var e_1, _a, e_2, _b;
        if (this.adapter.hasLabel() && this.getNativeInput().required) this.adapter.setLabelRequired(true);
        if (this.adapter.isFocused()) this.inputFocusHandler();
        else if (this.adapter.hasLabel() && this.shouldFloat) {
            this.notchOutline(true);
            this.adapter.floatLabel(true);
            this.styleFloating(true);
        }
        this.adapter.registerInputInteractionHandler('focus', this.inputFocusHandler);
        this.adapter.registerInputInteractionHandler('blur', this.inputBlurHandler);
        this.adapter.registerInputInteractionHandler('input', this.inputInputHandler);
        try {
            for(var POINTERDOWN_EVENTS_1 = _tslib.__values(POINTERDOWN_EVENTS), POINTERDOWN_EVENTS_1_1 = POINTERDOWN_EVENTS_1.next(); !POINTERDOWN_EVENTS_1_1.done; POINTERDOWN_EVENTS_1_1 = POINTERDOWN_EVENTS_1.next()){
                var evtType = POINTERDOWN_EVENTS_1_1.value;
                this.adapter.registerInputInteractionHandler(evtType, this.setPointerXOffset);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (POINTERDOWN_EVENTS_1_1 && !POINTERDOWN_EVENTS_1_1.done && (_a = POINTERDOWN_EVENTS_1.return)) _a.call(POINTERDOWN_EVENTS_1);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        try {
            for(var INTERACTION_EVENTS_1 = _tslib.__values(INTERACTION_EVENTS), INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next(); !INTERACTION_EVENTS_1_1.done; INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next()){
                var evtType = INTERACTION_EVENTS_1_1.value;
                this.adapter.registerTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler);
            }
        } catch (e_2_1) {
            e_2 = {
                error: e_2_1
            };
        } finally{
            try {
                if (INTERACTION_EVENTS_1_1 && !INTERACTION_EVENTS_1_1.done && (_b = INTERACTION_EVENTS_1.return)) _b.call(INTERACTION_EVENTS_1);
            } finally{
                if (e_2) throw e_2.error;
            }
        }
        this.validationObserver = this.adapter.registerValidationAttributeChangeHandler(this.validationAttributeChangeHandler);
        this.setcharacterCounter(this.getValue().length);
    };
    MDCTextFieldFoundation.prototype.destroy = function() {
        var e_3, _a, e_4, _b;
        this.adapter.deregisterInputInteractionHandler('focus', this.inputFocusHandler);
        this.adapter.deregisterInputInteractionHandler('blur', this.inputBlurHandler);
        this.adapter.deregisterInputInteractionHandler('input', this.inputInputHandler);
        try {
            for(var POINTERDOWN_EVENTS_2 = _tslib.__values(POINTERDOWN_EVENTS), POINTERDOWN_EVENTS_2_1 = POINTERDOWN_EVENTS_2.next(); !POINTERDOWN_EVENTS_2_1.done; POINTERDOWN_EVENTS_2_1 = POINTERDOWN_EVENTS_2.next()){
                var evtType = POINTERDOWN_EVENTS_2_1.value;
                this.adapter.deregisterInputInteractionHandler(evtType, this.setPointerXOffset);
            }
        } catch (e_3_1) {
            e_3 = {
                error: e_3_1
            };
        } finally{
            try {
                if (POINTERDOWN_EVENTS_2_1 && !POINTERDOWN_EVENTS_2_1.done && (_a = POINTERDOWN_EVENTS_2.return)) _a.call(POINTERDOWN_EVENTS_2);
            } finally{
                if (e_3) throw e_3.error;
            }
        }
        try {
            for(var INTERACTION_EVENTS_2 = _tslib.__values(INTERACTION_EVENTS), INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next(); !INTERACTION_EVENTS_2_1.done; INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next()){
                var evtType = INTERACTION_EVENTS_2_1.value;
                this.adapter.deregisterTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler);
            }
        } catch (e_4_1) {
            e_4 = {
                error: e_4_1
            };
        } finally{
            try {
                if (INTERACTION_EVENTS_2_1 && !INTERACTION_EVENTS_2_1.done && (_b = INTERACTION_EVENTS_2.return)) _b.call(INTERACTION_EVENTS_2);
            } finally{
                if (e_4) throw e_4.error;
            }
        }
        this.adapter.deregisterValidationAttributeChangeHandler(this.validationObserver);
    };
    /**
     * Handles user interactions with the Text Field.
     */ MDCTextFieldFoundation.prototype.handleTextFieldInteraction = function() {
        var nativeInput = this.adapter.getNativeInput();
        if (nativeInput && nativeInput.disabled) return;
        this.receivedUserInput = true;
    };
    /**
     * Handles validation attribute changes
     */ MDCTextFieldFoundation.prototype.handleValidationAttributeChange = function(attributesList) {
        var _this = this;
        attributesList.some(function(attributeName) {
            if (_constants.VALIDATION_ATTR_WHITELIST.indexOf(attributeName) > -1) {
                _this.styleValidity(true);
                _this.adapter.setLabelRequired(_this.getNativeInput().required);
                return true;
            }
            return false;
        });
        if (attributesList.indexOf('maxlength') > -1) this.setcharacterCounter(this.getValue().length);
    };
    /**
     * Opens/closes the notched outline.
     */ MDCTextFieldFoundation.prototype.notchOutline = function(openNotch) {
        if (!this.adapter.hasOutline() || !this.adapter.hasLabel()) return;
        if (openNotch) {
            var labelWidth = this.adapter.getLabelWidth() * _constants.numbers.LABEL_SCALE;
            this.adapter.notchOutline(labelWidth);
        } else this.adapter.closeOutline();
    };
    /**
     * Activates the text field focus state.
     */ MDCTextFieldFoundation.prototype.activateFocus = function() {
        this.isFocused = true;
        this.styleFocused(this.isFocused);
        this.adapter.activateLineRipple();
        if (this.adapter.hasLabel()) {
            this.notchOutline(this.shouldFloat);
            this.adapter.floatLabel(this.shouldFloat);
            this.styleFloating(this.shouldFloat);
            this.adapter.shakeLabel(this.shouldShake);
        }
        if (this.helperText && (this.helperText.isPersistent() || !this.helperText.isValidation() || !this.valid)) this.helperText.showToScreenReader();
    };
    /**
     * Sets the line ripple's transform origin, so that the line ripple activate
     * animation will animate out from the user's click location.
     */ MDCTextFieldFoundation.prototype.setTransformOrigin = function(evt) {
        if (this.isDisabled() || this.adapter.hasOutline()) return;
        var touches = evt.touches;
        var targetEvent = touches ? touches[0] : evt;
        var targetClientRect = targetEvent.target.getBoundingClientRect();
        var normalizedX = targetEvent.clientX - targetClientRect.left;
        this.adapter.setLineRippleTransformOrigin(normalizedX);
    };
    /**
     * Handles input change of text input and text area.
     */ MDCTextFieldFoundation.prototype.handleInput = function() {
        this.autoCompleteFocus();
        this.setcharacterCounter(this.getValue().length);
    };
    /**
     * Activates the Text Field's focus state in cases when the input value
     * changes without user input (e.g. programmatically).
     */ MDCTextFieldFoundation.prototype.autoCompleteFocus = function() {
        if (!this.receivedUserInput) this.activateFocus();
    };
    /**
     * Deactivates the Text Field's focus state.
     */ MDCTextFieldFoundation.prototype.deactivateFocus = function() {
        this.isFocused = false;
        this.adapter.deactivateLineRipple();
        var isValid = this.isValid();
        this.styleValidity(isValid);
        this.styleFocused(this.isFocused);
        if (this.adapter.hasLabel()) {
            this.notchOutline(this.shouldFloat);
            this.adapter.floatLabel(this.shouldFloat);
            this.styleFloating(this.shouldFloat);
            this.adapter.shakeLabel(this.shouldShake);
        }
        if (!this.shouldFloat) this.receivedUserInput = false;
    };
    MDCTextFieldFoundation.prototype.getValue = function() {
        return this.getNativeInput().value;
    };
    /**
     * @param value The value to set on the input Element.
     */ MDCTextFieldFoundation.prototype.setValue = function(value) {
        // Prevent Safari from moving the caret to the end of the input when the
        // value has not changed.
        if (this.getValue() !== value) this.getNativeInput().value = value;
        this.setcharacterCounter(value.length);
        if (this.validateOnValueChange) {
            var isValid = this.isValid();
            this.styleValidity(isValid);
        }
        if (this.adapter.hasLabel()) {
            this.notchOutline(this.shouldFloat);
            this.adapter.floatLabel(this.shouldFloat);
            this.styleFloating(this.shouldFloat);
            if (this.validateOnValueChange) this.adapter.shakeLabel(this.shouldShake);
        }
    };
    /**
     * @return The custom validity state, if set; otherwise, the result of a
     *     native validity check.
     */ MDCTextFieldFoundation.prototype.isValid = function() {
        return this.useNativeValidation ? this.isNativeInputValid() : this.valid;
    };
    /**
     * @param isValid Sets the custom validity state of the Text Field.
     */ MDCTextFieldFoundation.prototype.setValid = function(isValid) {
        this.valid = isValid;
        this.styleValidity(isValid);
        var shouldShake = !isValid && !this.isFocused && !!this.getValue();
        if (this.adapter.hasLabel()) this.adapter.shakeLabel(shouldShake);
    };
    /**
     * @param shouldValidate Whether or not validity should be updated on
     *     value change.
     */ MDCTextFieldFoundation.prototype.setValidateOnValueChange = function(shouldValidate) {
        this.validateOnValueChange = shouldValidate;
    };
    /**
     * @return Whether or not validity should be updated on value change. `true`
     *     by default.
     */ MDCTextFieldFoundation.prototype.getValidateOnValueChange = function() {
        return this.validateOnValueChange;
    };
    /**
     * Enables or disables the use of native validation. Use this for custom
     * validation.
     * @param useNativeValidation Set this to false to ignore native input
     *     validation.
     */ MDCTextFieldFoundation.prototype.setUseNativeValidation = function(useNativeValidation) {
        this.useNativeValidation = useNativeValidation;
    };
    MDCTextFieldFoundation.prototype.isDisabled = function() {
        return this.getNativeInput().disabled;
    };
    /**
     * @param disabled Sets the text-field disabled or enabled.
     */ MDCTextFieldFoundation.prototype.setDisabled = function(disabled) {
        this.getNativeInput().disabled = disabled;
        this.styleDisabled(disabled);
    };
    /**
     * @param content Sets the content of the helper text.
     */ MDCTextFieldFoundation.prototype.setHelperTextContent = function(content) {
        if (this.helperText) this.helperText.setContent(content);
    };
    /**
     * Sets the aria label of the leading icon.
     */ MDCTextFieldFoundation.prototype.setLeadingIconAriaLabel = function(label) {
        if (this.leadingIcon) this.leadingIcon.setAriaLabel(label);
    };
    /**
     * Sets the text content of the leading icon.
     */ MDCTextFieldFoundation.prototype.setLeadingIconContent = function(content) {
        if (this.leadingIcon) this.leadingIcon.setContent(content);
    };
    /**
     * Sets the aria label of the trailing icon.
     */ MDCTextFieldFoundation.prototype.setTrailingIconAriaLabel = function(label) {
        if (this.trailingIcon) this.trailingIcon.setAriaLabel(label);
    };
    /**
     * Sets the text content of the trailing icon.
     */ MDCTextFieldFoundation.prototype.setTrailingIconContent = function(content) {
        if (this.trailingIcon) this.trailingIcon.setContent(content);
    };
    /**
     * Sets character counter values that shows characters used and the total
     * character limit.
     */ MDCTextFieldFoundation.prototype.setcharacterCounter = function(currentLength) {
        if (!this.characterCounter) return;
        var maxLength = this.getNativeInput().maxLength;
        if (maxLength === -1) throw new Error('MDCTextFieldFoundation: Expected maxlength html property on text input or textarea.');
        this.characterCounter.setCounterValue(currentLength, maxLength);
    };
    /**
     * @return True if the Text Field input fails in converting the user-supplied
     *     value.
     */ MDCTextFieldFoundation.prototype.isBadInput = function() {
        // The badInput property is not supported in IE 11 💩.
        return this.getNativeInput().validity.badInput || false;
    };
    /**
     * @return The result of native validity checking (ValidityState.valid).
     */ MDCTextFieldFoundation.prototype.isNativeInputValid = function() {
        return this.getNativeInput().validity.valid;
    };
    /**
     * Styles the component based on the validity state.
     */ MDCTextFieldFoundation.prototype.styleValidity = function(isValid) {
        var INVALID = MDCTextFieldFoundation.cssClasses.INVALID;
        if (isValid) this.adapter.removeClass(INVALID);
        else this.adapter.addClass(INVALID);
        if (this.helperText) {
            this.helperText.setValidity(isValid);
            // We dynamically set or unset aria-describedby for validation helper text
            // only, based on whether the field is valid
            var helperTextValidation = this.helperText.isValidation();
            if (!helperTextValidation) return;
            var helperTextVisible = this.helperText.isVisible();
            var helperTextId = this.helperText.getId();
            if (helperTextVisible && helperTextId) this.adapter.setInputAttr(_constants.strings.ARIA_DESCRIBEDBY, helperTextId);
            else this.adapter.removeInputAttr(_constants.strings.ARIA_DESCRIBEDBY);
        }
    };
    /**
     * Styles the component based on the focused state.
     */ MDCTextFieldFoundation.prototype.styleFocused = function(isFocused) {
        var FOCUSED = MDCTextFieldFoundation.cssClasses.FOCUSED;
        if (isFocused) this.adapter.addClass(FOCUSED);
        else this.adapter.removeClass(FOCUSED);
    };
    /**
     * Styles the component based on the disabled state.
     */ MDCTextFieldFoundation.prototype.styleDisabled = function(isDisabled) {
        var _a = MDCTextFieldFoundation.cssClasses, DISABLED = _a.DISABLED, INVALID = _a.INVALID;
        if (isDisabled) {
            this.adapter.addClass(DISABLED);
            this.adapter.removeClass(INVALID);
        } else this.adapter.removeClass(DISABLED);
        if (this.leadingIcon) this.leadingIcon.setDisabled(isDisabled);
        if (this.trailingIcon) this.trailingIcon.setDisabled(isDisabled);
    };
    /**
     * Styles the component based on the label floating state.
     */ MDCTextFieldFoundation.prototype.styleFloating = function(isFloating) {
        var LABEL_FLOATING = MDCTextFieldFoundation.cssClasses.LABEL_FLOATING;
        if (isFloating) this.adapter.addClass(LABEL_FLOATING);
        else this.adapter.removeClass(LABEL_FLOATING);
    };
    /**
     * @return The native text input element from the host environment, or an
     *     object with the same shape for unit tests.
     */ MDCTextFieldFoundation.prototype.getNativeInput = function() {
        // this.adapter may be undefined in foundation unit tests. This happens when
        // testdouble is creating a mock object and invokes the
        // shouldShake/shouldFloat getters (which in turn call getValue(), which
        // calls this method) before init() has been called from the MDCTextField
        // constructor. To work around that issue, we return a dummy object.
        var nativeInput = this.adapter ? this.adapter.getNativeInput() : null;
        return nativeInput || {
            disabled: false,
            maxLength: -1,
            required: false,
            type: 'input',
            validity: {
                badInput: false,
                valid: true
            },
            value: ''
        };
    };
    return MDCTextFieldFoundation;
}(_foundation.MDCFoundation);
exports.default = MDCTextFieldFoundation1;

},{"tslib":"lRdW5","@material/base/foundation":"kC5Yw","./constants":"wdBr4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bX2wx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCTextFieldHelperText", ()=>MDCTextFieldHelperText1
);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _component = require("@material/base/component");
var _foundation = require("./foundation");
var MDCTextFieldHelperText1 = function(_super) {
    _tslib.__extends(MDCTextFieldHelperText, _super);
    function MDCTextFieldHelperText() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCTextFieldHelperText.attachTo = function(root) {
        return new MDCTextFieldHelperText(root);
    };
    Object.defineProperty(MDCTextFieldHelperText.prototype, "foundationForTextField", {
        // Provided for access by MDCTextField component
        get: function() {
            return this.foundation;
        },
        enumerable: false,
        configurable: true
    });
    MDCTextFieldHelperText.prototype.getDefaultFoundation = function() {
        var _this = this;
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        var adapter = {
            addClass: function(className) {
                return _this.root.classList.add(className);
            },
            removeClass: function(className) {
                return _this.root.classList.remove(className);
            },
            hasClass: function(className) {
                return _this.root.classList.contains(className);
            },
            getAttr: function(attr) {
                return _this.root.getAttribute(attr);
            },
            setAttr: function(attr, value) {
                return _this.root.setAttribute(attr, value);
            },
            removeAttr: function(attr) {
                return _this.root.removeAttribute(attr);
            },
            setContent: function(content) {
                _this.root.textContent = content;
            }
        };
        // tslint:enable:object-literal-sort-keys
        return new _foundation.MDCTextFieldHelperTextFoundation(adapter);
    };
    return MDCTextFieldHelperText;
}(_component.MDCComponent);

},{"tslib":"lRdW5","@material/base/component":"jLptS","./foundation":"5gLP0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5gLP0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCTextFieldHelperTextFoundation", ()=>MDCTextFieldHelperTextFoundation1
);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _foundation = require("@material/base/foundation");
var _constants = require("./constants");
var MDCTextFieldHelperTextFoundation1 = function(_super) {
    _tslib.__extends(MDCTextFieldHelperTextFoundation, _super);
    function MDCTextFieldHelperTextFoundation(adapter) {
        return _super.call(this, _tslib.__assign(_tslib.__assign({
        }, MDCTextFieldHelperTextFoundation.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCTextFieldHelperTextFoundation, "cssClasses", {
        get: function() {
            return _constants.cssClasses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextFieldHelperTextFoundation, "strings", {
        get: function() {
            return _constants.strings;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextFieldHelperTextFoundation, "defaultAdapter", {
        /**
         * See {@link MDCTextFieldHelperTextAdapter} for typing information on parameters and return types.
         */ get: function() {
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            return {
                addClass: function() {
                    return undefined;
                },
                removeClass: function() {
                    return undefined;
                },
                hasClass: function() {
                    return false;
                },
                getAttr: function() {
                    return null;
                },
                setAttr: function() {
                    return undefined;
                },
                removeAttr: function() {
                    return undefined;
                },
                setContent: function() {
                    return undefined;
                }
            };
        // tslint:enable:object-literal-sort-keys
        },
        enumerable: false,
        configurable: true
    });
    MDCTextFieldHelperTextFoundation.prototype.getId = function() {
        return this.adapter.getAttr('id');
    };
    MDCTextFieldHelperTextFoundation.prototype.isVisible = function() {
        return this.adapter.getAttr(_constants.strings.ARIA_HIDDEN) !== 'true';
    };
    /**
     * Sets the content of the helper text field.
     */ MDCTextFieldHelperTextFoundation.prototype.setContent = function(content) {
        this.adapter.setContent(content);
    };
    MDCTextFieldHelperTextFoundation.prototype.isPersistent = function() {
        return this.adapter.hasClass(_constants.cssClasses.HELPER_TEXT_PERSISTENT);
    };
    /**
     * @param isPersistent Sets the persistency of the helper text.
     */ MDCTextFieldHelperTextFoundation.prototype.setPersistent = function(isPersistent) {
        if (isPersistent) this.adapter.addClass(_constants.cssClasses.HELPER_TEXT_PERSISTENT);
        else this.adapter.removeClass(_constants.cssClasses.HELPER_TEXT_PERSISTENT);
    };
    /**
     * @return whether the helper text acts as an error validation message.
     */ MDCTextFieldHelperTextFoundation.prototype.isValidation = function() {
        return this.adapter.hasClass(_constants.cssClasses.HELPER_TEXT_VALIDATION_MSG);
    };
    /**
     * @param isValidation True to make the helper text act as an error validation message.
     */ MDCTextFieldHelperTextFoundation.prototype.setValidation = function(isValidation) {
        if (isValidation) this.adapter.addClass(_constants.cssClasses.HELPER_TEXT_VALIDATION_MSG);
        else this.adapter.removeClass(_constants.cssClasses.HELPER_TEXT_VALIDATION_MSG);
    };
    /**
     * Makes the helper text visible to the screen reader.
     */ MDCTextFieldHelperTextFoundation.prototype.showToScreenReader = function() {
        this.adapter.removeAttr(_constants.strings.ARIA_HIDDEN);
    };
    /**
     * Sets the validity of the helper text based on the input validity.
     */ MDCTextFieldHelperTextFoundation.prototype.setValidity = function(inputIsValid) {
        var helperTextIsPersistent = this.adapter.hasClass(_constants.cssClasses.HELPER_TEXT_PERSISTENT);
        var helperTextIsValidationMsg = this.adapter.hasClass(_constants.cssClasses.HELPER_TEXT_VALIDATION_MSG);
        var validationMsgNeedsDisplay = helperTextIsValidationMsg && !inputIsValid;
        if (validationMsgNeedsDisplay) {
            this.showToScreenReader();
            // If role is already alert, refresh it to trigger another announcement
            // from screenreader.
            if (this.adapter.getAttr(_constants.strings.ROLE) === 'alert') this.refreshAlertRole();
            else this.adapter.setAttr(_constants.strings.ROLE, 'alert');
        } else this.adapter.removeAttr(_constants.strings.ROLE);
        if (!helperTextIsPersistent && !validationMsgNeedsDisplay) this.hide();
    };
    /**
     * Hides the help text from screen readers.
     */ MDCTextFieldHelperTextFoundation.prototype.hide = function() {
        this.adapter.setAttr(_constants.strings.ARIA_HIDDEN, 'true');
    };
    MDCTextFieldHelperTextFoundation.prototype.refreshAlertRole = function() {
        var _this = this;
        this.adapter.removeAttr(_constants.strings.ROLE);
        requestAnimationFrame(function() {
            _this.adapter.setAttr(_constants.strings.ROLE, 'alert');
        });
    };
    return MDCTextFieldHelperTextFoundation;
}(_foundation.MDCFoundation);
exports.default = MDCTextFieldHelperTextFoundation1;

},{"tslib":"lRdW5","@material/base/foundation":"kC5Yw","./constants":"f4O20","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f4O20":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "strings", ()=>strings
);
parcelHelpers.export(exports, "cssClasses", ()=>cssClasses
);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var cssClasses = {
    HELPER_TEXT_PERSISTENT: 'mdc-text-field-helper-text--persistent',
    HELPER_TEXT_VALIDATION_MSG: 'mdc-text-field-helper-text--validation-msg',
    ROOT: 'mdc-text-field-helper-text'
};
var strings = {
    ARIA_HIDDEN: 'aria-hidden',
    ROLE: 'role',
    ROOT_SELECTOR: "." + cssClasses.ROOT
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gn4Te":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCTextFieldIcon", ()=>MDCTextFieldIcon1
);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _component = require("@material/base/component");
var _foundation = require("./foundation");
var MDCTextFieldIcon1 = function(_super) {
    _tslib.__extends(MDCTextFieldIcon, _super);
    function MDCTextFieldIcon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCTextFieldIcon.attachTo = function(root) {
        return new MDCTextFieldIcon(root);
    };
    Object.defineProperty(MDCTextFieldIcon.prototype, "foundationForTextField", {
        // Provided for access by MDCTextField component
        get: function() {
            return this.foundation;
        },
        enumerable: false,
        configurable: true
    });
    MDCTextFieldIcon.prototype.getDefaultFoundation = function() {
        var _this = this;
        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        var adapter = {
            getAttr: function(attr) {
                return _this.root.getAttribute(attr);
            },
            setAttr: function(attr, value) {
                return _this.root.setAttribute(attr, value);
            },
            removeAttr: function(attr) {
                return _this.root.removeAttribute(attr);
            },
            setContent: function(content) {
                _this.root.textContent = content;
            },
            registerInteractionHandler: function(evtType, handler) {
                return _this.listen(evtType, handler);
            },
            deregisterInteractionHandler: function(evtType, handler) {
                return _this.unlisten(evtType, handler);
            },
            notifyIconAction: function() {
                return _this.emit(_foundation.MDCTextFieldIconFoundation.strings.ICON_EVENT, {
                } /* evtData */ , true);
            }
        };
        // tslint:enable:object-literal-sort-keys
        return new _foundation.MDCTextFieldIconFoundation(adapter);
    };
    return MDCTextFieldIcon;
}(_component.MDCComponent);

},{"tslib":"lRdW5","@material/base/component":"jLptS","./foundation":"95gVw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"95gVw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MDCTextFieldIconFoundation", ()=>MDCTextFieldIconFoundation1
);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _tslib = require("tslib");
var _foundation = require("@material/base/foundation");
var _constants = require("./constants");
var INTERACTION_EVENTS = [
    'click',
    'keydown'
];
var MDCTextFieldIconFoundation1 = function(_super) {
    _tslib.__extends(MDCTextFieldIconFoundation, _super);
    function MDCTextFieldIconFoundation(adapter) {
        var _this = _super.call(this, _tslib.__assign(_tslib.__assign({
        }, MDCTextFieldIconFoundation.defaultAdapter), adapter)) || this;
        _this.savedTabIndex = null;
        _this.interactionHandler = function(evt) {
            _this.handleInteraction(evt);
        };
        return _this;
    }
    Object.defineProperty(MDCTextFieldIconFoundation, "strings", {
        get: function() {
            return _constants.strings;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextFieldIconFoundation, "cssClasses", {
        get: function() {
            return _constants.cssClasses;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MDCTextFieldIconFoundation, "defaultAdapter", {
        /**
         * See {@link MDCTextFieldIconAdapter} for typing information on parameters and return types.
         */ get: function() {
            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
            return {
                getAttr: function() {
                    return null;
                },
                setAttr: function() {
                    return undefined;
                },
                removeAttr: function() {
                    return undefined;
                },
                setContent: function() {
                    return undefined;
                },
                registerInteractionHandler: function() {
                    return undefined;
                },
                deregisterInteractionHandler: function() {
                    return undefined;
                },
                notifyIconAction: function() {
                    return undefined;
                }
            };
        // tslint:enable:object-literal-sort-keys
        },
        enumerable: false,
        configurable: true
    });
    MDCTextFieldIconFoundation.prototype.init = function() {
        var e_1, _a;
        this.savedTabIndex = this.adapter.getAttr('tabindex');
        try {
            for(var INTERACTION_EVENTS_1 = _tslib.__values(INTERACTION_EVENTS), INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next(); !INTERACTION_EVENTS_1_1.done; INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next()){
                var evtType = INTERACTION_EVENTS_1_1.value;
                this.adapter.registerInteractionHandler(evtType, this.interactionHandler);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (INTERACTION_EVENTS_1_1 && !INTERACTION_EVENTS_1_1.done && (_a = INTERACTION_EVENTS_1.return)) _a.call(INTERACTION_EVENTS_1);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
    };
    MDCTextFieldIconFoundation.prototype.destroy = function() {
        var e_2, _a;
        try {
            for(var INTERACTION_EVENTS_2 = _tslib.__values(INTERACTION_EVENTS), INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next(); !INTERACTION_EVENTS_2_1.done; INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next()){
                var evtType = INTERACTION_EVENTS_2_1.value;
                this.adapter.deregisterInteractionHandler(evtType, this.interactionHandler);
            }
        } catch (e_2_1) {
            e_2 = {
                error: e_2_1
            };
        } finally{
            try {
                if (INTERACTION_EVENTS_2_1 && !INTERACTION_EVENTS_2_1.done && (_a = INTERACTION_EVENTS_2.return)) _a.call(INTERACTION_EVENTS_2);
            } finally{
                if (e_2) throw e_2.error;
            }
        }
    };
    MDCTextFieldIconFoundation.prototype.setDisabled = function(disabled) {
        if (!this.savedTabIndex) return;
        if (disabled) {
            this.adapter.setAttr('tabindex', '-1');
            this.adapter.removeAttr('role');
        } else {
            this.adapter.setAttr('tabindex', this.savedTabIndex);
            this.adapter.setAttr('role', _constants.strings.ICON_ROLE);
        }
    };
    MDCTextFieldIconFoundation.prototype.setAriaLabel = function(label) {
        this.adapter.setAttr('aria-label', label);
    };
    MDCTextFieldIconFoundation.prototype.setContent = function(content) {
        this.adapter.setContent(content);
    };
    MDCTextFieldIconFoundation.prototype.handleInteraction = function(evt) {
        var isEnterKey = evt.key === 'Enter' || evt.keyCode === 13;
        if (evt.type === 'click' || isEnterKey) {
            evt.preventDefault(); // stop click from causing host label to focus
            // input
            this.adapter.notifyIconAction();
        }
    };
    return MDCTextFieldIconFoundation;
}(_foundation.MDCFoundation);
exports.default = MDCTextFieldIconFoundation1;

},{"tslib":"lRdW5","@material/base/foundation":"kC5Yw","./constants":"aIXJG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aIXJG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "strings", ()=>strings
);
parcelHelpers.export(exports, "cssClasses", ()=>cssClasses
);
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var strings = {
    ICON_EVENT: 'MDCTextField:icon',
    ICON_ROLE: 'button'
};
var cssClasses = {
    ROOT: 'mdc-text-field__icon'
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4SZIS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8ibHT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "characterCountCssClasses", ()=>_constants.cssClasses
);
parcelHelpers.export(exports, "characterCountStrings", ()=>_constants.strings
);
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _adapter = require("./adapter");
parcelHelpers.exportAll(_adapter, exports);
var _component = require("./component");
parcelHelpers.exportAll(_component, exports);
var _foundation = require("./foundation");
parcelHelpers.exportAll(_foundation, exports);
var _constants = require("./constants");

},{"./adapter":"3byYj","./component":"hwtce","./foundation":"dpux4","./constants":"1cPx3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3byYj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j9yda":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "helperTextCssClasses", ()=>_constants.cssClasses
);
parcelHelpers.export(exports, "helperTextStrings", ()=>_constants.strings
);
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _adapter = require("./adapter");
parcelHelpers.exportAll(_adapter, exports);
var _component = require("./component");
parcelHelpers.exportAll(_component, exports);
var _foundation = require("./foundation");
parcelHelpers.exportAll(_foundation, exports);
var _constants = require("./constants");

},{"./adapter":"hl5sa","./component":"bX2wx","./foundation":"5gLP0","./constants":"f4O20","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hl5sa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"82Zgi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "iconCssClasses", ()=>_constants.cssClasses
);
parcelHelpers.export(exports, "iconStrings", ()=>_constants.strings
);
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var _adapter = require("./adapter");
parcelHelpers.exportAll(_adapter, exports);
var _component = require("./component");
parcelHelpers.exportAll(_component, exports);
var _foundation = require("./foundation");
parcelHelpers.exportAll(_foundation, exports);
var _constants = require("./constants");

},{"./adapter":"43CWW","./component":"gn4Te","./foundation":"95gVw","./constants":"aIXJG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"43CWW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kRDDv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _popover = require("../popover/popover");
var _popoverDefault = parcelHelpers.interopDefault(_popover);
class TextTooltip {
    constructor(vnode){
        this.isOpen = false;
    }
    view(vnode1) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("span", {
            class: "relative",
            onmouseover: ()=>{
                this.isOpen = true;
            }
        }, vnode1.attrs.label, _mithrilDefault.default(_popoverDefault.default, {
            visible: this.isOpen,
            onClose: ()=>{
                this.isOpen = false;
            },
            padding: '16px',
            style: {
                backgroundColor: '#eaeaea',
                fontSize: '14px',
                top: '-100px',
                right: '0',
                width: '200px'
            }
        }, vnode1.children)));
    }
}
module.exports = TextTooltip;

},{"mithril":"1zcoP","../popover/popover":"1gePv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aFNYX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _iconButton = require("../icon-button/icon-button");
var _iconButtonDefault = parcelHelpers.interopDefault(_iconButton);
var _services = require("../../services");
var _toastOutletScss = require("./toast-outlet.scss");
class ToastOutlet {
    close(toast1) {
        _services.Toaster.remove(toast1.id);
    }
    view() {
        return _mithrilDefault.default("ul", {
            class: "toasts"
        }, _services.Toaster.toasts.map((toast)=>{
            return _mithrilDefault.default("li", {
                class: toast.type ? `toast toast--${toast.type}` : null,
                onclick: ()=>{
                    this.close(toast);
                }
            }, _mithrilDefault.default("div", {
                class: "toast__text"
            }, toast.text), toast.closeButton && _mithrilDefault.default(_iconButtonDefault.default, {
                icon: "close"
            }));
        }));
    }
}
module.exports = ToastOutlet;

},{"mithril":"1zcoP","../icon-button/icon-button":"lIf9M","../../services":"i9qdV","./toast-outlet.scss":"gsZvM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gsZvM":[function() {},{}],"2yIRZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _errorJsx = require("./error/error.jsx");
var _errorJsxDefault = parcelHelpers.interopDefault(_errorJsx);
var _contactsJsx = require("./contacts/contacts.jsx");
var _contactsJsxDefault = parcelHelpers.interopDefault(_contactsJsx);
var _dashboardJsx = require("./dashboard/dashboard.jsx");
var _dashboardJsxDefault = parcelHelpers.interopDefault(_dashboardJsx);
var _profileJsx = require("./profile/profile.jsx");
var _profileJsxDefault = parcelHelpers.interopDefault(_profileJsx);
var _settingsJsx = require("./settings/settings.jsx");
var _settingsJsxDefault = parcelHelpers.interopDefault(_settingsJsx);
module.exports = {
    Error: _errorJsxDefault.default,
    Contacts: _contactsJsxDefault.default,
    Dashboard: _dashboardJsxDefault.default,
    Profile: _profileJsxDefault.default,
    Settings: _settingsJsxDefault.default
};

},{"./error/error.jsx":"amYFz","./contacts/contacts.jsx":"amptN","./dashboard/dashboard.jsx":"icxsX","./profile/profile.jsx":"eXz1D","./settings/settings.jsx":"iJ09D","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"amYFz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../components");
class Error {
    constructor(){
        this.remainingSeconds = 5;
        this.interval = null;
    }
    oninit() {
        this.countdown();
    }
    onremove() {
        clearInterval(this.interval);
    }
    countdown() {
        this.interval = setInterval(()=>{
            this.remainingSeconds--;
            if (this.remainingSeconds === 0) {
                clearInterval(this.interval);
                this.redirect();
            }
            _mithrilDefault.default.redraw();
        }, 1000);
    }
    redirect() {
        _mithrilDefault.default.route.set('/');
    }
    view() {
        return _mithrilDefault.default(_components.Container, null, _mithrilDefault.default("h3", {
            class: "headspace"
        }, "Sorry! Page Not Found"), _mithrilDefault.default("h4", null, "You will be redirected to the home page in ", this.remainingSeconds, " seconds"));
    }
}
module.exports = Error;

},{"mithril":"1zcoP","../../components":"iBBNK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"amptN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../components");
var _services = require("../../services");
var _contactsScss = require("./contacts.scss");
var _contactList = require("./contact-list/contact-list");
var _contactListDefault = parcelHelpers.interopDefault(_contactList);
var _contactDetails = require("./contact-details/contact-details");
var _contactDetailsDefault = parcelHelpers.interopDefault(_contactDetails);
var _contactGroupPng = require("../../../assets/img/contact-group.png");
var _contactGroupPngDefault = parcelHelpers.interopDefault(_contactGroupPng);
var _tempProfPicJpg = require("../../../assets/img/temp-prof-pic.jpg");
var _tempProfPicJpgDefault = parcelHelpers.interopDefault(_tempProfPicJpg);
class Contacts {
    constructor(){
        this.contacts = [];
        this.activeContact = null;
        _services.KERI.getContacts().then((contacts)=>{
            this.contacts = contacts;
        }).catch((err)=>{
            console.log('getContacts', err);
        });
    }
    setContact = (contact)=>{
        this.activeContact = contact;
    };
    view(vnode) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
            class: "contacts"
        }, _mithrilDefault.default(_components.NavRail, null), _mithrilDefault.default(_components.Container, {
            class: "headspace",
            style: {
                padding: '0 4rem'
            }
        }, _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default("div", {
            class: "flex-1",
            style: {
                marginRight: '4rem'
            }
        }, _mithrilDefault.default(_components.Card, {
            class: "card--fluid",
            padding: "1.5rem"
        }, _mithrilDefault.default(_components.TextField, {
            style: {
                backgroundColor: 'white',
                height: '3rem',
                margin: '0 0 1.5rem 0',
                width: '75%'
            },
            filled: true,
            fluid: true,
            placeholder: "Search for Contacts" // oninput={(e) => {
            ,
            iconTrailing: {
                icon: 'search'
            }
        }), this.contacts.map((contact)=>{
            return _mithrilDefault.default(_contactListDefault.default, {
                contact: contact,
                setContact: this.setContact
            });
        }))), _mithrilDefault.default("div", {
            class: "flex-1"
        }, _mithrilDefault.default(_components.Card, {
            class: 'card--fluid',
            style: {
                position: 'relative'
            },
            padding: "4rem"
        }, _mithrilDefault.default(_components.IconButton, {
            class: "close-icon",
            icon: "close"
        }), this.activeContact !== null ? _mithrilDefault.default(_contactDetailsDefault.default, {
            contact: this.activeContact
        }) : _mithrilDefault.default('[', null, _mithrilDefault.default("h2", null, "My Contacts"), _mithrilDefault.default("img", {
            src: _contactGroupPngDefault.default,
            style: {
                width: '50%',
                margin: '2rem 0 2rem 0'
            }
        }), _mithrilDefault.default("h3", null, "View Your Contacts"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Click on any of your contacts on the sidebar to update or edit information about them or their credentials.", ' '), _mithrilDefault.default("br", null), _mithrilDefault.default("br", null), _mithrilDefault.default("div", {
            class: "flex flex-justify-end"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Dismiss"
        })))))))));
    }
}
module.exports = Contacts;

},{"mithril":"1zcoP","../../components":"iBBNK","../../services":"i9qdV","./contacts.scss":"efmYb","./contact-list/contact-list":"lsng0","./contact-details/contact-details":"4XdL7","../../../assets/img/contact-group.png":"3Ui00","../../../assets/img/temp-prof-pic.jpg":"3eo8j","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"efmYb":[function() {},{}],"lsng0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../../components");
class ContactList {
    // handleClick = () => {};
    view(vnode) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
            class: "flex flex-justify-between divider",
            style: {
                alignItems: 'center',
                margin: '.2rem 0 .2rem 0',
                height: '40px',
                padding: '25px 0 25px 0',
                cursor: 'pointer'
            },
            onclick: ()=>{
                vnode.attrs.setContact(vnode.attrs.contact);
            }
        }, _mithrilDefault.default("div", {
            class: "flex",
            style: {
                alignItems: 'center'
            }
        }, _mithrilDefault.default("div", {
            class: "flex flex-column"
        }, _mithrilDefault.default("p", {
            style: {
                margin: '0 0 0 1rem',
                fontSize: '90%'
            }
        }, vnode.attrs.contact.alias)))));
    }
}
module.exports = ContactList;

},{"mithril":"1zcoP","../../../components":"iBBNK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4XdL7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../../components");
class ContactDetails {
    view(vnode) {
        let contact = vnode.attrs.contact;
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h1", null, "My Contacts"), _mithrilDefault.default("div", {
            class: "flex flex-justify-between",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }, _mithrilDefault.default("div", null, _mithrilDefault.default("h4", {
            style: {
                color: '#3d63ae'
            }
        }, contact.alias))), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Name:"), _mithrilDefault.default(_components.TextField, {
            filled: true,
            fluid: true,
            placeholder: contact.alias,
            style: {
                width: '60%',
                height: '2.5rem'
            }
        })), _mithrilDefault.default("div", {
            class: "flex flex-justify-between",
            style: {
                marginTop: '3rem'
            }
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: " Go Back"
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Save"
        })));
    }
}
module.exports = ContactDetails;

},{"mithril":"1zcoP","../../../components":"iBBNK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Ui00":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "contact-group.46a6faac.png" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"3eo8j":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "temp-prof-pic.488603b5.jpg" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"icxsX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../components");
var _services = require("../../services");
var _dashboardScss = require("./dashboard.scss");
class Dashboard {
    constructor(){
        this.aboutDismissed = false;
        _services.Profile.loadIdentifiers();
        _services.Contacts.requestList();
        _services.KERI.listIdentifiers().then((ids)=>{
            _services.Auth.isLoggedIn = true;
            _services.Mail.initEventSource();
            if (_services.Profile.getDefaultAID() === null) {
                if (ids.length > 0) _services.Profile.setDefaultAID(ids[0]);
            }
        }).catch((err)=>{
            _services.Auth.isLoggedIn = false;
            _services.Profile.clearDefaultAID();
        });
    }
    get tasksShown() {
        if (!_services.Auth.isLoggedIn) return _services.Tasks.all['create-passcode'];
        if (_services.Profile.identifiers.length === 0) return _services.Tasks.all['create-identifier'];
        else if (_services.Profile.identifiers.length === 1) return _services.Tasks.all['create-multisig'];
        else {
            if (sessionStorage.getItem('seenIntro')) return _services.Tasks.all['main'];
            else return _services.Tasks.all['intro-to-role'];
        }
    }
    view() {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
            style: "position: relative"
        }, _mithrilDefault.default("div", {
            class: "dashboard"
        }, _services.Auth.isLoggedIn && _mithrilDefault.default(_components.NavRail, {
            selected: "dashboard"
        }), _mithrilDefault.default(_components.Container, {
            class: "headspace",
            style: {
                padding: '0 4rem'
            }
        }, _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default("div", {
            class: "flex-1",
            style: {
                marginRight: '4rem'
            }
        }, _services.Tasks.active && _services.Tasks.active.lcomponent !== undefined && _mithrilDefault.default(_components.Card, {
            class: 'card--fluid' + (_services.Tasks.active ? ' card--active' : null),
            style: {
                position: 'relative'
            },
            padding: "4rem"
        }, _mithrilDefault.default(_components.IconButton, {
            class: "close-icon",
            icon: "close",
            onclick: ()=>{
                if (_services.Tasks.active) _services.Tasks.active = null;
                else this.aboutDismissed = true;
            }
        }), _services.Tasks.active && _mithrilDefault.default(_services.Tasks.active.lcomponent, {
            end: ()=>{
                _services.Tasks.active = null;
                _services.Profile.loadIdentifiers();
                _services.Contacts.requestList();
            }
        })), (!_services.Tasks.active || _services.Tasks.active.lcomponent === undefined) && _mithrilDefault.default(_components.Card, {
            class: "card--fluid",
            padding: "1.5rem"
        }, _mithrilDefault.default("div", {
            class: "flex flex-align-center flex-justify-between"
        }, _mithrilDefault.default("h1", null, "Tasks")), this.tasksShown.map((task, i)=>{
            return _mithrilDefault.default(_components.Card, {
                class: 'card--fluid card--hover' + (task === _services.Tasks.active ? ' card--active' : ''),
                padding: "1.5rem",
                style: {
                    marginBottom: '2.5rem'
                },
                onclick: ()=>{
                    _services.Profile.isLead = this.tasksShown[i].lead;
                    _services.Tasks.active = this.tasksShown[i];
                }
            }, _mithrilDefault.default("div", {
                class: "flex flex-align-center"
            }, _mithrilDefault.default("img", {
                src: task.imgSrc,
                alt: task.label,
                style: {
                    marginRight: '1rem',
                    width: '72px'
                }
            }), _mithrilDefault.default("h3", null, task.label)));
        }))), _mithrilDefault.default("div", {
            class: "flex-1"
        }, (_services.Tasks.active || _services.Auth.isLoggedIn && !this.aboutDismissed) && _mithrilDefault.default(_components.Card, {
            class: 'card--fluid' + (_services.Tasks.active ? ' card--active' : null),
            style: {
                position: 'relative'
            },
            padding: "4rem"
        }, _mithrilDefault.default(_components.IconButton, {
            class: "close-icon",
            icon: "close",
            onclick: ()=>{
                if (_services.Tasks.active) _services.Tasks.active = null;
                else this.aboutDismissed = true;
            }
        }), _services.Tasks.active && _mithrilDefault.default(_services.Tasks.active.component, {
            end: ()=>{
                _services.Tasks.active = null;
                _services.Profile.loadIdentifiers();
                _services.Contacts.requestList();
            }
        }), !this.aboutDismissed && !_services.Tasks.active && _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "About Your Tasks"), _mithrilDefault.default("p", {
            class: "font-color--battleship",
            style: {
                lineHeight: '1.38',
                letterSpacing: '0.3px',
                margin: '3rem 0 4rem 0'
            }
        }, "This section is designed to help you navigate Keep and learn how to complete tasks required for your role. Click on one of the tasks on the left and this panel will provide more information.", _mithrilDefault.default("br", null), _mithrilDefault.default("br", null), "If you are already familiar with the software, feel free to select the \u201CDismiss\u201D button."), _mithrilDefault.default("div", {
            class: "flex flex-justify-end"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--no-transform button--big",
            raised: true,
            label: "Dismiss",
            onclick: ()=>{
                this.aboutDismissed = true;
            }
        }))))))))));
    }
}
module.exports = Dashboard;

},{"mithril":"1zcoP","../../components":"iBBNK","../../services":"i9qdV","./dashboard.scss":"jnqIX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jnqIX":[function() {},{}],"eXz1D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../components");
var _managePasscodeJsx = require("./manage-passcode/manage-passcode.jsx");
var _managePasscodeJsxDefault = parcelHelpers.interopDefault(_managePasscodeJsx);
var _manageIdentifiers = require("./manage-identifiers/manage-identifiers");
var _manageIdentifiersDefault = parcelHelpers.interopDefault(_manageIdentifiers);
var _profileScss = require("./profile.scss");
class Profile {
    constructor(){
        this.currentState = 'manage-identifiers';
    }
    view(vnode) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
            class: "profile"
        }, _mithrilDefault.default(_components.NavRail, null), _mithrilDefault.default(_components.Container, {
            class: "headspace",
            style: {
                padding: '0 4rem'
            }
        }, _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default("div", {
            class: "flex-1",
            style: {
                marginRight: '4rem'
            }
        }, _mithrilDefault.default(_components.Card, {
            class: "card--fluid",
            padding: "1.5rem"
        }, _mithrilDefault.default(_components.Card, {
            class: `card--fluid card--hover ${this.currentState === 'manage-identifiers' ? 'card--active' : ''}`,
            padding: "1.5rem",
            style: {
                marginBottom: '2.5rem'
            },
            onclick: ()=>{
                this.currentState = 'manage-identifiers';
            }
        }, _mithrilDefault.default("div", {
            class: "flex flex-align-center",
            style: {
                color: '#494949'
            }
        }, _mithrilDefault.default("span", {
            className: "material-icons md-48",
            style: {
                marginRight: '1rem'
            }
        }, "people"), _mithrilDefault.default("h3", null, "Manage Identifiers"))), _mithrilDefault.default(_components.Card, {
            class: `card--fluid card--hover ${this.currentState === 'manage-passcode' ? 'card--active' : ''}`,
            padding: "1.5rem",
            style: {
                marginBottom: '2.5rem'
            },
            onclick: ()=>{
                this.currentState = 'manage-passcode';
            }
        }, _mithrilDefault.default("div", {
            class: "flex flex-align-center",
            style: {
                color: '#494949'
            }
        }, _mithrilDefault.default("span", {
            className: "material-icons md-48",
            style: {
                marginRight: '1rem'
            }
        }, "key"), _mithrilDefault.default("h3", null, "Manage Passcode"))))), _mithrilDefault.default("div", {
            class: "flex-1"
        }, _mithrilDefault.default(_components.Card, {
            class: 'card--fluid',
            style: {
                position: 'relative'
            },
            padding: "2rem 0rem"
        }, _mithrilDefault.default(_components.IconButton, {
            class: "close-icon",
            icon: "close",
            onclick: ()=>{
                this.currentState = null;
            },
            style: `${this.currentState == null ? 'visibility: hidden;' : 'visibility: visible;'}`
        }), this.currentState === 'manage-identifiers' && _mithrilDefault.default(_manageIdentifiersDefault.default, null), this.currentState === 'manage-passcode' && _mithrilDefault.default(_managePasscodeJsxDefault.default, null)))))));
    }
}
module.exports = Profile;

},{"mithril":"1zcoP","../../components":"iBBNK","./manage-passcode/manage-passcode.jsx":"9q2qg","./manage-identifiers/manage-identifiers":"kUmRX","./profile.scss":"fWLm3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9q2qg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _createYourPasscodePng = require("../../../../assets/img/create-your-passcode.png");
var _createYourPasscodePngDefault = parcelHelpers.interopDefault(_createYourPasscodePng);
var _passcodePng = require("../../../../assets/img/passcode.png");
var _passcodePngDefault = parcelHelpers.interopDefault(_passcodePng);
var _components = require("../../../components");
var _services = require("../../../../app/services");
class ChangingPasscode {
    view(vnode) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
            style: {
                margin: '2rem'
            }
        }, _mithrilDefault.default("h3", null, "Changing Your Passcode"), _mithrilDefault.default("div", {
            class: "flex flex-justify-center",
            style: {
                margin: '4.5rem 0'
            }
        }, _mithrilDefault.default("img", {
            src: _createYourPasscodePngDefault.default,
            style: {
                width: '192px'
            }
        })), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }, "Before you change your passcode, remember that your passcode is your only way to enter the software, and that if you lose it, you cannot get back in..", _mithrilDefault.default("br", null), _mithrilDefault.default("br", null), "Make sure to store your password somewhere safe: a password management app, or printed and in a safe deposit box."), _mithrilDefault.default("div", {
            class: "flex flex-justify-end"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--no-transform button--big",
            raised: true,
            label: "Continue",
            onclick: vnode.attrs.continue
        }))));
    }
}
class GeneratePasscode {
    constructor(){
        this.passcode = '';
        this.copied = false; // this.savePassModalOpen = false;
        this.generatePasscode();
    }
    copyPasscode() {
        this.copied = false;
        navigator.clipboard.writeText(this.passcode).then(()=>{
            this.copied = true;
            _mithrilDefault.default.redraw();
        }, ()=>{
            this.copied = false;
            _mithrilDefault.default.redraw();
        });
    }
    generatePasscode() {
        this.copied = false;
        _services.KERI.generatePasscode().then((resp)=>{
            this.passcode = resp.passcode;
            console.log(this.passcode);
        }).catch((err)=>{
            console.log('generatePasscode', err);
        });
    }
    view(vnode1) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "Generate Your Passcode"), _mithrilDefault.default("div", {
            class: "flex flex-justify-center",
            style: {
                margin: '4.5rem 0'
            }
        }, _mithrilDefault.default("img", {
            src: _createYourPasscodePngDefault.default,
            style: {
                width: '192px'
            }
        })), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '0 0 2.5rem 0'
            }
        }, "Generate your passcode here or in your password management app such as 1Password or Last Pass to encrypt your desktop software and then copy into the following screen."), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            fluid: true,
            placeholder: "xxxx-xxxxx-xxxxx-xxxx-xxxxx",
            value: this.passcode,
            oninput: (e)=>{
                this.passcode = e.target.value;
            },
            iconTrailing: {
                icon: 'content_copy',
                onclick: ()=>{
                    this.copyPasscode();
                }
            }
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-between",
            style: {
                margin: '1rem 0 6rem'
            }
        }, _mithrilDefault.default("p", {
            class: "font-color--green font-weight--medium"
        }, this.copied ? 'Passcode copied!' : _mithrilDefault.default("br", null)), _mithrilDefault.default(_components.Button, {
            raised: true,
            class: "button--no-transform button--gray button--big",
            label: "Generate New",
            onclick: ()=>{
                this.generatePasscode();
            }
        })), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            raised: true,
            class: "button--no-transform button--gray-dk button--big",
            label: "Go Back",
            onclick: vnode1.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            raised: true,
            class: "button--no-transform button--big",
            label: "Continue" // onclick={() => {
            ,
            onclick: vnode1.attrs.continue
        })));
    }
}
class EnterPasscode {
    constructor(){
        this.passcode = '';
        this.showPasscode = false;
    }
    initializeAgent(vnode2) {
        _services.KERI.initializeAgent('keep', this.passcode).then(()=>{
            _services.KERI.unlockAgent('keep', this.passcode).then(vnode2.attrs.continue).catch((err)=>{
                console.log('unlockAgent err: ', err);
            });
        }).catch((err)=>{
            console.log('initializeAgent err: ', err);
        });
    }
    view(vnode3) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "Please Enter Your Passcode"), _mithrilDefault.default("div", {
            class: "flex flex-justify-center",
            style: {
                margin: '5rem 0'
            }
        }, _mithrilDefault.default("img", {
            src: _passcodePngDefault.default,
            style: {
                width: '192px'
            }
        })), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '0 0 3rem 0'
            }
        }, "You can find your 22-character passcode by referring back to your storage spot (1Password, Last Pass, Safe Deposit Box) and entering it into the box below."), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            fluid: true,
            type: this.showPasscode ? 'text' : 'password',
            value: this.passcode,
            oninput: (e)=>{
                this.passcode = e.target.value;
            },
            iconTrailing: {
                icon: this.showPasscode ? 'visibility' : 'visibility_off',
                onclick: ()=>{
                    this.showPasscode = !this.showPasscode;
                }
            }
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-between",
            style: {
                marginTop: '9rem'
            }
        }, _mithrilDefault.default(_components.Button, {
            raised: true,
            class: "button--no-transform button--gray-dk button--big",
            label: "Go Back",
            onclick: vnode3.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            raised: true,
            class: "button--no-transform button--big",
            label: "Continue" // onclick={() => {
            ,
            onclick: vnode3.attrs.continue
        })));
    }
}
class PasscodeFinished {
    view(vnode4) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "You are All Set!"), _mithrilDefault.default("div", {
            class: "flex flex-justify-center",
            style: {
                margin: '4.5rem 0'
            }
        }, _mithrilDefault.default("img", {
            src: _passcodePngDefault.default,
            style: {
                width: '50%'
            }
        })), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }, "Your passcode has been changed. You are no longer able to use the old passcode to enter the software.."), _mithrilDefault.default("div", {
            class: "flex flex-justify-end"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--no-transform button--big",
            raised: true,
            label: "Close",
            onclick: vnode4.attrs.continue
        })));
    }
}
class ManagePasscode {
    constructor(){
        this.currentState = 'changing-your-passcode';
    }
    view(vnode5) {
        return _mithrilDefault.default('[', null, this.currentState === 'changing-your-passcode' && _mithrilDefault.default(ChangingPasscode, {
            continue: ()=>{
                this.currentState = 'generate-passcode';
            }
        }), this.currentState === 'generate-passcode' && _mithrilDefault.default(GeneratePasscode, {
            continue: ()=>{
                this.currentState = 'confirm-passcode';
            }
        }), this.currentState === 'confirm-passcode' && _mithrilDefault.default(EnterPasscode, {
            continue: ()=>{
                this.currentState = 'passcode-finished';
            }
        }), this.currentState === 'passcode-finished' && _mithrilDefault.default(PasscodeFinished, {
            continue: ()=>{
                this.currentState = 'changing-your-passcode';
            }
        }));
    }
}
module.exports = ManagePasscode;

},{"mithril":"1zcoP","../../../../assets/img/create-your-passcode.png":"3PgQv","../../../../assets/img/passcode.png":"c9yf6","../../../components":"iBBNK","../../../../app/services":"i9qdV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3PgQv":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "create-your-passcode.c1f95aac.png" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"c9yf6":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "passcode.cb26fba6.png" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"kUmRX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _githubLogoPng = require("../../../../assets/img/github-logo.png");
var _githubLogoPngDefault = parcelHelpers.interopDefault(_githubLogoPng);
var _components = require("../../../components");
var _uploadImagePng = require("../../../../assets/img/upload-image.png");
var _uploadImagePngDefault = parcelHelpers.interopDefault(_uploadImagePng);
var _emojiPickerElement = require("emoji-picker-element");
var _keri = require("../../../services/keri");
var _keriDefault = parcelHelpers.interopDefault(_keri);
function getProfileView(identifier) {
    if (identifier.hasOwnProperty("image")) return _mithrilDefault.default("img", {
        src: _githubLogoPngDefault.default,
        style: {
            width: '35%',
            borderRadius: '50%',
            position: 'relative'
        }
    });
    else if (identifier.hasOwnProperty("name")) {
        let initials = "";
        const parts = identifier.name.split(" ");
        if (parts.length === 1) initials = identifier.name.substring(0, 1);
        else if (parts.length >= 2) initials = parts[0].substring(0, 1) + parts[1].substring(0, 1);
        return _mithrilDefault.default("div", {
            style: {
                display: 'inline-block',
                fontSize: '1.75em',
                width: '2.75em',
                height: '2.75em',
                lineHeight: '2.75em',
                textAlign: 'center',
                borderRadius: '50%',
                background: 'grey',
                verticalAlign: 'middle',
                color: 'white',
                marginRight: '2rem'
            }
        }, _mithrilDefault.default("div", null, initials));
    }
}
class Identifier {
    view(vnode) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
            style: {
                margin: '2rem'
            }
        }, _mithrilDefault.default("h1", null, vnode.attrs.parent.selectedIdentifier.name), _mithrilDefault.default("div", {
            style: {
                margin: '2rem 0 2rem 0',
                position: 'relative'
            }
        }, getProfileView(vnode.attrs.parent.selectedIdentifier), _mithrilDefault.default("span", {
            className: "material-icons-outlined md-24",
            style: {
                marginRight: '1rem',
                backgroundColor: '#494949',
                borderRadius: '50%',
                position: 'absolute',
                top: '50px',
                left: '50px',
                color: 'white',
                padding: '0.25rem'
            },
            onclick: vnode.attrs.editImage
        }, "photo_camera")), _mithrilDefault.default("div", null, _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Email:"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Octocat")), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Company:"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "GLEIF")), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Phone Number:"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "+ 1-801-888-8888"))), _mithrilDefault.default("div", {
            class: "flex flex-justify-end",
            style: {
                margin: '4rem 0 0 0'
            }
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: " Go Back",
            onclick: vnode.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Edit",
            onclick: vnode.attrs.continue
        }))));
    }
}
class IdentifierEditPage {
    view(vnode1) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
            style: {
                margin: '2rem'
            }
        }, _mithrilDefault.default("h1", null, vnode1.attrs.identifier.name), _mithrilDefault.default("div", {
            class: "flex flex-justify-between",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }, _mithrilDefault.default("img", {
            src: _githubLogoPngDefault.default,
            style: {
                width: '35%',
                borderRadius: '50%'
            }
        })), _mithrilDefault.default("div", null, _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Email:"), _mithrilDefault.default(_components.TextField, {
            filled: true,
            fluid: true,
            placeholder: "octocat@gleif.org",
            style: {
                width: '60%',
                height: '2.5rem'
            }
        })), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Company:"), _mithrilDefault.default(_components.TextField, {
            filled: true,
            fluid: true,
            placeholder: "GLEIF",
            style: {
                width: '60%',
                height: '2.5rem'
            }
        })), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Phone Number:"), _mithrilDefault.default(_components.TextField, {
            filled: true,
            fluid: true,
            placeholder: "+ 1-801-888-8888",
            style: {
                width: '60%',
                height: '2.5rem'
            }
        }))), _mithrilDefault.default("div", {
            className: "flex flex-justify-between",
            style: {
                marginTop: '3rem'
            }
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: " Go Back",
            onclick: vnode1.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Save",
            onclick: vnode1.attrs.continue
        }))));
    }
}
class EditImage {
    emojiShow = false;
    oncreate(vnode2) {
        console.log("adding listener");
        document.querySelector('emoji-picker').addEventListener('emoji-click', (e)=>{
            console.log(e.detail.unicode);
        });
    }
    toggle() {
        console.log("toggle");
        this.emojiShow = !this.emojiShow;
        console.log("toggle", this.emojiShow);
        document.querySelector('emoji-container').style.display = this.emojiShow ? 'block' : 'none';
    }
    view(vnode3) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
            style: {
                margin: '2rem'
            }
        }, _mithrilDefault.default("img", {
            src: _uploadImagePngDefault.default,
            style: {
                marginBottom: '1rem'
            }
        }), _mithrilDefault.default("h3", null, "Select a Symbol or Photo for ", vnode3.attrs.parent.selectedIdentifier.alias), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "This symbol or photo will be listed alongside your alias in your credentials wallet."), _mithrilDefault.default("div", {
            className: "flex flex-align-center",
            style: {
                color: '#494949'
            }
        }, _mithrilDefault.default("span", {
            className: "material-icons md-48",
            style: {
                marginRight: '1rem'
            }
        }, "photo"), _mithrilDefault.default("h4", null, "Update picture"), _mithrilDefault.default("p", null), _mithrilDefault.default("input", {
            type: "file",
            id: "fileLoader",
            name: "files",
            title: "Load File",
            style: {
                display: 'none'
            }
        }), _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "+"
        })), _mithrilDefault.default("div", {
            className: "flex flex-align-center",
            style: {
                color: '#494949'
            }
        }, _mithrilDefault.default("span", {
            className: "material-icons md-48",
            style: {
                marginRight: '1rem'
            }
        }, "mood"), _mithrilDefault.default("h4", null, "Use emoji"), _mithrilDefault.default(_components.Button, {
            onclick: this.toggle,
            label: "me"
        })), _mithrilDefault.default("div", {
            id: "emoji-container",
            style: {
                display: 'none'
            }
        }, _mithrilDefault.default("emoji-picker", null))));
    }
}
class ListIdentifiers {
    identifiers = [];
    constructor(){
        _keriDefault.default.listIdentifiers().then((identifiers)=>{
            console.log(identifiers);
            this.identifiers = identifiers;
        }).catch((err)=>{
            this.identifiers = [];
            console.log('listIdentifiers', err);
        });
    }
    view(vnode4) {
        console.log(this.identifiers);
        return _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
            style: {
                height: '624px',
                overflowY: 'scroll',
                margin: '0 0 2rem 0'
            }
        }, this.identifiers.map((aid)=>{
            console.log("poop", aid);
            return _mithrilDefault.default(_components.Card, {
                class: "",
                style: {
                    margin: '1.5rem ',
                    padding: '0'
                }
            }, _mithrilDefault.default("div", null, getProfileView(aid), _mithrilDefault.default("div", {
                style: "display:inline-block; vertical-align:middle"
            }, _mithrilDefault.default("div", {
                class: "font-weight--medium",
                style: "margin: 1.5rem 0 1rem 0;"
            }, aid.name), _mithrilDefault.default("code", {
                style: "margin: 0 0 0 0;"
            }, aid.prefix), _mithrilDefault.default("div", {
                className: "flex flex-justify-between",
                style: {
                    marginTop: '3rem'
                }
            }, _mithrilDefault.default("div", null, "Use as default", _mithrilDefault.default(_components.Radio, {
                id: "alias",
                name: "alias",
                checked: "metadata" in aid && "default" in aid.metadata,
                onclick: ()=>{
                    _keriDefault.default.updateIdentifier(aid.name, {
                        default: "true"
                    });
                },
                style: {
                    marginTop: '1rem 1rem'
                }
            })), _mithrilDefault.default(_components.Button, {
                class: "button--big button--no-transform",
                raised: true,
                label: "Edit",
                onclick: ()=>{
                    vnode4.attrs.parent.selectedIdentifier = aid;
                    vnode4.attrs.continue();
                }
            })))));
        })));
    }
}
class ManageIdentifiers {
    constructor(){
        this.currentState = 'list-identifiers';
    }
    selectedIdentifier = {
    };
    view(vnode5) {
        return _mithrilDefault.default('[', null, this.currentState === 'list-identifiers' && _mithrilDefault.default(ListIdentifiers, {
            parent: this,
            continue: ()=>{
                this.currentState = 'identifier';
            }
        }), this.currentState === 'identifier' && _mithrilDefault.default(Identifier, {
            parent: this,
            editImage: ()=>{
                this.currentState = 'identifier-edit-image';
            },
            back: ()=>{
                this.currentState = 'list-identifiers';
            },
            continue: ()=>{
                this.currentState = 'identifier-edit-page';
            }
        }), this.currentState === 'identifier-edit-page' && _mithrilDefault.default(IdentifierEditPage, {
            parent: this,
            back: ()=>{
                this.currentState = 'identifier';
            }
        }), this.currentState === 'identifier-edit-image' && _mithrilDefault.default(EditImage, {
            parent: this,
            back: ()=>{
                this.currentState = 'identifier';
            }
        }));
    }
}
module.exports = ManageIdentifiers;

},{"mithril":"1zcoP","../../../../assets/img/github-logo.png":"91eSZ","../../../components":"iBBNK","../../../../assets/img/upload-image.png":"eplTl","emoji-picker-element":"iWz8T","../../../services/keri":"gD6tR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eplTl":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "upload-image.5222bc97.png" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"iWz8T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Picker", ()=>_pickerJsDefault.default
);
parcelHelpers.export(exports, "Database", ()=>_databaseJsDefault.default
);
var _pickerJs = require("./picker.js");
var _pickerJsDefault = parcelHelpers.interopDefault(_pickerJs);
var _databaseJs = require("./database.js");
var _databaseJsDefault = parcelHelpers.interopDefault(_databaseJs);

},{"./picker.js":"jIPts","./database.js":"6TIVT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jIPts":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>PickerElement
);
var _databaseJs = require("./database.js");
var _databaseJsDefault = parcelHelpers.interopDefault(_databaseJs);
var global = arguments[3];
function noop() {
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || a && typeof a === 'object' || typeof a === 'function';
}
let src_url_equal_anchor;
function src_url_equal(element_src, url) {
    if (!src_url_equal_anchor) src_url_equal_anchor = document.createElement('a');
    src_url_equal_anchor.href = url;
    return element_src === src_url_equal_anchor.href;
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function action_destroyer(action_result) {
    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}
function append(target, node) {
    target.appendChild(node);
}
function insert1(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function element1(name) {
    return document.createElement(name);
}
function text1(data) {
    return document.createTextNode(data);
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return ()=>node.removeEventListener(event, handler, options)
    ;
}
function attr(node, attribute, value) {
    if (value == null) node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);
}
function set_data(text, data) {
    data = '' + data;
    if (text.wholeText !== data) text.data = data;
}
function set_input_value(input, value) {
    input.value = value == null ? '' : value;
}
function set_style(node, key, value, important) {
    if (value === null) node.style.removeProperty(key);
    else node.style.setProperty(key, value, important ? 'important' : '');
}
let current_component;
function set_current_component(component) {
    current_component = component;
}
const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function tick() {
    schedule_update();
    return resolved_promise;
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
// flush() calls callbacks in this order:
// 1. All beforeUpdate callbacks, in order: parents before children
// 2. All bind:this callbacks, in reverse order: children before parents.
// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
//    for afterUpdates called during the initial onMount, which are called in
//    reverse order: children before parents.
// Since callbacks might update component values, which could trigger another
// call to flush(), the following steps guard against this:
// 1. During beforeUpdate, any updated components will be added to the
//    dirty_components array and will cause a reentrant call to flush(). Because
//    the flush index is kept outside the function, the reentrant call will pick
//    up where the earlier call left off and go through all dirty components. The
//    current_component value is saved and restored so that the reentrant call will
//    not interfere with the "parent" flush() call.
// 2. bind:this callbacks cannot trigger new flush() calls.
// 3. During afterUpdate, any updated components will NOT have their afterUpdate
//    callback called a second time; the seen_callbacks set, outside the flush()
//    function, guarantees this behavior.
const seen_callbacks = new Set();
let flushidx = 0; // Do *not* move this inside the flush() function
function flush() {
    const saved_component = current_component;
    do {
        // first, call beforeUpdate functions
        // and update components
        while(flushidx < dirty_components.length){
            const component = dirty_components[flushidx];
            flushidx++;
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        flushidx = 0;
        while(binding_callbacks.length)binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for(let i = 0; i < render_callbacks.length; i += 1){
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    }while (dirty_components.length)
    while(flush_callbacks.length)flush_callbacks.pop()();
    update_scheduled = false;
    seen_callbacks.clear();
    set_current_component(saved_component);
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [
            -1
        ];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
const globals = typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : global;
function destroy_block(block, lookup) {
    block.d(1);
    lookup.delete(block.key);
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
    let o = old_blocks.length;
    let n = list.length;
    let i = o;
    const old_indexes = {
    };
    while(i--)old_indexes[old_blocks[i].key] = i;
    const new_blocks = [];
    const new_lookup = new Map();
    const deltas = new Map();
    i = n;
    while(i--){
        const child_ctx = get_context(ctx, list, i);
        const key = get_key(child_ctx);
        let block = lookup.get(key);
        if (!block) {
            block = create_each_block(key, child_ctx);
            block.c();
        } else if (dynamic) block.p(child_ctx, dirty);
        new_lookup.set(key, new_blocks[i] = block);
        if (key in old_indexes) deltas.set(key, Math.abs(i - old_indexes[key]));
    }
    const will_move = new Set();
    const did_move = new Set();
    function insert(block) {
        transition_in(block, 1);
        block.m(node, next);
        lookup.set(block.key, block);
        next = block.first;
        n--;
    }
    while(o && n){
        const new_block = new_blocks[n - 1];
        const old_block = old_blocks[o - 1];
        const new_key = new_block.key;
        const old_key = old_block.key;
        if (new_block === old_block) {
            // do nothing
            next = new_block.first;
            o--;
            n--;
        } else if (!new_lookup.has(old_key)) {
            // remove old block
            destroy(old_block, lookup);
            o--;
        } else if (!lookup.has(new_key) || will_move.has(new_key)) insert(new_block);
        else if (did_move.has(old_key)) o--;
        else if (deltas.get(new_key) > deltas.get(old_key)) {
            did_move.add(new_key);
            insert(new_block);
        } else {
            will_move.add(old_key);
            o--;
        }
    }
    while(o--){
        const old_block = old_blocks[o];
        if (!new_lookup.has(old_block.key)) destroy(old_block, lookup);
    }
    while(n)insert(new_blocks[n - 1]);
    return new_blocks;
}
function mount_component(component, target, anchor, customElement) {
    const { fragment , on_mount , on_destroy , after_update  } = component.$$;
    fragment && fragment.m(target, anchor);
    if (!customElement) // onMount happens before the initial afterUpdate
    add_render_callback(()=>{
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) on_destroy.push(...new_on_destroy);
        else // Edge case - component was destroyed immediately,
        // most likely as a result of a binding initialising
        run_all(new_on_destroy);
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [
    -1
]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false,
        root: options.target || parent_component.$$.root
    };
    append_styles && append_styles($$.root);
    let ready = false;
    $$.ctx = instance ? instance(component, options.props || {
    }, (i, ret, ...rest)=>{
        const value = rest.length ? rest[0] : ret;
        if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
            if (!$$.skip_bound && $$.bound[i]) $$.bound[i](value);
            if (ready) make_dirty(component, i);
        }
        return ret;
    }) : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        $$.fragment && $$.fragment.c();
        if (options.intro) transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor, options.customElement);
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */ class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback1) {
        const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
        callbacks.push(callback1);
        return ()=>{
            const index = callbacks.indexOf(callback1);
            if (index !== -1) callbacks.splice(index, 1);
        };
    }
    $set($$props1) {
        if (this.$$set && !is_empty($$props1)) {
            this.$$.skip_bound = true;
            this.$$set($$props1);
            this.$$.skip_bound = false;
        }
    }
}
// via https://unpkg.com/browse/emojibase-data@6.0.0/meta/groups.json
const allGroups = [
    [
        -1,
        '✨',
        'custom'
    ],
    [
        0,
        '😀',
        'smileys-emotion'
    ],
    [
        1,
        '👋',
        'people-body'
    ],
    [
        3,
        '🐱',
        'animals-nature'
    ],
    [
        4,
        '🍎',
        'food-drink'
    ],
    [
        5,
        '🏠️',
        'travel-places'
    ],
    [
        6,
        '⚽',
        'activities'
    ],
    [
        7,
        '📝',
        'objects'
    ],
    [
        8,
        '⛔️',
        'symbols'
    ],
    [
        9,
        '🏁',
        'flags'
    ]
].map(([id, emoji, name])=>({
        id,
        emoji,
        name
    })
);
const groups = allGroups.slice(1);
const customGroup = allGroups[0];
const MIN_SEARCH_TEXT_LENGTH = 2;
const NUM_SKIN_TONES = 6;
/* istanbul ignore next */ const rIC = typeof requestIdleCallback === 'function' ? requestIdleCallback : setTimeout;
// check for ZWJ (zero width joiner) character
function hasZwj(emoji) {
    return emoji.unicode.includes('\u200d');
}
// Find one good representative emoji from each version to test by checking its color.
// Ideally it should have color in the center. For some inspiration, see:
// https://about.gitlab.com/blog/2018/05/30/journey-in-native-unicode-emoji/
//
// Note that for certain versions (12.1, 13.1), there is no point in testing them explicitly, because
// all the emoji from this version are compound-emoji from previous versions. So they would pass a color
// test, even in browsers that display them as double emoji. (E.g. "face in clouds" might render as
// "face without mouth" plus "fog".) These emoji can only be filtered using the width test,
// which happens in checkZwjSupport.js.
const versionsAndTestEmoji = {
    '🫠': 14,
    '🥲': 13.1,
    '🥻': 12.1,
    '🥰': 11,
    '🤩': 5,
    '👱‍♀️': 4,
    '🤣': 3,
    '👁️‍🗨️': 2,
    '😀': 1,
    '😐️': 0.7,
    '😃': 0.6
};
const TIMEOUT_BEFORE_LOADING_MESSAGE = 1000; // 1 second
const DEFAULT_SKIN_TONE_EMOJI = '🖐️';
const DEFAULT_NUM_COLUMNS = 8;
// Based on https://fivethirtyeight.com/features/the-100-most-used-emojis/ and
// https://blog.emojipedia.org/facebook-reveals-most-and-least-used-emojis/ with
// a bit of my own curation. (E.g. avoid the "OK" gesture because of connotations:
// https://emojipedia.org/ok-hand/)
const MOST_COMMONLY_USED_EMOJI = [
    '😊',
    '😒',
    '♥️',
    '👍️',
    '😍',
    '😂',
    '😭',
    '☺️',
    '😔',
    '😩',
    '😏',
    '💕',
    '🙌',
    '😘'
];
// It's important to list Twemoji Mozilla before everything else, because Mozilla bundles their
// own font on some platforms (notably Windows and Linux as of this writing). Typically Mozilla
// updates faster than the underlying OS, and we don't want to render older emoji in one font and
// newer emoji in another font:
// https://github.com/nolanlawson/emoji-picker-element/pull/268#issuecomment-1073347283
const FONT_FAMILY = "\"Twemoji Mozilla\",\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\",\"EmojiOne Color\",\"Android Emoji\",sans-serif";
/* istanbul ignore next */ const DEFAULT_CATEGORY_SORTING = (a, b)=>a < b ? -1 : a > b ? 1 : 0
;
// Test if an emoji is supported by rendering it to canvas and checking that the color is not black
const getTextFeature = (text, color)=>{
    const canvas = document.createElement('canvas');
    canvas.width = canvas.height = 1;
    const ctx = canvas.getContext('2d');
    ctx.textBaseline = 'top';
    ctx.font = `100px ${FONT_FAMILY}`;
    ctx.fillStyle = color;
    ctx.scale(0.01, 0.01);
    ctx.fillText(text, 0, 0);
    return ctx.getImageData(0, 0, 1, 1).data;
};
const compareFeatures = (feature1, feature2)=>{
    const feature1Str = [
        ...feature1
    ].join(',');
    const feature2Str = [
        ...feature2
    ].join(',');
    // This is RGBA, so for 0,0,0, we are checking that the first RGB is not all zeroes.
    // Most of the time when unsupported this is 0,0,0,0, but on Chrome on Mac it is
    // 0,0,0,61 - there is a transparency here.
    return feature1Str === feature2Str && !feature1Str.startsWith('0,0,0,');
};
function testColorEmojiSupported(text) {
    // Render white and black and then compare them to each other and ensure they're the same
    // color, and neither one is black. This shows that the emoji was rendered in color.
    const feature1 = getTextFeature(text, '#000');
    const feature2 = getTextFeature(text, '#fff');
    return feature1 && feature2 && compareFeatures(feature1, feature2);
}
// rather than check every emoji ever, which would be expensive, just check some representatives from the
function determineEmojiSupportLevel() {
    const entries = Object.entries(versionsAndTestEmoji);
    try {
        // start with latest emoji and work backwards
        for (const [emoji, version] of entries){
            if (testColorEmojiSupported(emoji)) return version;
        }
    } catch (e) {
    } finally{
    }
    // In case of an error, be generous and just assume all emoji are supported (e.g. for canvas errors
    // due to anti-fingerprinting add-ons). Better to show some gray boxes than nothing at all.
    return entries[0][1] // first one in the list is the most recent version
    ;
}
// Check which emojis we know for sure aren't supported, based on Unicode version level
const emojiSupportLevelPromise = new Promise((resolve)=>rIC(()=>resolve(determineEmojiSupportLevel()) // delay so ideally this can run while IDB is first populating
    )
);
// determine which emojis containing ZWJ (zero width joiner) characters
// are supported (rendered as one glyph) rather than unsupported (rendered as two or more glyphs)
const supportedZwjEmojis = new Map();
const VARIATION_SELECTOR = '\ufe0f';
const SKINTONE_MODIFIER = '\ud83c';
const ZWJ = '\u200d';
const LIGHT_SKIN_TONE = 127995;
const LIGHT_SKIN_TONE_MODIFIER = 57339;
// TODO: this is a naive implementation, we can improve it later
// It's only used for the skintone picker, so as long as people don't customize with
// really exotic emoji then it should work fine
function applySkinTone(str, skinTone) {
    if (skinTone === 0) return str;
    const zwjIndex = str.indexOf(ZWJ);
    if (zwjIndex !== -1) return str.substring(0, zwjIndex) + String.fromCodePoint(LIGHT_SKIN_TONE + skinTone - 1) + str.substring(zwjIndex);
    if (str.endsWith(VARIATION_SELECTOR)) str = str.substring(0, str.length - 1);
    return str + SKINTONE_MODIFIER + String.fromCodePoint(LIGHT_SKIN_TONE_MODIFIER + skinTone - 1);
}
function halt(event) {
    event.preventDefault();
    event.stopPropagation();
}
// Implementation left/right or up/down navigation, circling back when you
// reach the start/end of the list
function incrementOrDecrement(decrement, val, arr) {
    val += decrement ? -1 : 1;
    if (val < 0) val = arr.length - 1;
    else if (val >= arr.length) val = 0;
    return val;
}
// like lodash's uniqBy but much smaller
function uniqBy(arr, func) {
    const set = new Set();
    const res = [];
    for (const item of arr){
        const key = func(item);
        if (!set.has(key)) {
            set.add(key);
            res.push(item);
        }
    }
    return res;
}
// We don't need all the data on every emoji, and there are specific things we need
// for the UI, so build a "view model" from the emoji object we got from the database
function summarizeEmojisForUI(emojis, emojiSupportLevel) {
    const toSimpleSkinsMap = (skins)=>{
        const res = {
        };
        for (const skin of skins)// ignore arrays like [1, 2] with multiple skin tones
        // also ignore variants that are in an unsupported emoji version
        // (these do exist - variants from a different version than their base emoji)
        if (typeof skin.tone === 'number' && skin.version <= emojiSupportLevel) res[skin.tone] = skin.unicode;
        return res;
    };
    return emojis.map(({ unicode , skins , shortcodes , url , name , category  })=>({
            unicode,
            name,
            shortcodes,
            url,
            category,
            id: unicode || name,
            skins: skins && toSimpleSkinsMap(skins),
            title: (shortcodes || []).join(', ')
        })
    );
}
// import rAF from one place so that the bundle size is a bit smaller
const rAF = requestAnimationFrame;
// Svelte action to calculate the width of an element and auto-update
let resizeObserverSupported = typeof ResizeObserver === 'function';
function calculateWidth(node, onUpdate) {
    let resizeObserver;
    if (resizeObserverSupported) {
        resizeObserver = new ResizeObserver((entries)=>onUpdate(entries[0].contentRect.width)
        );
        resizeObserver.observe(node);
    } else rAF(()=>onUpdate(node.getBoundingClientRect().width)
    );
    // cleanup function (called on destroy)
    return {
        destroy () {
            if (resizeObserver) resizeObserver.disconnect();
        }
    };
}
// get the width of the text inside of a DOM node, via https://stackoverflow.com/a/59525891/680742
function calculateTextWidth(node) {
    /* istanbul ignore else */ {
        const range = document.createRange();
        range.selectNode(node.firstChild);
        return range.getBoundingClientRect().width;
    }
}
let baselineEmojiWidth;
function checkZwjSupport(zwjEmojisToCheck, baselineEmoji, emojiToDomNode) {
    for (const emoji of zwjEmojisToCheck){
        const domNode = emojiToDomNode(emoji);
        const emojiWidth = calculateTextWidth(domNode);
        if (typeof baselineEmojiWidth === 'undefined') baselineEmojiWidth = calculateTextWidth(baselineEmoji);
        // On Windows, some supported emoji are ~50% bigger than the baseline emoji, but what we really want to guard
        // against are the ones that are 2x the size, because those are truly broken (person with red hair = person with
        // floating red wig, black cat = cat with black square, polar bear = bear with snowflake, etc.)
        // So here we set the threshold at 1.8 times the size of the baseline emoji.
        const supported = emojiWidth / 1.8 < baselineEmojiWidth;
        supportedZwjEmojis.set(emoji.unicode, supported);
    }
}
// Measure after style/layout are complete
const requestPostAnimationFrame = (callback)=>{
    rAF(()=>{
        setTimeout(callback);
    });
};
// like lodash's uniq
function uniq(arr) {
    return uniqBy(arr, (_)=>_
    );
}
/* src/picker/components/Picker/Picker.svelte generated by Svelte v3.46.4 */ const { Map: Map_1  } = globals;
function get_each_context(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[63] = list[i];
    child_ctx[65] = i;
    return child_ctx;
}
function get_each_context_1(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[66] = list[i];
    child_ctx[65] = i;
    return child_ctx;
}
function get_each_context_2(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[63] = list[i];
    child_ctx[65] = i;
    return child_ctx;
}
function get_each_context_3(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[69] = list[i];
    return child_ctx;
}
function get_each_context_4(ctx, list, i) {
    const child_ctx = ctx.slice();
    child_ctx[72] = list[i];
    child_ctx[65] = i;
    return child_ctx;
}
// (43:38) {#each skinTones as skinTone, i (skinTone)}
function create_each_block_4(key_1, ctx) {
    let div;
    let t_value = /*skinTone*/ ctx[72] + "";
    let t;
    let div_id_value;
    let div_class_value;
    let div_aria_selected_value;
    let div_title_value;
    let div_aria_label_value;
    return {
        key: key_1,
        first: null,
        c () {
            div = element1("div");
            t = text1(t_value);
            attr(div, "id", div_id_value = "skintone-" + /*i*/ ctx[65]);
            attr(div, "class", div_class_value = "emoji hide-focus " + /*i*/ (ctx[65] === /*activeSkinTone*/ ctx[20] ? 'active' : ''));
            attr(div, "aria-selected", div_aria_selected_value = /*i*/ ctx[65] === /*activeSkinTone*/ ctx[20]);
            attr(div, "role", "option");
            attr(div, "title", div_title_value = /*i18n*/ ctx[0].skinTones[/*i*/ ctx[65]]);
            attr(div, "tabindex", "-1");
            attr(div, "aria-label", div_aria_label_value = /*i18n*/ ctx[0].skinTones[/*i*/ ctx[65]]);
            this.first = div;
        },
        m (target, anchor) {
            insert1(target, div, anchor);
            append(div, t);
        },
        p (new_ctx, dirty) {
            ctx = new_ctx;
            if (dirty[0] & /*skinTones*/ 512 && t_value !== (t_value = /*skinTone*/ ctx[72] + "")) set_data(t, t_value);
            if (dirty[0] & /*skinTones*/ 512 && div_id_value !== (div_id_value = "skintone-" + /*i*/ ctx[65])) attr(div, "id", div_id_value);
            if (dirty[0] & /*skinTones, activeSkinTone*/ 1049088 && div_class_value !== (div_class_value = "emoji hide-focus " + /*i*/ (ctx[65] === /*activeSkinTone*/ ctx[20] ? 'active' : ''))) attr(div, "class", div_class_value);
            if (dirty[0] & /*skinTones, activeSkinTone*/ 1049088 && div_aria_selected_value !== (div_aria_selected_value = /*i*/ ctx[65] === /*activeSkinTone*/ ctx[20])) attr(div, "aria-selected", div_aria_selected_value);
            if (dirty[0] & /*i18n, skinTones*/ 513 && div_title_value !== (div_title_value = /*i18n*/ ctx[0].skinTones[/*i*/ ctx[65]])) attr(div, "title", div_title_value);
            if (dirty[0] & /*i18n, skinTones*/ 513 && div_aria_label_value !== (div_aria_label_value = /*i18n*/ ctx[0].skinTones[/*i*/ ctx[65]])) attr(div, "aria-label", div_aria_label_value);
        },
        d (detaching) {
            if (detaching) detach(div);
        }
    };
}
// (53:33) {#each groups as group (group.id)}
function create_each_block_3(key_1, ctx) {
    let button;
    let div;
    let t_value = /*group*/ ctx[69].emoji + "";
    let t;
    let button_aria_controls_value;
    let button_aria_label_value;
    let button_aria_selected_value;
    let button_title_value;
    let mounted;
    let dispose;
    function click_handler() {
        return(/*click_handler*/ ctx[49](/*group*/ ctx[69]));
    }
    return {
        key: key_1,
        first: null,
        c () {
            button = element1("button");
            div = element1("div");
            t = text1(t_value);
            attr(div, "class", "nav-emoji emoji");
            attr(button, "role", "tab");
            attr(button, "class", "nav-button");
            attr(button, "aria-controls", button_aria_controls_value = "tab-" + /*group*/ ctx[69].id);
            attr(button, "aria-label", button_aria_label_value = /*i18n*/ ctx[0].categories[/*group*/ ctx[69].name]);
            attr(button, "aria-selected", button_aria_selected_value = !/*searchMode*/ ctx[4] && /*currentGroup*/ ctx[13].id === /*group*/ ctx[69].id);
            attr(button, "title", button_title_value = /*i18n*/ ctx[0].categories[/*group*/ ctx[69].name]);
            this.first = button;
        },
        m (target, anchor) {
            insert1(target, button, anchor);
            append(button, div);
            append(div, t);
            if (!mounted) {
                dispose = listen(button, "click", click_handler);
                mounted = true;
            }
        },
        p (new_ctx, dirty) {
            ctx = new_ctx;
            if (dirty[0] & /*groups*/ 4096 && t_value !== (t_value = /*group*/ ctx[69].emoji + "")) set_data(t, t_value);
            if (dirty[0] & /*groups*/ 4096 && button_aria_controls_value !== (button_aria_controls_value = "tab-" + /*group*/ ctx[69].id)) attr(button, "aria-controls", button_aria_controls_value);
            if (dirty[0] & /*i18n, groups*/ 4097 && button_aria_label_value !== (button_aria_label_value = /*i18n*/ ctx[0].categories[/*group*/ ctx[69].name])) attr(button, "aria-label", button_aria_label_value);
            if (dirty[0] & /*searchMode, currentGroup, groups*/ 12304 && button_aria_selected_value !== (button_aria_selected_value = !/*searchMode*/ ctx[4] && /*currentGroup*/ ctx[13].id === /*group*/ ctx[69].id)) attr(button, "aria-selected", button_aria_selected_value);
            if (dirty[0] & /*i18n, groups*/ 4097 && button_title_value !== (button_title_value = /*i18n*/ ctx[0].categories[/*group*/ ctx[69].name])) attr(button, "title", button_title_value);
        },
        d (detaching) {
            if (detaching) detach(button);
            mounted = false;
            dispose();
        }
    };
}
// (93:100) {:else}
function create_else_block_1(ctx1) {
    let img;
    let img_src_value;
    return {
        c () {
            img = element1("img");
            attr(img, "class", "custom-emoji");
            if (!src_url_equal(img.src, img_src_value = /*emoji*/ ctx1[63].url)) attr(img, "src", img_src_value);
            attr(img, "alt", "");
            attr(img, "loading", "lazy");
        },
        m (target, anchor) {
            insert1(target, img, anchor);
        },
        p (ctx, dirty) {
            if (dirty[0] & /*currentEmojisWithCategories*/ 32768 && !src_url_equal(img.src, img_src_value = /*emoji*/ ctx[63].url)) attr(img, "src", img_src_value);
        },
        d (detaching) {
            if (detaching) detach(img);
        }
    };
}
// (93:40) {#if emoji.unicode}
function create_if_block_1(ctx2) {
    let t_value = /*unicodeWithSkin*/ ctx2[27](/*emoji*/ ctx2[63], /*currentSkinTone*/ ctx2[8]) + "";
    let t;
    return {
        c () {
            t = text1(t_value);
        },
        m (target, anchor) {
            insert1(target, t, anchor);
        },
        p (ctx, dirty) {
            if (dirty[0] & /*currentEmojisWithCategories, currentSkinTone*/ 33024 && t_value !== (t_value = /*unicodeWithSkin*/ ctx[27](/*emoji*/ ctx[63], /*currentSkinTone*/ ctx[8]) + "")) set_data(t, t_value);
        },
        d (detaching) {
            if (detaching) detach(t);
        }
    };
}
// (88:53) {#each emojiWithCategory.emojis as emoji, i (emoji.id)}
function create_each_block_2(key_1, ctx3) {
    let button;
    let button_role_value;
    let button_aria_selected_value;
    let button_aria_label_value;
    let button_title_value;
    let button_class_value;
    let button_id_value;
    function select_block_type(ctx, dirty) {
        if (/*emoji*/ ctx[63].unicode) return create_if_block_1;
        return create_else_block_1;
    }
    let current_block_type = select_block_type(ctx3);
    let if_block = current_block_type(ctx3);
    return {
        key: key_1,
        first: null,
        c () {
            button = element1("button");
            if_block.c();
            attr(button, "role", button_role_value = /*searchMode*/ ctx3[4] ? 'option' : 'menuitem');
            attr(button, "aria-selected", button_aria_selected_value = /*searchMode*/ ctx3[4] ? /*i*/ ctx3[65] == /*activeSearchItem*/ ctx3[5] : '');
            attr(button, "aria-label", button_aria_label_value = /*labelWithSkin*/ ctx3[28](/*emoji*/ ctx3[63], /*currentSkinTone*/ ctx3[8]));
            attr(button, "title", button_title_value = /*emoji*/ ctx3[63].title);
            attr(button, "class", button_class_value = "emoji " + /*searchMode*/ (ctx3[4] && /*i*/ ctx3[65] === /*activeSearchItem*/ ctx3[5] ? 'active' : ''));
            attr(button, "id", button_id_value = "emo-" + /*emoji*/ ctx3[63].id);
            this.first = button;
        },
        m (target, anchor) {
            insert1(target, button, anchor);
            if_block.m(button, null);
        },
        p (new_ctx, dirty) {
            ctx3 = new_ctx;
            if (current_block_type === (current_block_type = select_block_type(ctx3)) && if_block) if_block.p(ctx3, dirty);
            else {
                if_block.d(1);
                if_block = current_block_type(ctx3);
                if (if_block) {
                    if_block.c();
                    if_block.m(button, null);
                }
            }
            if (dirty[0] & /*searchMode*/ 16 && button_role_value !== (button_role_value = /*searchMode*/ ctx3[4] ? 'option' : 'menuitem')) attr(button, "role", button_role_value);
            if (dirty[0] & /*searchMode, currentEmojisWithCategories, activeSearchItem*/ 32816 && button_aria_selected_value !== (button_aria_selected_value = /*searchMode*/ ctx3[4] ? /*i*/ ctx3[65] == /*activeSearchItem*/ ctx3[5] : '')) attr(button, "aria-selected", button_aria_selected_value);
            if (dirty[0] & /*currentEmojisWithCategories, currentSkinTone*/ 33024 && button_aria_label_value !== (button_aria_label_value = /*labelWithSkin*/ ctx3[28](/*emoji*/ ctx3[63], /*currentSkinTone*/ ctx3[8]))) attr(button, "aria-label", button_aria_label_value);
            if (dirty[0] & /*currentEmojisWithCategories*/ 32768 && button_title_value !== (button_title_value = /*emoji*/ ctx3[63].title)) attr(button, "title", button_title_value);
            if (dirty[0] & /*searchMode, currentEmojisWithCategories, activeSearchItem*/ 32816 && button_class_value !== (button_class_value = "emoji " + /*searchMode*/ (ctx3[4] && /*i*/ ctx3[65] === /*activeSearchItem*/ ctx3[5] ? 'active' : ''))) attr(button, "class", button_class_value);
            if (dirty[0] & /*currentEmojisWithCategories*/ 32768 && button_id_value !== (button_id_value = "emo-" + /*emoji*/ ctx3[63].id)) attr(button, "id", button_id_value);
        },
        d (detaching) {
            if (detaching) detach(button);
            if_block.d();
        }
    };
}
// (69:36) {#each currentEmojisWithCategories as emojiWithCategory, i (emojiWithCategory.category)}
function create_each_block_1(key_1, ctx4) {
    let div0;
    let t_value = /*searchMode*/ (ctx4[4] ? /*i18n*/ ctx4[0].searchResultsLabel : /*emojiWithCategory*/ ctx4[66].category ? /*emojiWithCategory*/ ctx4[66].category : /*currentEmojisWithCategories*/ ctx4[15].length > 1 ? /*i18n*/ ctx4[0].categories.custom : /*i18n*/ ctx4[0].categories[/*currentGroup*/ ctx4[13].name]) + "";
    let t;
    let div0_id_value;
    let div0_class_value;
    let div1;
    let each_blocks = [];
    let each_1_lookup = new Map_1();
    let div1_role_value;
    let div1_aria_labelledby_value;
    let div1_id_value;
    let each_value_2 = /*emojiWithCategory*/ ctx4[66].emojis;
    const get_key = (ctx)=>/*emoji*/ ctx[63].id
    ;
    for(let i1 = 0; i1 < each_value_2.length; i1 += 1){
        let child_ctx = get_each_context_2(ctx4, each_value_2, i1);
        let key = get_key(child_ctx);
        each_1_lookup.set(key, each_blocks[i1] = create_each_block_2(key, child_ctx));
    }
    return {
        key: key_1,
        first: null,
        c () {
            div0 = element1("div");
            t = text1(t_value);
            div1 = element1("div");
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].c();
            attr(div0, "id", div0_id_value = "menu-label-" + /*i*/ ctx4[65]);
            attr(div0, "class", div0_class_value = "category " + /*currentEmojisWithCategories*/ (ctx4[15].length === 1 && /*currentEmojisWithCategories*/ ctx4[15][0].category === '' ? 'gone' : ''));
            attr(div0, "aria-hidden", "true");
            attr(div1, "class", "emoji-menu");
            attr(div1, "role", div1_role_value = /*searchMode*/ ctx4[4] ? 'listbox' : 'menu');
            attr(div1, "aria-labelledby", div1_aria_labelledby_value = "menu-label-" + /*i*/ ctx4[65]);
            attr(div1, "id", div1_id_value = /*searchMode*/ ctx4[4] ? 'search-results' : '');
            this.first = div0;
        },
        m (target, anchor) {
            insert1(target, div0, anchor);
            append(div0, t);
            insert1(target, div1, anchor);
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].m(div1, null);
        },
        p (new_ctx, dirty) {
            ctx4 = new_ctx;
            if (dirty[0] & /*searchMode, i18n, currentEmojisWithCategories, currentGroup*/ 40977 && t_value !== (t_value = /*searchMode*/ (ctx4[4] ? /*i18n*/ ctx4[0].searchResultsLabel : /*emojiWithCategory*/ ctx4[66].category ? /*emojiWithCategory*/ ctx4[66].category : /*currentEmojisWithCategories*/ ctx4[15].length > 1 ? /*i18n*/ ctx4[0].categories.custom : /*i18n*/ ctx4[0].categories[/*currentGroup*/ ctx4[13].name]) + "")) set_data(t, t_value);
            if (dirty[0] & /*currentEmojisWithCategories*/ 32768 && div0_id_value !== (div0_id_value = "menu-label-" + /*i*/ ctx4[65])) attr(div0, "id", div0_id_value);
            if (dirty[0] & /*currentEmojisWithCategories*/ 32768 && div0_class_value !== (div0_class_value = "category " + /*currentEmojisWithCategories*/ (ctx4[15].length === 1 && /*currentEmojisWithCategories*/ ctx4[15][0].category === '' ? 'gone' : ''))) attr(div0, "class", div0_class_value);
            if (dirty[0] & /*searchMode, currentEmojisWithCategories, activeSearchItem, labelWithSkin, currentSkinTone, unicodeWithSkin*/ 402686256) {
                each_value_2 = /*emojiWithCategory*/ ctx4[66].emojis;
                each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx4, each_value_2, each_1_lookup, div1, destroy_block, create_each_block_2, null, get_each_context_2);
            }
            if (dirty[0] & /*searchMode*/ 16 && div1_role_value !== (div1_role_value = /*searchMode*/ ctx4[4] ? 'listbox' : 'menu')) attr(div1, "role", div1_role_value);
            if (dirty[0] & /*currentEmojisWithCategories*/ 32768 && div1_aria_labelledby_value !== (div1_aria_labelledby_value = "menu-label-" + /*i*/ ctx4[65])) attr(div1, "aria-labelledby", div1_aria_labelledby_value);
            if (dirty[0] & /*searchMode*/ 16 && div1_id_value !== (div1_id_value = /*searchMode*/ ctx4[4] ? 'search-results' : '')) attr(div1, "id", div1_id_value);
        },
        d (detaching) {
            if (detaching) detach(div0);
            if (detaching) detach(div1);
            for(let i = 0; i < each_blocks.length; i += 1)each_blocks[i].d();
        }
    };
}
// (102:94) {:else}
function create_else_block(ctx5) {
    let img;
    let img_src_value;
    return {
        c () {
            img = element1("img");
            attr(img, "class", "custom-emoji");
            if (!src_url_equal(img.src, img_src_value = /*emoji*/ ctx5[63].url)) attr(img, "src", img_src_value);
            attr(img, "alt", "");
            attr(img, "loading", "lazy");
        },
        m (target, anchor) {
            insert1(target, img, anchor);
        },
        p (ctx, dirty) {
            if (dirty[0] & /*currentFavorites*/ 1024 && !src_url_equal(img.src, img_src_value = /*emoji*/ ctx[63].url)) attr(img, "src", img_src_value);
        },
        d (detaching) {
            if (detaching) detach(img);
        }
    };
}
// (102:34) {#if emoji.unicode}
function create_if_block(ctx6) {
    let t_value = /*unicodeWithSkin*/ ctx6[27](/*emoji*/ ctx6[63], /*currentSkinTone*/ ctx6[8]) + "";
    let t;
    return {
        c () {
            t = text1(t_value);
        },
        m (target, anchor) {
            insert1(target, t, anchor);
        },
        p (ctx, dirty) {
            if (dirty[0] & /*currentFavorites, currentSkinTone*/ 1280 && t_value !== (t_value = /*unicodeWithSkin*/ ctx[27](/*emoji*/ ctx[63], /*currentSkinTone*/ ctx[8]) + "")) set_data(t, t_value);
        },
        d (detaching) {
            if (detaching) detach(t);
        }
    };
}
// (98:102) {#each currentFavorites as emoji, i (emoji.id)}
function create_each_block1(key_1, ctx7) {
    let button;
    let button_aria_label_value;
    let button_title_value;
    let button_id_value;
    function select_block_type_1(ctx, dirty) {
        if (/*emoji*/ ctx[63].unicode) return create_if_block;
        return create_else_block;
    }
    let current_block_type = select_block_type_1(ctx7);
    let if_block = current_block_type(ctx7);
    return {
        key: key_1,
        first: null,
        c () {
            button = element1("button");
            if_block.c();
            attr(button, "role", "menuitem");
            attr(button, "aria-label", button_aria_label_value = /*labelWithSkin*/ ctx7[28](/*emoji*/ ctx7[63], /*currentSkinTone*/ ctx7[8]));
            attr(button, "title", button_title_value = /*emoji*/ ctx7[63].title);
            attr(button, "class", "emoji");
            attr(button, "id", button_id_value = "fav-" + /*emoji*/ ctx7[63].id);
            this.first = button;
        },
        m (target, anchor) {
            insert1(target, button, anchor);
            if_block.m(button, null);
        },
        p (new_ctx, dirty) {
            ctx7 = new_ctx;
            if (current_block_type === (current_block_type = select_block_type_1(ctx7)) && if_block) if_block.p(ctx7, dirty);
            else {
                if_block.d(1);
                if_block = current_block_type(ctx7);
                if (if_block) {
                    if_block.c();
                    if_block.m(button, null);
                }
            }
            if (dirty[0] & /*currentFavorites, currentSkinTone*/ 1280 && button_aria_label_value !== (button_aria_label_value = /*labelWithSkin*/ ctx7[28](/*emoji*/ ctx7[63], /*currentSkinTone*/ ctx7[8]))) attr(button, "aria-label", button_aria_label_value);
            if (dirty[0] & /*currentFavorites*/ 1024 && button_title_value !== (button_title_value = /*emoji*/ ctx7[63].title)) attr(button, "title", button_title_value);
            if (dirty[0] & /*currentFavorites*/ 1024 && button_id_value !== (button_id_value = "fav-" + /*emoji*/ ctx7[63].id)) attr(button, "id", button_id_value);
        },
        d (detaching) {
            if (detaching) detach(button);
            if_block.d();
        }
    };
}
function create_fragment1(ctx8) {
    let section;
    let div0;
    let div4;
    let div1;
    let input;
    let input_placeholder_value;
    let input_aria_expanded_value;
    let input_aria_activedescendant_value;
    let label;
    let t0_value = /*i18n*/ ctx8[0].searchLabel + "";
    let t0;
    let span0;
    let t1_value = /*i18n*/ ctx8[0].searchDescription + "";
    let t1;
    let div2;
    let button0;
    let t2;
    let button0_class_value;
    let div2_class_value;
    let span1;
    let t3_value = /*i18n*/ ctx8[0].skinToneDescription + "";
    let t3;
    let div3;
    let each_blocks_3 = [];
    let each0_lookup = new Map_1();
    let div3_class_value;
    let div3_aria_label_value;
    let div3_aria_activedescendant_value;
    let div3_aria_hidden_value;
    let div5;
    let each_blocks_2 = [];
    let each1_lookup = new Map_1();
    let div5_aria_label_value;
    let div7;
    let div6;
    let div8;
    let t4;
    let div8_class_value;
    let div10;
    let div9;
    let each_blocks_1 = [];
    let each2_lookup = new Map_1();
    let div10_class_value;
    let div10_role_value;
    let div10_aria_label_value;
    let div10_id_value;
    let div11;
    let each_blocks = [];
    let each3_lookup = new Map_1();
    let div11_class_value;
    let div11_aria_label_value;
    let button1;
    let section_aria_label_value;
    let mounted;
    let dispose;
    let each_value_4 = /*skinTones*/ ctx8[9];
    const get_key = (ctx)=>/*skinTone*/ ctx[72]
    ;
    for(let i8 = 0; i8 < each_value_4.length; i8 += 1){
        let child_ctx = get_each_context_4(ctx8, each_value_4, i8);
        let key = get_key(child_ctx);
        each0_lookup.set(key, each_blocks_3[i8] = create_each_block_4(key, child_ctx));
    }
    let each_value_3 = /*groups*/ ctx8[12];
    const get_key_1 = (ctx)=>/*group*/ ctx[69].id
    ;
    for(let i2 = 0; i2 < each_value_3.length; i2 += 1){
        let child_ctx = get_each_context_3(ctx8, each_value_3, i2);
        let key = get_key_1(child_ctx);
        each1_lookup.set(key, each_blocks_2[i2] = create_each_block_3(key, child_ctx));
    }
    let each_value_1 = /*currentEmojisWithCategories*/ ctx8[15];
    const get_key_2 = (ctx)=>/*emojiWithCategory*/ ctx[66].category
    ;
    for(let i3 = 0; i3 < each_value_1.length; i3 += 1){
        let child_ctx = get_each_context_1(ctx8, each_value_1, i3);
        let key = get_key_2(child_ctx);
        each2_lookup.set(key, each_blocks_1[i3] = create_each_block_1(key, child_ctx));
    }
    let each_value = /*currentFavorites*/ ctx8[10];
    const get_key_3 = (ctx)=>/*emoji*/ ctx[63].id
    ;
    for(let i4 = 0; i4 < each_value.length; i4 += 1){
        let child_ctx = get_each_context(ctx8, each_value, i4);
        let key = get_key_3(child_ctx);
        each3_lookup.set(key, each_blocks[i4] = create_each_block1(key, child_ctx));
    }
    return {
        c () {
            section = element1("section");
            div0 = element1("div");
            div4 = element1("div");
            div1 = element1("div");
            input = element1("input");
            label = element1("label");
            t0 = text1(t0_value);
            span0 = element1("span");
            t1 = text1(t1_value);
            div2 = element1("div");
            button0 = element1("button");
            t2 = text1(/*skinToneButtonText*/ ctx8[21]);
            span1 = element1("span");
            t3 = text1(t3_value);
            div3 = element1("div");
            for(let i = 0; i < each_blocks_3.length; i += 1)each_blocks_3[i].c();
            div5 = element1("div");
            for(let i5 = 0; i5 < each_blocks_2.length; i5 += 1)each_blocks_2[i5].c();
            div7 = element1("div");
            div6 = element1("div");
            div8 = element1("div");
            t4 = text1(/*message*/ ctx8[18]);
            div10 = element1("div");
            div9 = element1("div");
            for(let i6 = 0; i6 < each_blocks_1.length; i6 += 1)each_blocks_1[i6].c();
            div11 = element1("div");
            for(let i7 = 0; i7 < each_blocks.length; i7 += 1)each_blocks[i7].c();
            button1 = element1("button");
            button1.textContent = "😀";
            attr(div0, "class", "pad-top");
            attr(input, "id", "search");
            attr(input, "class", "search");
            attr(input, "type", "search");
            attr(input, "role", "combobox");
            attr(input, "enterkeyhint", "search");
            attr(input, "placeholder", input_placeholder_value = /*i18n*/ ctx8[0].searchLabel);
            attr(input, "autocapitalize", "none");
            attr(input, "autocomplete", "off");
            attr(input, "spellcheck", "true");
            attr(input, "aria-expanded", input_aria_expanded_value = !!/*searchMode*/ (ctx8[4] && /*currentEmojis*/ ctx8[1].length));
            attr(input, "aria-controls", "search-results");
            attr(input, "aria-describedby", "search-description");
            attr(input, "aria-autocomplete", "list");
            attr(input, "aria-activedescendant", input_aria_activedescendant_value = /*activeSearchItemId*/ ctx8[26] ? `emo-${ctx8[26]}` : '');
            attr(label, "class", "sr-only");
            attr(label, "for", "search");
            attr(span0, "id", "search-description");
            attr(span0, "class", "sr-only");
            attr(div1, "class", "search-wrapper");
            attr(button0, "id", "skintone-button");
            attr(button0, "class", button0_class_value = "emoji " + /*skinTonePickerExpanded*/ (ctx8[6] ? 'hide-focus' : ''));
            attr(button0, "aria-label", /*skinToneButtonLabel*/ ctx8[23]);
            attr(button0, "title", /*skinToneButtonLabel*/ ctx8[23]);
            attr(button0, "aria-describedby", "skintone-description");
            attr(button0, "aria-haspopup", "listbox");
            attr(button0, "aria-expanded", /*skinTonePickerExpanded*/ ctx8[6]);
            attr(button0, "aria-controls", "skintone-list");
            attr(div2, "class", div2_class_value = "skintone-button-wrapper " + /*skinTonePickerExpandedAfterAnimation*/ (ctx8[19] ? 'expanded' : ''));
            attr(span1, "id", "skintone-description");
            attr(span1, "class", "sr-only");
            attr(div3, "id", "skintone-list");
            attr(div3, "class", div3_class_value = "skintone-list " + /*skinTonePickerExpanded*/ (ctx8[6] ? '' : 'hidden no-animate'));
            set_style(div3, "transform", "translateY(" + /*skinTonePickerExpanded*/ (ctx8[6] ? 0 : 'calc(-1 * var(--num-skintones) * var(--total-emoji-size))') + ")");
            attr(div3, "role", "listbox");
            attr(div3, "aria-label", div3_aria_label_value = /*i18n*/ ctx8[0].skinTonesLabel);
            attr(div3, "aria-activedescendant", div3_aria_activedescendant_value = "skintone-" + /*activeSkinTone*/ ctx8[20]);
            attr(div3, "aria-hidden", div3_aria_hidden_value = !/*skinTonePickerExpanded*/ ctx8[6]);
            attr(div4, "class", "search-row");
            attr(div5, "class", "nav");
            attr(div5, "role", "tablist");
            set_style(div5, "grid-template-columns", "repeat(" + /*groups*/ ctx8[12].length + ", 1fr)");
            attr(div5, "aria-label", div5_aria_label_value = /*i18n*/ ctx8[0].categoriesLabel);
            attr(div6, "class", "indicator");
            set_style(div6, "transform", "translateX(" + /*isRtl*/ (ctx8[24] ? -1 : 1) * /*currentGroupIndex*/ ctx8[11] * 100 + "%)");
            attr(div7, "class", "indicator-wrapper");
            attr(div8, "class", div8_class_value = "message " + /*message*/ (ctx8[18] ? '' : 'gone'));
            attr(div8, "role", "alert");
            attr(div8, "aria-live", "polite");
            attr(div10, "class", div10_class_value = "tabpanel " + (!/*databaseLoaded*/ ctx8[14] || /*message*/ ctx8[18] ? 'gone' : ''));
            attr(div10, "role", div10_role_value = /*searchMode*/ ctx8[4] ? 'region' : 'tabpanel');
            attr(div10, "aria-label", div10_aria_label_value = /*searchMode*/ ctx8[4] ? /*i18n*/ ctx8[0].searchResultsLabel : /*i18n*/ ctx8[0].categories[/*currentGroup*/ ctx8[13].name]);
            attr(div10, "id", div10_id_value = /*searchMode*/ ctx8[4] ? '' : `tab-${ctx8[13].id}`);
            attr(div10, "tabindex", "0");
            attr(div11, "class", div11_class_value = "favorites emoji-menu " + /*message*/ (ctx8[18] ? 'gone' : ''));
            attr(div11, "role", "menu");
            attr(div11, "aria-label", div11_aria_label_value = /*i18n*/ ctx8[0].favoritesLabel);
            set_style(div11, "padding-inline-end", /*scrollbarWidth*/ ctx8[25] + "px");
            attr(button1, "aria-hidden", "true");
            attr(button1, "tabindex", "-1");
            attr(button1, "class", "abs-pos hidden emoji");
            attr(section, "class", "picker");
            attr(section, "aria-label", section_aria_label_value = /*i18n*/ ctx8[0].regionLabel);
            attr(section, "style", /*pickerStyle*/ ctx8[22]);
        },
        m (target, anchor) {
            insert1(target, section, anchor);
            append(section, div0);
            append(section, div4);
            append(div4, div1);
            append(div1, input);
            set_input_value(input, /*rawSearchText*/ ctx8[2]);
            append(div1, label);
            append(label, t0);
            append(div1, span0);
            append(span0, t1);
            append(div4, div2);
            append(div2, button0);
            append(button0, t2);
            append(div4, span1);
            append(span1, t3);
            append(div4, div3);
            for(let i = 0; i < each_blocks_3.length; i += 1)each_blocks_3[i].m(div3, null);
            /*div3_binding*/ ctx8[48](div3);
            append(section, div5);
            for(let i9 = 0; i9 < each_blocks_2.length; i9 += 1)each_blocks_2[i9].m(div5, null);
            append(section, div7);
            append(div7, div6);
            append(section, div8);
            append(div8, t4);
            append(section, div10);
            append(div10, div9);
            for(let i10 = 0; i10 < each_blocks_1.length; i10 += 1)each_blocks_1[i10].m(div9, null);
            /*div10_binding*/ ctx8[50](div10);
            append(section, div11);
            for(let i11 = 0; i11 < each_blocks.length; i11 += 1)each_blocks[i11].m(div11, null);
            append(section, button1);
            /*button1_binding*/ ctx8[51](button1);
            /*section_binding*/ ctx8[52](section);
            if (!mounted) {
                dispose = [
                    listen(input, "input", /*input_input_handler*/ ctx8[47]),
                    listen(input, "keydown", /*onSearchKeydown*/ ctx8[30]),
                    listen(button0, "click", /*onClickSkinToneButton*/ ctx8[35]),
                    listen(div3, "focusout", /*onSkinToneOptionsFocusOut*/ ctx8[38]),
                    listen(div3, "click", /*onSkinToneOptionsClick*/ ctx8[34]),
                    listen(div3, "keydown", /*onSkinToneOptionsKeydown*/ ctx8[36]),
                    listen(div3, "keyup", /*onSkinToneOptionsKeyup*/ ctx8[37]),
                    listen(div5, "keydown", /*onNavKeydown*/ ctx8[32]),
                    action_destroyer(/*calculateEmojiGridStyle*/ ctx8[29].call(null, div9)),
                    listen(div10, "click", /*onEmojiClick*/ ctx8[33]),
                    listen(div11, "click", /*onEmojiClick*/ ctx8[33])
                ];
                mounted = true;
            }
        },
        p (ctx, dirty) {
            if (dirty[0] & /*i18n*/ 1 && input_placeholder_value !== (input_placeholder_value = /*i18n*/ ctx[0].searchLabel)) attr(input, "placeholder", input_placeholder_value);
            if (dirty[0] & /*searchMode, currentEmojis*/ 18 && input_aria_expanded_value !== (input_aria_expanded_value = !!/*searchMode*/ (ctx[4] && /*currentEmojis*/ ctx[1].length))) attr(input, "aria-expanded", input_aria_expanded_value);
            if (dirty[0] & /*activeSearchItemId*/ 67108864 && input_aria_activedescendant_value !== (input_aria_activedescendant_value = /*activeSearchItemId*/ ctx[26] ? `emo-${ctx[26]}` : '')) attr(input, "aria-activedescendant", input_aria_activedescendant_value);
            if (dirty[0] & /*rawSearchText*/ 4) set_input_value(input, /*rawSearchText*/ ctx[2]);
            if (dirty[0] & /*i18n*/ 1 && t0_value !== (t0_value = /*i18n*/ ctx[0].searchLabel + "")) set_data(t0, t0_value);
            if (dirty[0] & /*i18n*/ 1 && t1_value !== (t1_value = /*i18n*/ ctx[0].searchDescription + "")) set_data(t1, t1_value);
            if (dirty[0] & /*skinToneButtonText*/ 2097152) set_data(t2, /*skinToneButtonText*/ ctx[21]);
            if (dirty[0] & /*skinTonePickerExpanded*/ 64 && button0_class_value !== (button0_class_value = "emoji " + /*skinTonePickerExpanded*/ (ctx[6] ? 'hide-focus' : ''))) attr(button0, "class", button0_class_value);
            if (dirty[0] & /*skinToneButtonLabel*/ 8388608) attr(button0, "aria-label", /*skinToneButtonLabel*/ ctx[23]);
            if (dirty[0] & /*skinToneButtonLabel*/ 8388608) attr(button0, "title", /*skinToneButtonLabel*/ ctx[23]);
            if (dirty[0] & /*skinTonePickerExpanded*/ 64) attr(button0, "aria-expanded", /*skinTonePickerExpanded*/ ctx[6]);
            if (dirty[0] & /*skinTonePickerExpandedAfterAnimation*/ 524288 && div2_class_value !== (div2_class_value = "skintone-button-wrapper " + /*skinTonePickerExpandedAfterAnimation*/ (ctx[19] ? 'expanded' : ''))) attr(div2, "class", div2_class_value);
            if (dirty[0] & /*i18n*/ 1 && t3_value !== (t3_value = /*i18n*/ ctx[0].skinToneDescription + "")) set_data(t3, t3_value);
            if (dirty[0] & /*skinTones, activeSkinTone, i18n*/ 1049089) {
                each_value_4 = /*skinTones*/ ctx[9];
                each_blocks_3 = update_keyed_each(each_blocks_3, dirty, get_key, 1, ctx, each_value_4, each0_lookup, div3, destroy_block, create_each_block_4, null, get_each_context_4);
            }
            if (dirty[0] & /*skinTonePickerExpanded*/ 64 && div3_class_value !== (div3_class_value = "skintone-list " + /*skinTonePickerExpanded*/ (ctx[6] ? '' : 'hidden no-animate'))) attr(div3, "class", div3_class_value);
            if (dirty[0] & /*skinTonePickerExpanded*/ 64) set_style(div3, "transform", "translateY(" + /*skinTonePickerExpanded*/ (ctx[6] ? 0 : 'calc(-1 * var(--num-skintones) * var(--total-emoji-size))') + ")");
            if (dirty[0] & /*i18n*/ 1 && div3_aria_label_value !== (div3_aria_label_value = /*i18n*/ ctx[0].skinTonesLabel)) attr(div3, "aria-label", div3_aria_label_value);
            if (dirty[0] & /*activeSkinTone*/ 1048576 && div3_aria_activedescendant_value !== (div3_aria_activedescendant_value = "skintone-" + /*activeSkinTone*/ ctx[20])) attr(div3, "aria-activedescendant", div3_aria_activedescendant_value);
            if (dirty[0] & /*skinTonePickerExpanded*/ 64 && div3_aria_hidden_value !== (div3_aria_hidden_value = !/*skinTonePickerExpanded*/ ctx[6])) attr(div3, "aria-hidden", div3_aria_hidden_value);
            if (dirty[0] & /*groups, i18n, searchMode, currentGroup*/ 12305 | dirty[1] & /*onNavClick*/ 1) {
                each_value_3 = /*groups*/ ctx[12];
                each_blocks_2 = update_keyed_each(each_blocks_2, dirty, get_key_1, 1, ctx, each_value_3, each1_lookup, div5, destroy_block, create_each_block_3, null, get_each_context_3);
            }
            if (dirty[0] & /*groups*/ 4096) set_style(div5, "grid-template-columns", "repeat(" + /*groups*/ ctx[12].length + ", 1fr)");
            if (dirty[0] & /*i18n*/ 1 && div5_aria_label_value !== (div5_aria_label_value = /*i18n*/ ctx[0].categoriesLabel)) attr(div5, "aria-label", div5_aria_label_value);
            if (dirty[0] & /*isRtl, currentGroupIndex*/ 16779264) set_style(div6, "transform", "translateX(" + /*isRtl*/ (ctx[24] ? -1 : 1) * /*currentGroupIndex*/ ctx[11] * 100 + "%)");
            if (dirty[0] & /*message*/ 262144) set_data(t4, /*message*/ ctx[18]);
            if (dirty[0] & /*message*/ 262144 && div8_class_value !== (div8_class_value = "message " + /*message*/ (ctx[18] ? '' : 'gone'))) attr(div8, "class", div8_class_value);
            if (dirty[0] & /*searchMode, currentEmojisWithCategories, activeSearchItem, labelWithSkin, currentSkinTone, unicodeWithSkin, i18n, currentGroup*/ 402694449) {
                each_value_1 = /*currentEmojisWithCategories*/ ctx[15];
                each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key_2, 1, ctx, each_value_1, each2_lookup, div9, destroy_block, create_each_block_1, null, get_each_context_1);
            }
            if (dirty[0] & /*databaseLoaded, message*/ 278528 && div10_class_value !== (div10_class_value = "tabpanel " + (!/*databaseLoaded*/ ctx[14] || /*message*/ ctx[18] ? 'gone' : ''))) attr(div10, "class", div10_class_value);
            if (dirty[0] & /*searchMode*/ 16 && div10_role_value !== (div10_role_value = /*searchMode*/ ctx[4] ? 'region' : 'tabpanel')) attr(div10, "role", div10_role_value);
            if (dirty[0] & /*searchMode, i18n, currentGroup*/ 8209 && div10_aria_label_value !== (div10_aria_label_value = /*searchMode*/ ctx[4] ? /*i18n*/ ctx[0].searchResultsLabel : /*i18n*/ ctx[0].categories[/*currentGroup*/ ctx[13].name])) attr(div10, "aria-label", div10_aria_label_value);
            if (dirty[0] & /*searchMode, currentGroup*/ 8208 && div10_id_value !== (div10_id_value = /*searchMode*/ ctx[4] ? '' : `tab-${ctx[13].id}`)) attr(div10, "id", div10_id_value);
            if (dirty[0] & /*labelWithSkin, currentFavorites, currentSkinTone, unicodeWithSkin*/ 402654464) {
                each_value = /*currentFavorites*/ ctx[10];
                each_blocks = update_keyed_each(each_blocks, dirty, get_key_3, 1, ctx, each_value, each3_lookup, div11, destroy_block, create_each_block1, null, get_each_context);
            }
            if (dirty[0] & /*message*/ 262144 && div11_class_value !== (div11_class_value = "favorites emoji-menu " + /*message*/ (ctx[18] ? 'gone' : ''))) attr(div11, "class", div11_class_value);
            if (dirty[0] & /*i18n*/ 1 && div11_aria_label_value !== (div11_aria_label_value = /*i18n*/ ctx[0].favoritesLabel)) attr(div11, "aria-label", div11_aria_label_value);
            if (dirty[0] & /*scrollbarWidth*/ 33554432) set_style(div11, "padding-inline-end", /*scrollbarWidth*/ ctx[25] + "px");
            if (dirty[0] & /*i18n*/ 1 && section_aria_label_value !== (section_aria_label_value = /*i18n*/ ctx[0].regionLabel)) attr(section, "aria-label", section_aria_label_value);
            if (dirty[0] & /*pickerStyle*/ 4194304) attr(section, "style", /*pickerStyle*/ ctx[22]);
        },
        i: noop,
        o: noop,
        d (detaching) {
            if (detaching) detach(section);
            for(let i = 0; i < each_blocks_3.length; i += 1)each_blocks_3[i].d();
            /*div3_binding*/ ctx8[48](null);
            for(let i12 = 0; i12 < each_blocks_2.length; i12 += 1)each_blocks_2[i12].d();
            for(let i13 = 0; i13 < each_blocks_1.length; i13 += 1)each_blocks_1[i13].d();
            /*div10_binding*/ ctx8[50](null);
            for(let i14 = 0; i14 < each_blocks.length; i14 += 1)each_blocks[i14].d();
            /*button1_binding*/ ctx8[51](null);
            /*section_binding*/ ctx8[52](null);
            mounted = false;
            run_all(dispose);
        }
    };
}
function instance1($$self, $$props2, $$invalidate) {
    let { skinToneEmoji  } = $$props2;
    let { i18n  } = $$props2;
    let { database  } = $$props2;
    let { customEmoji  } = $$props2;
    let { customCategorySorting  } = $$props2;
    // private
    let initialLoad = true;
    let currentEmojis = [];
    let currentEmojisWithCategories = []; // eslint-disable-line no-unused-vars
    let rawSearchText = '';
    let searchText = '';
    let rootElement;
    let baselineEmoji;
    let tabpanelElement;
    let searchMode = false; // eslint-disable-line no-unused-vars
    let activeSearchItem = -1;
    let message; // eslint-disable-line no-unused-vars
    let skinTonePickerExpanded = false;
    let skinTonePickerExpandedAfterAnimation = false; // eslint-disable-line no-unused-vars
    let skinToneDropdown;
    let currentSkinTone1 = 0;
    let activeSkinTone = 0;
    let skinToneButtonText; // eslint-disable-line no-unused-vars
    let pickerStyle; // eslint-disable-line no-unused-vars
    let skinToneButtonLabel = ''; // eslint-disable-line no-unused-vars
    let skinTones = [];
    let currentFavorites = []; // eslint-disable-line no-unused-vars
    let defaultFavoriteEmojis;
    let numColumns = DEFAULT_NUM_COLUMNS;
    let isRtl = false;
    let scrollbarWidth = 0; // eslint-disable-line no-unused-vars
    let currentGroupIndex = 0;
    let groups$1 = groups;
    let currentGroup;
    let databaseLoaded = false; // eslint-disable-line no-unused-vars
    let activeSearchItemId; // eslint-disable-line no-unused-vars
    //
    // Utils/helpers
    //
    const focus = (id)=>{
        rootElement.getRootNode().getElementById(id).focus();
    };
    // fire a custom event that crosses the shadow boundary
    const fireEvent = (name, detail)=>{
        rootElement.dispatchEvent(new CustomEvent(name, {
            detail,
            bubbles: true,
            composed: true
        }));
    };
    // eslint-disable-next-line no-unused-vars
    const unicodeWithSkin = (emoji, currentSkinTone)=>currentSkinTone && emoji.skins && emoji.skins[currentSkinTone] || emoji.unicode
    ;
    // eslint-disable-next-line no-unused-vars
    const labelWithSkin = (emoji, currentSkinTone)=>uniq([
            emoji.name || unicodeWithSkin(emoji, currentSkinTone),
            ...emoji.shortcodes || []
        ]).join(', ')
    ;
    // Detect a skintone option button
    const isSkinToneOption = (element)=>/^skintone-/.test(element.id)
    ;
    //
    // Determine the emoji support level (in requestIdleCallback)
    //
    emojiSupportLevelPromise.then((level)=>{
        // Can't actually test emoji support in Jest/JSDom, emoji never render in color in Cairo
        /* istanbul ignore next */ if (!level) $$invalidate(18, message = i18n.emojiUnsupportedMessage);
    });
    //
    // Calculate the width of the emoji grid. This serves two purposes:
    // 1) Re-calculate the --num-columns var because it may have changed
    // 2) Re-calculate the scrollbar width because it may have changed
    //   (i.e. because the number of items changed)
    // 3) Re-calculate whether we're in RTL mode or not.
    //
    // The benefit of doing this in one place is to align with rAF/ResizeObserver
    // and do all the calculations in one go. RTL vs LTR is not strictly width-related,
    // but since we're already reading the style here, and since it's already aligned with
    // the rAF loop, this is the most appropriate place to do it perf-wise.
    //
    // eslint-disable-next-line no-unused-vars
    function calculateEmojiGridStyle(node) {
        return calculateWidth(node, (width)=>{
            {
                // jsdom throws errors for this kind of fancy stuff
                // read all the style/layout calculations we need to make
                const style = getComputedStyle(rootElement);
                const newNumColumns = parseInt(style.getPropertyValue('--num-columns'), 10);
                const newIsRtl = style.getPropertyValue('direction') === 'rtl';
                const parentWidth = node.parentElement.getBoundingClientRect().width;
                const newScrollbarWidth = parentWidth - width;
                // write to Svelte variables
                $$invalidate(46, numColumns = newNumColumns);
                $$invalidate(25, scrollbarWidth = newScrollbarWidth); // eslint-disable-line no-unused-vars
                $$invalidate(24, isRtl = newIsRtl); // eslint-disable-line no-unused-vars
            }
        });
    }
    function checkZwjSupportAndUpdate(zwjEmojisToCheck) {
        const rootNode = rootElement.getRootNode();
        const emojiToDomNode = (emoji)=>rootNode.getElementById(`emo-${emoji.id}`)
        ;
        checkZwjSupport(zwjEmojisToCheck, baselineEmoji, emojiToDomNode);
        // force update
        $$invalidate(1, currentEmojis); // eslint-disable-line no-self-assign
    }
    function isZwjSupported(emoji) {
        return !emoji.unicode || !hasZwj(emoji) || supportedZwjEmojis.get(emoji.unicode);
    }
    async function filterEmojisByVersion(emojis) {
        const emojiSupportLevel = await emojiSupportLevelPromise;
        // !version corresponds to custom emoji
        return emojis.filter(({ version  })=>!version || version <= emojiSupportLevel
        );
    }
    async function summarizeEmojis(emojis) {
        return summarizeEmojisForUI(emojis, await emojiSupportLevelPromise);
    }
    async function getEmojisByGroup(group) {
        if (typeof group === 'undefined') return [];
        // -1 is custom emoji
        const emoji = group === -1 ? customEmoji : await database.getEmojiByGroup(group);
        return summarizeEmojis(await filterEmojisByVersion(emoji));
    }
    async function getEmojisBySearchQuery(query) {
        return summarizeEmojis(await filterEmojisByVersion(await database.getEmojiBySearchQuery(query)));
    }
    // eslint-disable-next-line no-unused-vars
    function onSearchKeydown(event) {
        if (!searchMode || !currentEmojis.length) return;
        const goToNextOrPrevious = (previous)=>{
            halt(event);
            $$invalidate(5, activeSearchItem = incrementOrDecrement(previous, activeSearchItem, currentEmojis));
        };
        switch(event.key){
            case 'ArrowDown':
                return goToNextOrPrevious(false);
            case 'ArrowUp':
                return goToNextOrPrevious(true);
            case 'Enter':
                if (activeSearchItem !== -1) {
                    halt(event);
                    return clickEmoji(currentEmojis[activeSearchItem].id);
                } else if (currentEmojis.length) $$invalidate(5, activeSearchItem = 0);
        }
    }
    //
    // Handle user input on nav
    //
    // eslint-disable-next-line no-unused-vars
    function onNavClick(group) {
        $$invalidate(2, rawSearchText = '');
        $$invalidate(44, searchText = '');
        $$invalidate(5, activeSearchItem = -1);
        $$invalidate(11, currentGroupIndex = groups$1.findIndex((_)=>_.id === group.id
        ));
    }
    // eslint-disable-next-line no-unused-vars
    function onNavKeydown(event) {
        const { target , key  } = event;
        const doFocus = (el)=>{
            if (el) {
                halt(event);
                el.focus();
            }
        };
        switch(key){
            case 'ArrowLeft':
                return doFocus(target.previousSibling);
            case 'ArrowRight':
                return doFocus(target.nextSibling);
            case 'Home':
                return doFocus(target.parentElement.firstChild);
            case 'End':
                return doFocus(target.parentElement.lastChild);
        }
    }
    //
    // Handle user input on an emoji
    //
    async function clickEmoji(unicodeOrName) {
        const emoji = await database.getEmojiByUnicodeOrName(unicodeOrName);
        const emojiSummary = [
            ...currentEmojis,
            ...currentFavorites
        ].find((_)=>_.id === unicodeOrName
        );
        const skinTonedUnicode = emojiSummary.unicode && unicodeWithSkin(emojiSummary, currentSkinTone1);
        await database.incrementFavoriteEmojiCount(unicodeOrName);
        fireEvent('emoji-click', {
            emoji,
            skinTone: currentSkinTone1,
            ...skinTonedUnicode && {
                unicode: skinTonedUnicode
            },
            ...emojiSummary.name && {
                name: emojiSummary.name
            }
        });
    }
    // eslint-disable-next-line no-unused-vars
    async function onEmojiClick(event) {
        const { target  } = event;
        if (!target.classList.contains('emoji')) return;
        halt(event);
        const id = target.id.substring(4); // replace 'emo-' or 'fav-' prefix
        /* no await */ clickEmoji(id);
    }
    //
    // Handle user input on the skintone picker
    //
    // eslint-disable-next-line no-unused-vars
    async function onSkinToneOptionsClick(event) {
        const { target  } = event;
        if (!isSkinToneOption(target)) return;
        halt(event);
        const skinTone = parseInt(target.id.slice(9), 10); // remove 'skintone-' prefix
        $$invalidate(8, currentSkinTone1 = skinTone);
        $$invalidate(6, skinTonePickerExpanded = false);
        focus('skintone-button');
        fireEvent('skin-tone-change', {
            skinTone
        });
        /* no await */ database.setPreferredSkinTone(skinTone);
    }
    // eslint-disable-next-line no-unused-vars
    async function onClickSkinToneButton(event) {
        $$invalidate(6, skinTonePickerExpanded = !skinTonePickerExpanded);
        $$invalidate(20, activeSkinTone = currentSkinTone1);
        if (skinTonePickerExpanded) {
            halt(event);
            rAF(()=>focus(`skintone-${activeSkinTone}`)
            );
        }
    }
    // eslint-disable-next-line no-unused-vars
    function onSkinToneOptionsKeydown(event) {
        if (!skinTonePickerExpanded) return;
        const changeActiveSkinTone = async (nextSkinTone)=>{
            halt(event);
            $$invalidate(20, activeSkinTone = nextSkinTone);
            await tick();
            focus(`skintone-${activeSkinTone}`);
        };
        switch(event.key){
            case 'ArrowUp':
                return changeActiveSkinTone(incrementOrDecrement(true, activeSkinTone, skinTones));
            case 'ArrowDown':
                return changeActiveSkinTone(incrementOrDecrement(false, activeSkinTone, skinTones));
            case 'Home':
                return changeActiveSkinTone(0);
            case 'End':
                return changeActiveSkinTone(skinTones.length - 1);
            case 'Enter':
                // enter on keydown, space on keyup. this is just how browsers work for buttons
                // https://lists.w3.org/Archives/Public/w3c-wai-ig/2019JanMar/0086.html
                return onSkinToneOptionsClick(event);
            case 'Escape':
                halt(event);
                $$invalidate(6, skinTonePickerExpanded = false);
                return focus('skintone-button');
        }
    }
    // eslint-disable-next-line no-unused-vars
    function onSkinToneOptionsKeyup(event) {
        if (!skinTonePickerExpanded) return;
        switch(event.key){
            case ' ':
                // enter on keydown, space on keyup. this is just how browsers work for buttons
                // https://lists.w3.org/Archives/Public/w3c-wai-ig/2019JanMar/0086.html
                return onSkinToneOptionsClick(event);
        }
    }
    // eslint-disable-next-line no-unused-vars
    async function onSkinToneOptionsFocusOut(event) {
        // On blur outside of the skintone options, collapse the skintone picker.
        // Except if focus is just moving to another skintone option, e.g. pressing up/down to change focus
        const { relatedTarget  } = event;
        if (!relatedTarget || !isSkinToneOption(relatedTarget)) $$invalidate(6, skinTonePickerExpanded = false);
    }
    function input_input_handler() {
        rawSearchText = this.value;
        $$invalidate(2, rawSearchText);
    }
    function div3_binding($$value) {
        binding_callbacks[$$value ? 'unshift' : 'push'](()=>{
            skinToneDropdown = $$value;
            $$invalidate(7, skinToneDropdown);
        });
    }
    const click_handler = (group)=>onNavClick(group)
    ;
    function div10_binding($$value) {
        binding_callbacks[$$value ? 'unshift' : 'push'](()=>{
            tabpanelElement = $$value;
            $$invalidate(3, tabpanelElement);
        });
    }
    function button1_binding($$value) {
        binding_callbacks[$$value ? 'unshift' : 'push'](()=>{
            baselineEmoji = $$value;
            $$invalidate(17, baselineEmoji);
        });
    }
    function section_binding($$value) {
        binding_callbacks[$$value ? 'unshift' : 'push'](()=>{
            rootElement = $$value;
            $$invalidate(16, rootElement);
        });
    }
    $$self.$$set = ($$props)=>{
        if ('skinToneEmoji' in $$props) $$invalidate(40, skinToneEmoji = $$props.skinToneEmoji);
        if ('i18n' in $$props) $$invalidate(0, i18n = $$props.i18n);
        if ('database' in $$props) $$invalidate(39, database = $$props.database);
        if ('customEmoji' in $$props) $$invalidate(41, customEmoji = $$props.customEmoji);
        if ('customCategorySorting' in $$props) $$invalidate(42, customCategorySorting = $$props.customCategorySorting);
    };
    $$self.$$.update = ()=>{
        if ($$self.$$.dirty[1] & /*customEmoji, database*/ 1280) {
            if (customEmoji && database) $$invalidate(39, database.customEmoji = customEmoji, database);
        }
        if ($$self.$$.dirty[0] & /*i18n*/ 1 | $$self.$$.dirty[1] & /*database*/ 256) //
        // Set or update the database object
        //
        {
            // show a Loading message if it takes a long time, or show an error if there's a network/IDB error
            async function handleDatabaseLoading() {
                let showingLoadingMessage = false;
                const timeoutHandle = setTimeout(()=>{
                    showingLoadingMessage = true;
                    $$invalidate(18, message = i18n.loadingMessage);
                }, TIMEOUT_BEFORE_LOADING_MESSAGE);
                try {
                    await database.ready();
                    $$invalidate(14, databaseLoaded = true); // eslint-disable-line no-unused-vars
                } catch (err) {
                    console.error(err);
                    $$invalidate(18, message = i18n.networkErrorMessage);
                } finally{
                    clearTimeout(timeoutHandle);
                    if (showingLoadingMessage) {
                        // Seems safer than checking the i18n string, which may change
                        showingLoadingMessage = false;
                        $$invalidate(18, message = ''); // eslint-disable-line no-unused-vars
                    }
                }
            }
            if (database) /* no await */ handleDatabaseLoading();
        }
        if ($$self.$$.dirty[0] & /*groups, currentGroupIndex*/ 6144 | $$self.$$.dirty[1] & /*customEmoji*/ 1024) {
            if (customEmoji && customEmoji.length) $$invalidate(12, groups$1 = [
                customGroup,
                ...groups
            ]);
            else if (groups$1 !== groups) {
                if (currentGroupIndex) // If the current group is anything other than "custom" (which is first), decrement.
                // This fixes the odd case where you set customEmoji, then pick a category, then unset customEmoji
                $$invalidate(11, currentGroupIndex--, currentGroupIndex);
                $$invalidate(12, groups$1 = groups);
            }
        }
        if ($$self.$$.dirty[0] & /*rawSearchText*/ 4) rIC(()=>{
            $$invalidate(44, searchText = (rawSearchText || '').trim()); // defer to avoid input delays, plus we can trim here
            $$invalidate(5, activeSearchItem = -1);
        });
        if ($$self.$$.dirty[0] & /*groups, currentGroupIndex*/ 6144) //
        // Update the current group based on the currentGroupIndex
        //
        $$invalidate(13, currentGroup = groups$1[currentGroupIndex]);
        if ($$self.$$.dirty[0] & /*databaseLoaded, currentGroup*/ 24576 | $$self.$$.dirty[1] & /*searchText*/ 8192) //
        // Set or update the currentEmojis. Check for invalid ZWJ renderings
        // (i.e. double emoji).
        //
        {
            async function updateEmojis() {
                if (!databaseLoaded) {
                    $$invalidate(1, currentEmojis = []);
                    $$invalidate(4, searchMode = false);
                } else if (searchText.length >= MIN_SEARCH_TEXT_LENGTH) {
                    const currentSearchText = searchText;
                    const newEmojis = await getEmojisBySearchQuery(currentSearchText);
                    if (currentSearchText === searchText) {
                        // if the situation changes asynchronously, do not update
                        $$invalidate(1, currentEmojis = newEmojis);
                        $$invalidate(4, searchMode = true);
                    }
                } else if (currentGroup) {
                    const currentGroupId = currentGroup.id;
                    const newEmojis = await getEmojisByGroup(currentGroupId);
                    if (currentGroupId === currentGroup.id) {
                        // if the situation changes asynchronously, do not update
                        $$invalidate(1, currentEmojis = newEmojis);
                        $$invalidate(4, searchMode = false);
                    }
                }
            }
            /* no await */ updateEmojis();
        }
        if ($$self.$$.dirty[0] & /*groups, searchMode*/ 4112) //
        // Global styles for the entire picker
        //
        /* eslint-disable no-unused-vars */ $$invalidate(22, pickerStyle = `
  --font-family: ${FONT_FAMILY};
  --num-groups: ${groups$1.length}; 
  --indicator-opacity: ${searchMode ? 0 : 1}; 
  --num-skintones: ${NUM_SKIN_TONES};`);
        if ($$self.$$.dirty[0] & /*databaseLoaded*/ 16384 | $$self.$$.dirty[1] & /*database*/ 256) //
        // Set or update the preferred skin tone
        //
        {
            async function updatePreferredSkinTone() {
                if (databaseLoaded) $$invalidate(8, currentSkinTone1 = await database.getPreferredSkinTone());
            }
            /* no await */ updatePreferredSkinTone();
        }
        if ($$self.$$.dirty[1] & /*skinToneEmoji*/ 512) $$invalidate(9, skinTones = Array(NUM_SKIN_TONES).fill().map((_, i)=>applySkinTone(skinToneEmoji, i)
        ));
        if ($$self.$$.dirty[0] & /*skinTones, currentSkinTone*/ 768) /* eslint-disable no-unused-vars */ $$invalidate(21, skinToneButtonText = skinTones[currentSkinTone1]);
        if ($$self.$$.dirty[0] & /*i18n, currentSkinTone*/ 257) $$invalidate(23, skinToneButtonLabel = i18n.skinToneLabel.replace('{skinTone}', i18n.skinTones[currentSkinTone1]));
        if ($$self.$$.dirty[0] & /*databaseLoaded*/ 16384 | $$self.$$.dirty[1] & /*database*/ 256) /* eslint-enable no-unused-vars */ //
        // Set or update the favorites emojis
        //
        {
            async function updateDefaultFavoriteEmojis() {
                $$invalidate(45, defaultFavoriteEmojis = (await Promise.all(MOST_COMMONLY_USED_EMOJI.map((unicode)=>database.getEmojiByUnicodeOrName(unicode)
                ))).filter(Boolean)); // filter because in Jest tests we don't have all the emoji in the DB
            }
            if (databaseLoaded) /* no await */ updateDefaultFavoriteEmojis();
        }
        if ($$self.$$.dirty[0] & /*databaseLoaded*/ 16384 | $$self.$$.dirty[1] & /*database, numColumns, defaultFavoriteEmojis*/ 49408) {
            async function updateFavorites() {
                const dbFavorites = await database.getTopFavoriteEmoji(numColumns);
                const favorites = await summarizeEmojis(uniqBy([
                    ...dbFavorites,
                    ...defaultFavoriteEmojis
                ], (_)=>_.unicode || _.name
                ).slice(0, numColumns));
                $$invalidate(10, currentFavorites = favorites);
            }
            if (databaseLoaded && defaultFavoriteEmojis) /* no await */ updateFavorites();
        }
        if ($$self.$$.dirty[0] & /*currentEmojis, tabpanelElement*/ 10) // Some emojis have their ligatures rendered as two or more consecutive emojis
        // We want to treat these the same as unsupported emojis, so we compare their
        // widths against the baseline widths and remove them as necessary
        {
            const zwjEmojisToCheck = currentEmojis.filter((emoji)=>emoji.unicode
            ).filter((emoji)=>hasZwj(emoji) && !supportedZwjEmojis.has(emoji.unicode)
            ); // filter custom emoji
            if (zwjEmojisToCheck.length) // render now, check their length later
            rAF(()=>checkZwjSupportAndUpdate(zwjEmojisToCheck)
            );
            else {
                $$invalidate(1, currentEmojis = currentEmojis.filter(isZwjSupported));
                rAF(()=>{
                    // Avoid Svelte doing an invalidation on the "setter" here.
                    // At best the invalidation is useless, at worst it can cause infinite loops:
                    // https://github.com/nolanlawson/emoji-picker-element/pull/180
                    // https://github.com/sveltejs/svelte/issues/6521
                    // Also note tabpanelElement can be null if the element is disconnected
                    // immediately after connected, hence `|| {}`
                    (tabpanelElement || {
                    }).scrollTop = 0; // reset scroll top to 0 when emojis change
                });
            }
        }
        $$self.$$.dirty[0], $$self.$$.dirty[1];
        if ($$self.$$.dirty[0] & /*searchMode, currentEmojis*/ 18 | $$self.$$.dirty[1] & /*customCategorySorting*/ 2048) //
        // Derive currentEmojisWithCategories from currentEmojis. This is always done even if there
        // are no categories, because it's just easier to code the HTML this way.
        //
        {
            function calculateCurrentEmojisWithCategories() {
                if (searchMode) return [
                    {
                        category: '',
                        emojis: currentEmojis
                    }
                ];
                const categoriesToEmoji = new Map();
                for (const emoji of currentEmojis){
                    const category = emoji.category || '';
                    let emojis = categoriesToEmoji.get(category);
                    if (!emojis) {
                        emojis = [];
                        categoriesToEmoji.set(category, emojis);
                    }
                    emojis.push(emoji);
                }
                return [
                    ...categoriesToEmoji.entries()
                ].map(([category, emojis])=>({
                        category,
                        emojis
                    })
                ).sort((a, b)=>customCategorySorting(a.category, b.category)
                );
            }
            // eslint-disable-next-line no-unused-vars
            $$invalidate(15, currentEmojisWithCategories = calculateCurrentEmojisWithCategories());
        }
        if ($$self.$$.dirty[0] & /*activeSearchItem, currentEmojis*/ 34) //
        // Handle active search item (i.e. pressing up or down while searching)
        //
        /* eslint-disable no-unused-vars */ $$invalidate(26, activeSearchItemId = activeSearchItem !== -1 && currentEmojis[activeSearchItem].id);
        if ($$self.$$.dirty[0] & /*skinTonePickerExpanded, skinToneDropdown*/ 192) {
            if (skinTonePickerExpanded) skinToneDropdown.addEventListener('transitionend', ()=>{
                $$invalidate(19, skinTonePickerExpandedAfterAnimation = true); // eslint-disable-line no-unused-vars
            }, {
                once: true
            });
            else $$invalidate(19, skinTonePickerExpandedAfterAnimation = false); // eslint-disable-line no-unused-vars
        }
    };
    return [
        i18n,
        currentEmojis,
        rawSearchText,
        tabpanelElement,
        searchMode,
        activeSearchItem,
        skinTonePickerExpanded,
        skinToneDropdown,
        currentSkinTone1,
        skinTones,
        currentFavorites,
        currentGroupIndex,
        groups$1,
        currentGroup,
        databaseLoaded,
        currentEmojisWithCategories,
        rootElement,
        baselineEmoji,
        message,
        skinTonePickerExpandedAfterAnimation,
        activeSkinTone,
        skinToneButtonText,
        pickerStyle,
        skinToneButtonLabel,
        isRtl,
        scrollbarWidth,
        activeSearchItemId,
        unicodeWithSkin,
        labelWithSkin,
        calculateEmojiGridStyle,
        onSearchKeydown,
        onNavClick,
        onNavKeydown,
        onEmojiClick,
        onSkinToneOptionsClick,
        onClickSkinToneButton,
        onSkinToneOptionsKeydown,
        onSkinToneOptionsKeyup,
        onSkinToneOptionsFocusOut,
        database,
        skinToneEmoji,
        customEmoji,
        customCategorySorting,
        initialLoad,
        searchText,
        defaultFavoriteEmojis,
        numColumns,
        input_input_handler,
        div3_binding,
        click_handler,
        div10_binding,
        button1_binding,
        section_binding
    ];
}
class Picker extends SvelteComponent {
    constructor(options){
        super();
        init(this, options, instance1, create_fragment1, safe_not_equal, {
            skinToneEmoji: 40,
            i18n: 0,
            database: 39,
            customEmoji: 41,
            customCategorySorting: 42
        }, null, [
            -1,
            -1,
            -1
        ]);
    }
}
const DEFAULT_DATA_SOURCE = 'https://cdn.jsdelivr.net/npm/emoji-picker-element-data@^1/en/emojibase/data.json';
const DEFAULT_LOCALE = 'en';
var enI18n = {
    categoriesLabel: 'Categories',
    emojiUnsupportedMessage: 'Your browser does not support color emoji.',
    favoritesLabel: 'Favorites',
    loadingMessage: 'Loading…',
    networkErrorMessage: 'Could not load emoji.',
    regionLabel: 'Emoji picker',
    searchDescription: 'When search results are available, press up or down to select and enter to choose.',
    searchLabel: 'Search',
    searchResultsLabel: 'Search results',
    skinToneDescription: 'When expanded, press up or down to select and enter to choose.',
    skinToneLabel: 'Choose a skin tone (currently {skinTone})',
    skinTonesLabel: 'Skin tones',
    skinTones: [
        'Default',
        'Light',
        'Medium-Light',
        'Medium',
        'Medium-Dark',
        'Dark'
    ],
    categories: {
        custom: 'Custom',
        'smileys-emotion': 'Smileys and emoticons',
        'people-body': 'People and body',
        'animals-nature': 'Animals and nature',
        'food-drink': 'Food and drink',
        'travel-places': 'Travel and places',
        activities: 'Activities',
        objects: 'Objects',
        symbols: 'Symbols',
        flags: 'Flags'
    }
};
const PROPS = [
    'customEmoji',
    'customCategorySorting',
    'database',
    'dataSource',
    'i18n',
    'locale',
    'skinToneEmoji'
];
class PickerElement extends HTMLElement {
    constructor(props){
        super();
        this.attachShadow({
            mode: 'open'
        });
        const style = document.createElement('style');
        style.textContent = ":host{--emoji-size:1.375rem;--emoji-padding:0.5rem;--category-emoji-size:var(--emoji-size);--category-emoji-padding:var(--emoji-padding);--indicator-height:3px;--input-border-radius:0.5rem;--input-border-size:1px;--input-font-size:1rem;--input-line-height:1.5;--input-padding:0.25rem;--num-columns:8;--outline-size:2px;--border-size:1px;--skintone-border-radius:1rem;--category-font-size:1rem;display:flex;width:min-content;height:400px}:host,:host(.light){--background:#fff;--border-color:#e0e0e0;--indicator-color:#385ac1;--input-border-color:#999;--input-font-color:#111;--input-placeholder-color:#999;--outline-color:#999;--category-font-color:#111;--button-active-background:#e6e6e6;--button-hover-background:#d9d9d9}:host(.dark){--background:#222;--border-color:#444;--indicator-color:#5373ec;--input-border-color:#ccc;--input-font-color:#efefef;--input-placeholder-color:#ccc;--outline-color:#fff;--category-font-color:#efefef;--button-active-background:#555555;--button-hover-background:#484848}@media (prefers-color-scheme:dark){:host{--background:#222;--border-color:#444;--indicator-color:#5373ec;--input-border-color:#ccc;--input-font-color:#efefef;--input-placeholder-color:#ccc;--outline-color:#fff;--category-font-color:#efefef;--button-active-background:#555555;--button-hover-background:#484848}}:host([hidden]){display:none}button{margin:0;padding:0;border:0;background:0 0;box-shadow:none;-webkit-tap-highlight-color:transparent}button::-moz-focus-inner{border:0}input{padding:0;margin:0;line-height:1.15;font-family:inherit}input[type=search]{-webkit-appearance:none}:focus{outline:var(--outline-color) solid var(--outline-size);outline-offset:calc(-1*var(--outline-size))}:host([data-js-focus-visible]) :focus:not([data-focus-visible-added]){outline:0}:focus:not(:focus-visible){outline:0}.hide-focus{outline:0}*{box-sizing:border-box}.picker{contain:content;display:flex;flex-direction:column;background:var(--background);border:var(--border-size) solid var(--border-color);width:100%;height:100%;overflow:hidden;--total-emoji-size:calc(var(--emoji-size) + (2 * var(--emoji-padding)));--total-category-emoji-size:calc(var(--category-emoji-size) + (2 * var(--category-emoji-padding)))}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.hidden{opacity:0;pointer-events:none}.abs-pos{position:absolute;left:0;top:0}.gone{display:none!important}.skintone-button-wrapper,.skintone-list{background:var(--background);z-index:3}.skintone-button-wrapper.expanded{z-index:1}.skintone-list{position:absolute;inset-inline-end:0;top:0;z-index:2;overflow:visible;border-bottom:var(--border-size) solid var(--border-color);border-radius:0 0 var(--skintone-border-radius) var(--skintone-border-radius);will-change:transform;transition:transform .2s ease-in-out;transform-origin:center 0}@media (prefers-reduced-motion:reduce){.skintone-list{transition-duration:.001s}}@supports not (inset-inline-end:0){.skintone-list{right:0}}.skintone-list.no-animate{transition:none}.tabpanel{overflow-y:auto;-webkit-overflow-scrolling:touch;will-change:transform;min-height:0;flex:1;contain:content}.emoji-menu{display:grid;grid-template-columns:repeat(var(--num-columns),var(--total-emoji-size));justify-content:space-around;align-items:flex-start;width:100%}.category{padding:var(--emoji-padding);font-size:var(--category-font-size);color:var(--category-font-color)}.custom-emoji,.emoji,button.emoji{height:var(--total-emoji-size);width:var(--total-emoji-size)}.emoji,button.emoji{font-size:var(--emoji-size);display:flex;align-items:center;justify-content:center;border-radius:100%;line-height:1;overflow:hidden;font-family:var(--font-family);cursor:pointer}@media (hover:hover) and (pointer:fine){.emoji:hover,button.emoji:hover{background:var(--button-hover-background)}}.emoji.active,.emoji:active,button.emoji.active,button.emoji:active{background:var(--button-active-background)}.custom-emoji{padding:var(--emoji-padding);object-fit:contain;pointer-events:none;background-repeat:no-repeat;background-position:center center;background-size:var(--emoji-size) var(--emoji-size)}.nav,.nav-button{align-items:center}.nav{display:grid;justify-content:space-between;contain:content}.nav-button{display:flex;justify-content:center}.nav-emoji{font-size:var(--category-emoji-size);width:var(--total-category-emoji-size);height:var(--total-category-emoji-size)}.indicator-wrapper{display:flex;border-bottom:1px solid var(--border-color)}.indicator{width:calc(100%/var(--num-groups));height:var(--indicator-height);opacity:var(--indicator-opacity);background-color:var(--indicator-color);will-change:transform,opacity;transition:opacity .1s linear,transform .25s ease-in-out}@media (prefers-reduced-motion:reduce){.indicator{will-change:opacity;transition:opacity .1s linear}}.pad-top,input.search{background:var(--background);width:100%}.pad-top{height:var(--emoji-padding);z-index:3}.search-row{display:flex;align-items:center;position:relative;padding-inline-start:var(--emoji-padding);padding-bottom:var(--emoji-padding)}.search-wrapper{flex:1;min-width:0}input.search{padding:var(--input-padding);border-radius:var(--input-border-radius);border:var(--input-border-size) solid var(--input-border-color);color:var(--input-font-color);font-size:var(--input-font-size);line-height:var(--input-line-height)}input.search::placeholder{color:var(--input-placeholder-color)}.favorites{display:flex;flex-direction:row;border-top:var(--border-size) solid var(--border-color);contain:content}.message{padding:var(--emoji-padding)}";
        this.shadowRoot.appendChild(style);
        this._ctx = {
            // Set defaults
            locale: DEFAULT_LOCALE,
            dataSource: DEFAULT_DATA_SOURCE,
            skinToneEmoji: DEFAULT_SKIN_TONE_EMOJI,
            customCategorySorting: DEFAULT_CATEGORY_SORTING,
            customEmoji: null,
            i18n: enI18n,
            ...props
        };
        // Handle properties set before the element was upgraded
        for (const prop of PROPS)if (prop !== 'database' && Object.prototype.hasOwnProperty.call(this, prop)) {
            this._ctx[prop] = this[prop];
            delete this[prop];
        }
        this._dbFlush(); // wait for a flush before creating the db, in case the user calls e.g. a setter or setAttribute
    }
    connectedCallback() {
        this._cmp = new Picker({
            target: this.shadowRoot,
            props: this._ctx
        });
    }
    disconnectedCallback() {
        this._cmp.$destroy();
        this._cmp = undefined;
        const { database  } = this._ctx;
        if (database) database.close()// only happens if the database failed to load in the first place, so we don't care)
        .catch((err)=>console.error(err)
        );
    }
    static get observedAttributes() {
        return [
            'locale',
            'data-source',
            'skin-tone-emoji'
        ] // complex objects aren't supported, also use kebab-case
        ;
    }
    attributeChangedCallback(attrName, oldValue, newValue) {
        // convert from kebab-case to camelcase
        // see https://github.com/sveltejs/svelte/issues/3852#issuecomment-665037015
        this._set(attrName.replace(/-([a-z])/g, (_, up)=>up.toUpperCase()
        ), newValue);
    }
    _set(prop1, newValue1) {
        this._ctx[prop1] = newValue1;
        if (this._cmp) this._cmp.$set({
            [prop1]: newValue1
        });
        if ([
            'locale',
            'dataSource'
        ].includes(prop1)) this._dbFlush();
    }
    _dbCreate() {
        const { locale , dataSource , database  } = this._ctx;
        // only create a new database if we really need to
        if (!database || database.locale !== locale || database.dataSource !== dataSource) this._set('database', new _databaseJsDefault.default({
            locale,
            dataSource
        }));
    }
    // Update the Database in one microtask if the locale/dataSource change. We do one microtask
    // so we don't create two Databases if e.g. both the locale and the dataSource change
    _dbFlush() {
        Promise.resolve().then(()=>this._dbCreate()
        );
    }
}
const definitions = {
};
for (const prop of PROPS)definitions[prop] = {
    get () {
        if (prop === 'database') // in rare cases, the microtask may not be flushed yet, so we need to instantiate the DB
        // now if the user is asking for it
        this._dbCreate();
        return this._ctx[prop];
    },
    set (val) {
        if (prop === 'database') throw new Error('database is read-only');
        this._set(prop, val);
    }
};
Object.defineProperties(PickerElement.prototype, definitions);
/* istanbul ignore else */ if (!customElements.get('emoji-picker')) customElements.define('emoji-picker', PickerElement);

},{"./database.js":"6TIVT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6TIVT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>Database
);
function assertNonEmptyString(str) {
    if (typeof str !== 'string' || !str) throw new Error('expected a non-empty string, got: ' + str);
}
function assertNumber(number) {
    if (typeof number !== 'number') throw new Error('expected a number, got: ' + number);
}
const DB_VERSION_CURRENT = 1;
const DB_VERSION_INITIAL = 1;
const STORE_EMOJI = 'emoji';
const STORE_KEYVALUE = 'keyvalue';
const STORE_FAVORITES = 'favorites';
const FIELD_TOKENS = 'tokens';
const INDEX_TOKENS = 'tokens';
const FIELD_UNICODE = 'unicode';
const INDEX_COUNT = 'count';
const FIELD_GROUP = 'group';
const FIELD_ORDER = 'order';
const INDEX_GROUP_AND_ORDER = 'group-order';
const KEY_ETAG = 'eTag';
const KEY_URL = 'url';
const KEY_PREFERRED_SKINTONE = 'skinTone';
const MODE_READONLY = 'readonly';
const MODE_READWRITE = 'readwrite';
const INDEX_SKIN_UNICODE = 'skinUnicodes';
const FIELD_SKIN_UNICODE = 'skinUnicodes';
const DEFAULT_DATA_SOURCE = 'https://cdn.jsdelivr.net/npm/emoji-picker-element-data@^1/en/emojibase/data.json';
const DEFAULT_LOCALE = 'en';
// like lodash's uniqBy but much smaller
function uniqBy(arr, func) {
    const set = new Set();
    const res = [];
    for (const item of arr){
        const key = func(item);
        if (!set.has(key)) {
            set.add(key);
            res.push(item);
        }
    }
    return res;
}
function uniqEmoji(emojis) {
    return uniqBy(emojis, (_)=>_.unicode
    );
}
function initialMigration(db) {
    function createObjectStore(name, keyPath, indexes) {
        const store = keyPath ? db.createObjectStore(name, {
            keyPath
        }) : db.createObjectStore(name);
        if (indexes) for (const [indexName, [keyPath1, multiEntry]] of Object.entries(indexes))store.createIndex(indexName, keyPath1, {
            multiEntry
        });
        return store;
    }
    createObjectStore(STORE_KEYVALUE);
    createObjectStore(STORE_EMOJI, /* keyPath */ FIELD_UNICODE, {
        [INDEX_TOKENS]: [
            FIELD_TOKENS,
            /* multiEntry */ true
        ],
        [INDEX_GROUP_AND_ORDER]: [
            [
                FIELD_GROUP,
                FIELD_ORDER
            ]
        ],
        [INDEX_SKIN_UNICODE]: [
            FIELD_SKIN_UNICODE,
            /* multiEntry */ true
        ]
    });
    createObjectStore(STORE_FAVORITES, undefined, {
        [INDEX_COUNT]: [
            ''
        ]
    });
}
const openReqs = {
};
const databaseCache = {
};
const onCloseListeners = {
};
function handleOpenOrDeleteReq(resolve, reject, req) {
    // These things are almost impossible to test with fakeIndexedDB sadly
    /* istanbul ignore next */ req.onerror = ()=>reject(req.error)
    ;
    /* istanbul ignore next */ req.onblocked = ()=>reject(new Error('IDB blocked'))
    ;
    req.onsuccess = ()=>resolve(req.result)
    ;
}
async function createDatabase(dbName) {
    const db = await new Promise((resolve, reject)=>{
        const req = indexedDB.open(dbName, DB_VERSION_CURRENT);
        openReqs[dbName] = req;
        req.onupgradeneeded = (e)=>{
            // Technically there is only one version, so we don't need this `if` check
            // But if an old version of the JS is in another browser tab
            // and it gets upgraded in the future and we have a new DB version, well...
            // better safe than sorry.
            /* istanbul ignore else */ if (e.oldVersion < DB_VERSION_INITIAL) initialMigration(req.result);
        };
        handleOpenOrDeleteReq(resolve, reject, req);
    });
    // Handle abnormal closes, e.g. "delete database" in chrome dev tools.
    // No need for removeEventListener, because once the DB can no longer
    // fire "close" events, it will auto-GC.
    // Unfortunately cannot test in fakeIndexedDB: https://github.com/dumbmatter/fakeIndexedDB/issues/50
    /* istanbul ignore next */ db.onclose = ()=>closeDatabase(dbName)
    ;
    return db;
}
function openDatabase(dbName) {
    if (!databaseCache[dbName]) databaseCache[dbName] = createDatabase(dbName);
    return databaseCache[dbName];
}
function dbPromise(db, storeName, readOnlyOrReadWrite, cb) {
    return new Promise((resolve, reject)=>{
        // Use relaxed durability because neither the emoji data nor the favorites/preferred skin tone
        // are really irreplaceable data. IndexedDB is just a cache in this case.
        const txn = db.transaction(storeName, readOnlyOrReadWrite, {
            durability: 'relaxed'
        });
        const store = typeof storeName === 'string' ? txn.objectStore(storeName) : storeName.map((name)=>txn.objectStore(name)
        );
        let res;
        cb(store, txn, (result)=>{
            res = result;
        });
        txn.oncomplete = ()=>resolve(res)
        ;
        /* istanbul ignore next */ txn.onerror = ()=>reject(txn.error)
        ;
    });
}
function closeDatabase(dbName) {
    // close any open requests
    const req = openReqs[dbName];
    const db = req && req.result;
    if (db) {
        db.close();
        const listeners = onCloseListeners[dbName];
        /* istanbul ignore else */ if (listeners) for (const listener of listeners)listener();
    }
    delete openReqs[dbName];
    delete databaseCache[dbName];
    delete onCloseListeners[dbName];
}
function deleteDatabase(dbName) {
    return new Promise((resolve, reject)=>{
        // close any open requests
        closeDatabase(dbName);
        const req = indexedDB.deleteDatabase(dbName);
        handleOpenOrDeleteReq(resolve, reject, req);
    });
}
// The "close" event occurs during an abnormal shutdown, e.g. a user clearing their browser data.
// However, it doesn't occur with the normal "close" event, so we handle that separately.
// https://www.w3.org/TR/IndexedDB/#close-a-database-connection
function addOnCloseListener(dbName, listener) {
    let listeners = onCloseListeners[dbName];
    if (!listeners) listeners = onCloseListeners[dbName] = [];
    listeners.push(listener);
}
// list of emoticons that don't match a simple \W+ regex
// extracted using:
// require('emoji-picker-element-data/en/emojibase/data.json').map(_ => _.emoticon).filter(Boolean).filter(_ => !/^\W+$/.test(_))
const irregularEmoticons = new Set([
    ':D',
    'XD',
    ":'D",
    'O:)',
    ':X',
    ':P',
    ';P',
    'XP',
    ':L',
    ':Z',
    ':j',
    '8D',
    'XO',
    '8)',
    ':B',
    ':O',
    ':S',
    ":'o",
    'Dx',
    'X(',
    'D:',
    ':C',
    '>0)',
    ':3',
    '</3',
    '<3',
    '\\M/',
    ':E',
    '8#'
]);
function extractTokens(str) {
    return str.split(/[\s_]+/).map((word)=>{
        if (!word.match(/\w/) || irregularEmoticons.has(word)) // for pure emoticons like :) or :-), just leave them as-is
        return word.toLowerCase();
        return word.replace(/[)(:,]/g, '').replace(/’/g, "'").toLowerCase();
    }).filter(Boolean);
}
const MIN_SEARCH_TEXT_LENGTH = 2;
// This is an extra step in addition to extractTokens(). The difference here is that we expect
// the input to have already been run through extractTokens(). This is useful for cases like
// emoticons, where we don't want to do any tokenization (because it makes no sense to split up
// ">:)" by the colon) but we do want to lowercase it to have consistent search results, so that
// the user can type ':P' or ':p' and still get the same result.
function normalizeTokens(str) {
    return str.filter(Boolean).map((_)=>_.toLowerCase()
    ).filter((_)=>_.length >= MIN_SEARCH_TEXT_LENGTH
    );
}
// Transform emoji data for storage in IDB
function transformEmojiData(emojiData) {
    const res1 = emojiData.map(({ annotation , emoticon , group , order , shortcodes , skins , tags , emoji , version  })=>{
        const tokens = [
            ...new Set(normalizeTokens([
                ...(shortcodes || []).map(extractTokens).flat(),
                ...tags.map(extractTokens).flat(),
                ...extractTokens(annotation),
                emoticon
            ]))
        ].sort();
        const res = {
            annotation,
            group,
            order,
            tags,
            tokens,
            unicode: emoji,
            version
        };
        if (emoticon) res.emoticon = emoticon;
        if (shortcodes) res.shortcodes = shortcodes;
        if (skins) {
            res.skinTones = [];
            res.skinUnicodes = [];
            res.skinVersions = [];
            for (const { tone , emoji , version  } of skins){
                res.skinTones.push(tone);
                res.skinUnicodes.push(emoji);
                res.skinVersions.push(version);
            }
        }
        return res;
    });
    return res1;
}
// helper functions that help compress the code better
function callStore(store, method, key, cb) {
    store[method](key).onsuccess = (e)=>cb && cb(e.target.result)
    ;
}
function getIDB(store, key, cb) {
    callStore(store, 'get', key, cb);
}
function getAllIDB(store, key, cb) {
    callStore(store, 'getAll', key, cb);
}
function commit(txn) {
    /* istanbul ignore else */ if (txn.commit) txn.commit();
}
// like lodash's minBy
function minBy(array, func) {
    let minItem = array[0];
    for(let i = 1; i < array.length; i++){
        const item = array[i];
        if (func(minItem) > func(item)) minItem = item;
    }
    return minItem;
}
// return an array of results representing all items that are found in each one of the arrays
function findCommonMembers(arrays, uniqByFunc) {
    const shortestArray = minBy(arrays, (_)=>_.length
    );
    const results = [];
    for (const item of shortestArray)// if this item is included in every array in the intermediate results, add it to the final results
    if (!arrays.some((array)=>array.findIndex((_)=>uniqByFunc(_) === uniqByFunc(item)
        ) === -1
    )) results.push(item);
    return results;
}
async function isEmpty(db) {
    return !await get(db, STORE_KEYVALUE, KEY_URL);
}
async function hasData(db, url, eTag) {
    const [oldETag, oldUrl] = await Promise.all([
        KEY_ETAG,
        KEY_URL
    ].map((key)=>get(db, STORE_KEYVALUE, key)
    ));
    return oldETag === eTag && oldUrl === url;
}
async function doFullDatabaseScanForSingleResult(db, predicate) {
    // This batching algorithm is just a perf improvement over a basic
    // cursor. The BATCH_SIZE is an estimate of what would give the best
    // perf for doing a full DB scan (worst case).
    //
    // Mini-benchmark for determining the best batch size:
    //
    // PERF=1 yarn build:rollup && yarn test:adhoc
    //
    // (async () => {
    //   performance.mark('start')
    //   await $('emoji-picker').database.getEmojiByShortcode('doesnotexist')
    //   performance.measure('total', 'start')
    //   console.log(performance.getEntriesByName('total').slice(-1)[0].duration)
    // })()
    const BATCH_SIZE = 50; // Typically around 150ms for 6x slowdown in Chrome for above benchmark
    return dbPromise(db, STORE_EMOJI, MODE_READONLY, (emojiStore, txn, cb)=>{
        let lastKey;
        const processNextBatch = ()=>{
            emojiStore.getAll(lastKey && IDBKeyRange.lowerBound(lastKey, true), BATCH_SIZE).onsuccess = (e)=>{
                const results = e.target.result;
                for (const result of results){
                    lastKey = result.unicode;
                    if (predicate(result)) return cb(result);
                }
                if (results.length < BATCH_SIZE) return cb();
                processNextBatch();
            };
        };
        processNextBatch();
    });
}
async function loadData(db, emojiData, url, eTag) {
    {
        const transformedData = transformEmojiData(emojiData);
        await dbPromise(db, [
            STORE_EMOJI,
            STORE_KEYVALUE
        ], MODE_READWRITE, ([emojiStore, metaStore], txn)=>{
            let oldETag;
            let oldUrl;
            let todo = 0;
            function checkFetched() {
                if (++todo === 2) onFetched();
            }
            function onFetched() {
                if (oldETag === eTag && oldUrl === url) // check again within the transaction to guard against concurrency, e.g. multiple browser tabs
                return;
                // delete old data
                emojiStore.clear();
                // insert new data
                for (const data of transformedData)emojiStore.put(data);
                metaStore.put(eTag, KEY_ETAG);
                metaStore.put(url, KEY_URL);
                commit(txn);
            }
            getIDB(metaStore, KEY_ETAG, (result)=>{
                oldETag = result;
                checkFetched();
            });
            getIDB(metaStore, KEY_URL, (result)=>{
                oldUrl = result;
                checkFetched();
            });
        });
    }
}
async function getEmojiByGroup(db, group) {
    return dbPromise(db, STORE_EMOJI, MODE_READONLY, (emojiStore, txn, cb)=>{
        const range = IDBKeyRange.bound([
            group,
            0
        ], [
            group + 1,
            0
        ], false, true);
        getAllIDB(emojiStore.index(INDEX_GROUP_AND_ORDER), range, cb);
    });
}
async function getEmojiBySearchQuery(db, query) {
    const tokens = normalizeTokens(extractTokens(query));
    if (!tokens.length) return [];
    return dbPromise(db, STORE_EMOJI, MODE_READONLY, (emojiStore, txn, cb)=>{
        // get all results that contain all tokens (i.e. an AND query)
        const intermediateResults = [];
        const checkDone = ()=>{
            if (intermediateResults.length === tokens.length) onDone();
        };
        const onDone = ()=>{
            const results = findCommonMembers(intermediateResults, (_)=>_.unicode
            );
            cb(results.sort((a, b)=>a.order < b.order ? -1 : 1
            ));
        };
        for(let i = 0; i < tokens.length; i++){
            const token = tokens[i];
            const range = i === tokens.length - 1 ? IDBKeyRange.bound(token, token + '\uffff', false, true) // treat last token as a prefix search
             : IDBKeyRange.only(token); // treat all other tokens as an exact match
            getAllIDB(emojiStore.index(INDEX_TOKENS), range, (result)=>{
                intermediateResults.push(result);
                checkDone();
            });
        }
    });
}
// This could have been implemented as an IDB index on shortcodes, but it seemed wasteful to do that
// when we can already query by tokens and this will give us what we're looking for 99.9% of the time
async function getEmojiByShortcode(db, shortcode) {
    const emojis = await getEmojiBySearchQuery(db, shortcode);
    // In very rare cases (e.g. the shortcode "v" as in "v for victory"), we cannot search because
    // there are no usable tokens (too short in this case). In that case, we have to do an inefficient
    // full-database scan, which I believe is an acceptable tradeoff for not having to have an extra
    // index on shortcodes.
    if (!emojis.length) {
        const predicate = (_)=>(_.shortcodes || []).includes(shortcode.toLowerCase())
        ;
        return await doFullDatabaseScanForSingleResult(db, predicate) || null;
    }
    return emojis.filter((_1)=>{
        const lowerShortcodes = (_1.shortcodes || []).map((_)=>_.toLowerCase()
        );
        return lowerShortcodes.includes(shortcode.toLowerCase());
    })[0] || null;
}
async function getEmojiByUnicode(db, unicode) {
    return dbPromise(db, STORE_EMOJI, MODE_READONLY, (emojiStore, txn, cb)=>getIDB(emojiStore, unicode, (result1)=>{
            if (result1) return cb(result1);
            getIDB(emojiStore.index(INDEX_SKIN_UNICODE), unicode, (result)=>cb(result || null)
            );
        })
    );
}
function get(db, storeName, key) {
    return dbPromise(db, storeName, MODE_READONLY, (store, txn, cb)=>getIDB(store, key, cb)
    );
}
function set1(db, storeName, key, value) {
    return dbPromise(db, storeName, MODE_READWRITE, (store, txn)=>{
        store.put(value, key);
        commit(txn);
    });
}
function incrementFavoriteEmojiCount(db, unicode) {
    return dbPromise(db, STORE_FAVORITES, MODE_READWRITE, (store, txn)=>getIDB(store, unicode, (result)=>{
            store.put((result || 0) + 1, unicode);
            commit(txn);
        })
    );
}
function getTopFavoriteEmoji(db, customEmojiIndex, limit) {
    if (limit === 0) return [];
    return dbPromise(db, [
        STORE_FAVORITES,
        STORE_EMOJI
    ], MODE_READONLY, ([favoritesStore, emojiStore], txn, cb)=>{
        const results = [];
        favoritesStore.index(INDEX_COUNT).openCursor(undefined, 'prev').onsuccess = (e)=>{
            const cursor = e.target.result;
            if (!cursor) return cb(results);
            function addResult(result) {
                results.push(result);
                if (results.length === limit) return cb(results) // done, reached the limit
                ;
                cursor.continue();
            }
            const unicodeOrName = cursor.primaryKey;
            const custom = customEmojiIndex.byName(unicodeOrName);
            if (custom) return addResult(custom);
            // This could be done in parallel (i.e. make the cursor and the get()s parallelized),
            // but my testing suggests it's not actually faster.
            getIDB(emojiStore, unicodeOrName, (emoji)=>{
                if (emoji) return addResult(emoji);
                // emoji not found somehow, ignore (may happen if custom emoji change)
                cursor.continue();
            });
        };
    });
}
// trie data structure for prefix searches
// loosely based on https://github.com/nolanlawson/substring-trie
const CODA_MARKER = ''; // marks the end of the string
function trie(arr, itemToTokens) {
    const map = new Map();
    for (const item of arr){
        const tokens = itemToTokens(item);
        for (const token of tokens){
            let currentMap = map;
            for(let i = 0; i < token.length; i++){
                const char = token.charAt(i);
                let nextMap = currentMap.get(char);
                if (!nextMap) {
                    nextMap = new Map();
                    currentMap.set(char, nextMap);
                }
                currentMap = nextMap;
            }
            let valuesAtCoda = currentMap.get(CODA_MARKER);
            if (!valuesAtCoda) {
                valuesAtCoda = [];
                currentMap.set(CODA_MARKER, valuesAtCoda);
            }
            valuesAtCoda.push(item);
        }
    }
    const search = (query, exact)=>{
        let currentMap = map;
        for(let i = 0; i < query.length; i++){
            const char = query.charAt(i);
            const nextMap = currentMap.get(char);
            if (nextMap) currentMap = nextMap;
            else return [];
        }
        if (exact) {
            const results = currentMap.get(CODA_MARKER);
            return results || [];
        }
        const results = [];
        // traverse
        const queue = [
            currentMap
        ];
        while(queue.length){
            const currentMap = queue.shift();
            const entriesSortedByKey = [
                ...currentMap.entries()
            ].sort((a, b)=>a[0] < b[0] ? -1 : 1
            );
            for (const [key, value] of entriesSortedByKey)if (key === CODA_MARKER) results.push(...value);
            else queue.push(value);
        }
        return results;
    };
    return search;
}
const requiredKeys$1 = [
    'name',
    'url'
];
function assertCustomEmojis(customEmojis) {
    const isArray = customEmojis && Array.isArray(customEmojis);
    const firstItemIsFaulty = isArray && customEmojis.length && (!customEmojis[0] || requiredKeys$1.some((key)=>!(key in customEmojis[0])
    ));
    if (!isArray || firstItemIsFaulty) throw new Error('Custom emojis are in the wrong format');
}
function customEmojiIndex1(customEmojis) {
    assertCustomEmojis(customEmojis);
    const sortByName = (a, b)=>a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1
    ;
    //
    // all()
    //
    const all = customEmojis.sort(sortByName);
    //
    // search()
    //
    const emojiToTokens = (emoji)=>[
            ...new Set((emoji.shortcodes || []).map((shortcode)=>extractTokens(shortcode)
            ).flat())
        ]
    ;
    const searchTrie = trie(customEmojis, emojiToTokens);
    const searchByExactMatch = (_)=>searchTrie(_, true)
    ;
    const searchByPrefix = (_)=>searchTrie(_, false)
    ;
    // Search by query for custom emoji. Similar to how we do this in IDB, the last token
    // is treated as a prefix search, but every other one is treated as an exact match.
    // Then we AND the results together
    const search = (query)=>{
        const tokens = extractTokens(query);
        const intermediateResults = tokens.map((token, i)=>(i < tokens.length - 1 ? searchByExactMatch : searchByPrefix)(token)
        );
        return findCommonMembers(intermediateResults, (_)=>_.name
        ).sort(sortByName);
    };
    //
    // byShortcode, byName
    //
    const shortcodeToEmoji = new Map();
    const nameToEmoji = new Map();
    for (const customEmoji of customEmojis){
        nameToEmoji.set(customEmoji.name.toLowerCase(), customEmoji);
        for (const shortcode of customEmoji.shortcodes || [])shortcodeToEmoji.set(shortcode.toLowerCase(), customEmoji);
    }
    const byShortcode = (shortcode)=>shortcodeToEmoji.get(shortcode.toLowerCase())
    ;
    const byName = (name)=>nameToEmoji.get(name.toLowerCase())
    ;
    return {
        all,
        search,
        byShortcode,
        byName
    };
}
// remove some internal implementation details, i.e. the "tokens" array on the emoji object
// essentially, convert the emoji from the version stored in IDB to the version used in-memory
function cleanEmoji(emoji) {
    if (!emoji) return emoji;
    delete emoji.tokens;
    if (emoji.skinTones) {
        const len = emoji.skinTones.length;
        emoji.skins = Array(len);
        for(let i = 0; i < len; i++)emoji.skins[i] = {
            tone: emoji.skinTones[i],
            unicode: emoji.skinUnicodes[i],
            version: emoji.skinVersions[i]
        };
        delete emoji.skinTones;
        delete emoji.skinUnicodes;
        delete emoji.skinVersions;
    }
    return emoji;
}
function warnETag(eTag) {
    if (!eTag) console.warn('emoji-picker-element is more efficient if the dataSource server exposes an ETag header.');
}
const requiredKeys = [
    'annotation',
    'emoji',
    'group',
    'order',
    'tags',
    'version'
];
function assertEmojiData(emojiData) {
    if (!emojiData || !Array.isArray(emojiData) || !emojiData[0] || typeof emojiData[0] !== 'object' || requiredKeys.some((key)=>!(key in emojiData[0])
    )) throw new Error('Emoji data is in the wrong format');
}
function assertStatus(response, dataSource) {
    if (Math.floor(response.status / 100) !== 2) throw new Error('Failed to fetch: ' + dataSource + ':  ' + response.status);
}
async function getETag(dataSource) {
    const response = await fetch(dataSource, {
        method: 'HEAD'
    });
    assertStatus(response, dataSource);
    const eTag = response.headers.get('etag');
    warnETag(eTag);
    return eTag;
}
async function getETagAndData(dataSource) {
    const response = await fetch(dataSource);
    assertStatus(response, dataSource);
    const eTag = response.headers.get('etag');
    warnETag(eTag);
    const emojiData = await response.json();
    assertEmojiData(emojiData);
    return [
        eTag,
        emojiData
    ];
}
// TODO: including these in blob-util.ts causes typedoc to generate docs for them,
/**
 * Convert an `ArrayBuffer` to a binary string.
 *
 * Example:
 *
 * ```js
 * var myString = blobUtil.arrayBufferToBinaryString(arrayBuff)
 * ```
 *
 * @param buffer - array buffer
 * @returns binary string
 */ function arrayBufferToBinaryString(buffer) {
    var binary = '';
    var bytes = new Uint8Array(buffer);
    var length = bytes.byteLength;
    var i = -1;
    while(++i < length)binary += String.fromCharCode(bytes[i]);
    return binary;
}
/**
 * Convert a binary string to an `ArrayBuffer`.
 *
 * ```js
 * var myBuffer = blobUtil.binaryStringToArrayBuffer(binaryString)
 * ```
 *
 * @param binary - binary string
 * @returns array buffer
 */ function binaryStringToArrayBuffer(binary) {
    var length = binary.length;
    var buf = new ArrayBuffer(length);
    var arr = new Uint8Array(buf);
    var i = -1;
    while(++i < length)arr[i] = binary.charCodeAt(i);
    return buf;
}
// generate a checksum based on the stringified JSON
async function jsonChecksum(object) {
    const inString = JSON.stringify(object);
    const inBuffer = binaryStringToArrayBuffer(inString);
    // this does not need to be cryptographically secure, SHA-1 is fine
    const outBuffer = await crypto.subtle.digest('SHA-1', inBuffer);
    const outBinString = arrayBufferToBinaryString(outBuffer);
    const res = btoa(outBinString);
    return res;
}
async function checkForUpdates(db, dataSource) {
    // just do a simple HEAD request first to see if the eTags match
    let emojiData;
    let eTag = await getETag(dataSource);
    if (!eTag) {
        const eTagAndData = await getETagAndData(dataSource);
        eTag = eTagAndData[0];
        emojiData = eTagAndData[1];
        if (!eTag) eTag = await jsonChecksum(emojiData);
    }
    if (await hasData(db, dataSource, eTag)) ;
    else {
        if (!emojiData) {
            const eTagAndData = await getETagAndData(dataSource);
            emojiData = eTagAndData[1];
        }
        await loadData(db, emojiData, dataSource, eTag);
    }
}
async function loadDataForFirstTime(db, dataSource) {
    let [eTag, emojiData] = await getETagAndData(dataSource);
    if (!eTag) // Handle lack of support for ETag or Access-Control-Expose-Headers
    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers#Browser_compatibility
    eTag = await jsonChecksum(emojiData);
    await loadData(db, emojiData, dataSource, eTag);
}
class Database {
    constructor({ dataSource =DEFAULT_DATA_SOURCE , locale =DEFAULT_LOCALE , customEmoji =[]  } = {
    }){
        this.dataSource = dataSource;
        this.locale = locale;
        this._dbName = `emoji-picker-element-${this.locale}`;
        this._db = undefined;
        this._lazyUpdate = undefined;
        this._custom = customEmojiIndex1(customEmoji);
        this._clear = this._clear.bind(this);
        this._ready = this._init();
    }
    async _init() {
        const db = this._db = await openDatabase(this._dbName);
        addOnCloseListener(this._dbName, this._clear);
        const dataSource = this.dataSource;
        const empty = await isEmpty(db);
        if (empty) await loadDataForFirstTime(db, dataSource);
        else this._lazyUpdate = checkForUpdates(db, dataSource);
    }
    async ready() {
        const checkReady = async ()=>{
            if (!this._ready) this._ready = this._init();
            return this._ready;
        };
        await checkReady();
        // There's a possibility of a race condition where the element gets added, removed, and then added again
        // with a particular timing, which would set the _db to undefined.
        // We *could* do a while loop here, but that seems excessive and could lead to an infinite loop.
        if (!this._db) await checkReady();
    }
    async getEmojiByGroup(group) {
        assertNumber(group);
        await this.ready();
        return uniqEmoji(await getEmojiByGroup(this._db, group)).map(cleanEmoji);
    }
    async getEmojiBySearchQuery(query) {
        assertNonEmptyString(query);
        await this.ready();
        const customs = this._custom.search(query);
        const natives = uniqEmoji(await getEmojiBySearchQuery(this._db, query)).map(cleanEmoji);
        return [
            ...customs,
            ...natives
        ];
    }
    async getEmojiByShortcode(shortcode) {
        assertNonEmptyString(shortcode);
        await this.ready();
        const custom = this._custom.byShortcode(shortcode);
        if (custom) return custom;
        return cleanEmoji(await getEmojiByShortcode(this._db, shortcode));
    }
    async getEmojiByUnicodeOrName(unicodeOrName) {
        assertNonEmptyString(unicodeOrName);
        await this.ready();
        const custom = this._custom.byName(unicodeOrName);
        if (custom) return custom;
        return cleanEmoji(await getEmojiByUnicode(this._db, unicodeOrName));
    }
    async getPreferredSkinTone() {
        await this.ready();
        return await get(this._db, STORE_KEYVALUE, KEY_PREFERRED_SKINTONE) || 0;
    }
    async setPreferredSkinTone(skinTone) {
        assertNumber(skinTone);
        await this.ready();
        return set1(this._db, STORE_KEYVALUE, KEY_PREFERRED_SKINTONE, skinTone);
    }
    async incrementFavoriteEmojiCount(unicodeOrName1) {
        assertNonEmptyString(unicodeOrName1);
        await this.ready();
        return incrementFavoriteEmojiCount(this._db, unicodeOrName1);
    }
    async getTopFavoriteEmoji(limit) {
        assertNumber(limit);
        await this.ready();
        return (await getTopFavoriteEmoji(this._db, this._custom, limit)).map(cleanEmoji);
    }
    set customEmoji(customEmojis) {
        this._custom = customEmojiIndex1(customEmojis);
    }
    get customEmoji() {
        return this._custom.all;
    }
    async _shutdown() {
        await this.ready(); // reopen if we've already been closed/deleted
        try {
            await this._lazyUpdate; // allow any lazy updates to process before closing/deleting
        } catch (err) {
        }
    }
    // clear references to IDB, e.g. during a close event
    _clear() {
        // We don't need to call removeEventListener or remove the manual "close" listeners.
        // The memory leak tests prove this is unnecessary. It's because:
        // 1) IDBDatabases that can no longer fire "close" automatically have listeners GCed
        // 2) we clear the manual close listeners in databaseLifecycle.js.
        this._db = this._ready = this._lazyUpdate = undefined;
    }
    async close() {
        await this._shutdown();
        await closeDatabase(this._dbName);
    }
    async delete() {
        await this._shutdown();
        await deleteDatabase(this._dbName);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fWLm3":[function() {},{}],"iJ09D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../components");
var _editWatchersJsx = require("./edit-watchers/edit-watchers.jsx");
var _editWatchersJsxDefault = parcelHelpers.interopDefault(_editWatchersJsx);
var _editWitnessesJsx = require("./edit-witnesses/edit-witnesses.jsx");
var _editWitnessesJsxDefault = parcelHelpers.interopDefault(_editWitnessesJsx);
var _settingsScss = require("./settings.scss");
var _configureIdentifierPng = require("../../../assets/img/configure-identifier.png");
var _configureIdentifierPngDefault = parcelHelpers.interopDefault(_configureIdentifierPng);
class Settings {
    constructor(){
        this.currentState = null;
    }
    view(vnode) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
            class: "settings"
        }, _mithrilDefault.default(_components.NavRail, null), _mithrilDefault.default(_components.Container, {
            class: "headspace",
            style: {
                padding: '0 4rem'
            }
        }, _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default("div", {
            class: "flex-1",
            style: {
                marginRight: '4rem'
            }
        }, _mithrilDefault.default(_components.Card, {
            class: "card--fluid",
            padding: "1.5rem"
        }, _mithrilDefault.default(_components.Card, {
            class: `card--fluid card--hover ${this.currentState === 'edit-witnesses' ? 'card--active' : ''}`,
            padding: "1.5rem",
            style: {
                marginBottom: '2.5rem'
            },
            onclick: ()=>{
                this.currentState = 'edit-witnesses';
            }
        }, _mithrilDefault.default("div", {
            class: "flex flex-align-center"
        }, _mithrilDefault.default("h3", null, "Edit Witness URLs"))), _mithrilDefault.default(_components.Card, {
            class: `card--fluid card--hover ${this.currentState === 'edit-watchers' ? 'card--active' : ''}`,
            padding: "1.5rem",
            style: {
                marginBottom: '2.5rem'
            },
            onclick: ()=>{
                this.currentState = 'edit-watchers';
            }
        }, _mithrilDefault.default("div", {
            class: "flex flex-align-center"
        }, _mithrilDefault.default("h3", null, "Edit Watcher URLs"))))), _mithrilDefault.default("div", {
            class: "flex-1"
        }, _mithrilDefault.default(_components.Card, {
            class: 'card--fluid',
            style: {
                position: 'relative'
            },
            padding: "4rem"
        }, _mithrilDefault.default(_components.IconButton, {
            class: "close-icon",
            icon: "close"
        }), this.currentState === 'edit-witnesses' && _mithrilDefault.default(_editWitnessesJsxDefault.default, null), this.currentState === 'edit-watchers' && _mithrilDefault.default(_editWatchersJsxDefault.default, null), this.currentState === null && _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _configureIdentifierPngDefault.default,
            style: {
                width: '50%'
            }
        }), _mithrilDefault.default("br", null), _mithrilDefault.default("h3", null, "Enter Witness and Watcher URLs"), _mithrilDefault.default("br", null), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Your URLs were set up at the start but can be edited at any time. Click on one of the buttons to the left to edit your Witness and Watcher URLs."), _mithrilDefault.default("br", null), _mithrilDefault.default("div", {
            class: "flex flex-justify-end"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Close"
        })))))))));
    }
}
module.exports = Settings;

},{"mithril":"1zcoP","../../components":"iBBNK","./edit-watchers/edit-watchers.jsx":"6RMAf","./edit-witnesses/edit-witnesses.jsx":"crjlo","./settings.scss":"clZ0y","../../../assets/img/configure-identifier.png":"cwAYb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6RMAf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _githubLogoPng = require("../../../../assets/img/github-logo.png");
var _githubLogoPngDefault = parcelHelpers.interopDefault(_githubLogoPng);
var _components = require("../../../components");
var _configureIdentifierPng = require("../../../../assets/img/configure-identifier.png");
var _configureIdentifierPngDefault = parcelHelpers.interopDefault(_configureIdentifierPng);
class EnterWatcherURLs {
    view(vnode) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h1", null, "Profile"), _mithrilDefault.default("img", {
            src: _configureIdentifierPngDefault.default,
            style: {
                width: '35%'
            }
        }), _mithrilDefault.default("h3", null, "Enter Watcher URLs"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Enter your watchers URLs below or continue on with the default watchers."), _mithrilDefault.default("div", null, _mithrilDefault.default(_components.TextField, {
            filled: true,
            fluid: true,
            placeholder: "Watcher URL 1",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }), _mithrilDefault.default(_components.TextField, {
            filled: true,
            fluid: true,
            placeholder: "Watcher URL 2",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-center",
            style: {
                width: '50%',
                backgroundColor: '#f5f5f5',
                height: '3rem',
                borderRadius: '4px',
                alignItems: 'center'
            }
        }, _mithrilDefault.default("p", null, "+ Add New"))), _mithrilDefault.default("div", {
            class: "flex flex-justify-between",
            style: {
                margin: '4rem 0 0 0'
            }
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back"
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Save",
            onclick: vnode.attrs.continue
        })));
    }
}
class EditWatcherURLs {
    view(vnode1) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h1", null, "Profile"), _mithrilDefault.default("img", {
            src: _configureIdentifierPngDefault.default,
            style: {
                width: '35%',
                borderRadius: '50%'
            }
        }), _mithrilDefault.default("h3", null, "Edit Watcher URLs"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Below are your current WatcherURLs, if you would like to change them, click to edit."), _mithrilDefault.default("div", null, _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 2rem',
                fontSize: '110%',
                color: 'black'
            }
        }, "Watcher URL 1"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 2rem',
                fontSize: '110%',
                color: 'black'
            }
        }, "Watcher URL 2")), _mithrilDefault.default("div", {
            class: "flex flex-justify-between",
            style: {
                margin: '4rem 0 0 0'
            }
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back"
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Edit",
            onclick: vnode1.attrs.continue
        })));
    }
}
class EditWatchers {
    constructor(){
        this.currentState = 'enter-watcher-urls';
    }
    view(vnode2) {
        return _mithrilDefault.default('[', null, this.currentState === 'enter-watcher-urls' && _mithrilDefault.default(EnterWatcherURLs, {
            continue: ()=>{
                this.currentState = 'edit-watcher-urls';
            }
        }), this.currentState === 'edit-watcher-urls' && _mithrilDefault.default(EditWatcherURLs, null));
    }
}
module.exports = EditWatchers;

},{"mithril":"1zcoP","../../../../assets/img/github-logo.png":"91eSZ","../../../components":"iBBNK","../../../../assets/img/configure-identifier.png":"cwAYb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cwAYb":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "configure-identifier.c39f43b0.png" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"crjlo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _githubLogoPng = require("../../../../assets/img/github-logo.png");
var _githubLogoPngDefault = parcelHelpers.interopDefault(_githubLogoPng);
var _components = require("../../../components");
var _configureIdentifierPng = require("../../../../assets/img/configure-identifier.png");
var _configureIdentifierPngDefault = parcelHelpers.interopDefault(_configureIdentifierPng);
class EnterWitnessURLs {
    view(vnode) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h1", null, "Profile"), _mithrilDefault.default("img", {
            src: _configureIdentifierPngDefault.default,
            style: {
                width: '35%'
            }
        }), _mithrilDefault.default("h3", null, "Enter Witness URLs"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Enter your witness URLs below or continue on with the default witnesses."), _mithrilDefault.default("div", null, _mithrilDefault.default(_components.TextField, {
            filled: true,
            fluid: true,
            placeholder: "Witness URL 1",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }), _mithrilDefault.default(_components.TextField, {
            filled: true,
            fluid: true,
            placeholder: "Witness URL 2",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-center",
            style: {
                width: '50%',
                backgroundColor: '#f5f5f5',
                height: '3rem',
                borderRadius: '4px',
                alignItems: 'center'
            }
        }, _mithrilDefault.default("p", null, "+ Add New"))), _mithrilDefault.default("div", {
            class: "flex flex-justify-between",
            style: {
                margin: '4rem 0 0 0'
            }
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back"
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Save",
            onclick: vnode.attrs.continue
        })));
    }
}
class EditWitnessURLs {
    view(vnode1) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h1", null, "Profile"), _mithrilDefault.default("img", {
            src: _configureIdentifierPngDefault.default,
            style: {
                width: '35%',
                borderRadius: '50%'
            }
        }), _mithrilDefault.default("h3", null, "Edit Witness URLs"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Below are your current Witness URLs, if you would like to change them, click to edit."), _mithrilDefault.default("div", null, _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 2rem',
                fontSize: '110%',
                color: 'black'
            }
        }, "Witness URL 1"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 2rem',
                fontSize: '110%',
                color: 'black'
            }
        }, "Witness URL 2")), _mithrilDefault.default("div", {
            class: "flex flex-justify-between",
            style: {
                margin: '4rem 0 0 0'
            }
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back"
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Edit",
            onclick: vnode1.attrs.continue
        })));
    }
}
class EditWitnesses {
    constructor(){
        this.currentState = 'enter-witness-urls';
    }
    view(vnode2) {
        return _mithrilDefault.default('[', null, this.currentState === 'enter-witness-urls' && _mithrilDefault.default(EnterWitnessURLs, {
            continue: ()=>{
                this.currentState = 'edit-witness-urls';
            }
        }), this.currentState === 'edit-witness-urls' && _mithrilDefault.default(EditWitnessURLs, null));
    }
}
module.exports = EditWitnesses;

},{"mithril":"1zcoP","../../../../assets/img/github-logo.png":"91eSZ","../../../components":"iBBNK","../../../../assets/img/configure-identifier.png":"cwAYb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"clZ0y":[function() {},{}],"2s3FK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _externalGar = require("./external-gar");
var _externalGarDefault = parcelHelpers.interopDefault(_externalGar);
module.exports = _externalGarDefault.default;

},{"./external-gar":"8vqv5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8vqv5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril"); //Variables
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _variables = require("./variables"); // Tasks
var _variablesDefault = parcelHelpers.interopDefault(_variables);
var _configureMultiSigSet = require("../generic/configure-multi-sig-set/configure-multi-sig-set");
var _configureMultiSigSetDefault = parcelHelpers.interopDefault(_configureMultiSigSet);
var _createYourAid = require("../generic/create-your-aid/create-your-aid");
var _createYourAidDefault = parcelHelpers.interopDefault(_createYourAid);
var _createYourPasscode = require("../generic/create-your-passcode/create-your-passcode");
var _createYourPasscodeDefault = parcelHelpers.interopDefault(_createYourPasscode);
var _credentialIssuance = require("../generic/credential-issuance/credential-issuance");
var _credentialIssuanceDefault = parcelHelpers.interopDefault(_credentialIssuance);
var _credentialRevocation = require("../generic/credential-revocation/credential-revocation");
var _credentialRevocationDefault = parcelHelpers.interopDefault(_credentialRevocation);
var _identityAuthenticationIssue = require("../generic/identity-authentication-issue/identity-authentication-issue");
var _identityAuthenticationIssueDefault = parcelHelpers.interopDefault(_identityAuthenticationIssue);
var _identityAuthenticationReceive = require("../generic/identity-authentication-receive/identity-authentication-receive");
var _identityAuthenticationReceiveDefault = parcelHelpers.interopDefault(_identityAuthenticationReceive);
var _videoCall = require("../generic/video-call/video-call");
var _videoCallDefault = parcelHelpers.interopDefault(_videoCall);
var _introToYourRole = require("../generic/intro-to-your-role/intro-to-your-role");
var _introToYourRoleDefault = parcelHelpers.interopDefault(_introToYourRole);
var _joinMultiSigGroup = require("../generic/join-multi-sig-group/join-multi-sig-group");
var _joinMultiSigGroupDefault = parcelHelpers.interopDefault(_joinMultiSigGroup);
var _login = require("../generic/login/login");
var _loginDefault = parcelHelpers.interopDefault(_login);
var _manualKeyRotation = require("../generic/manual-key-rotation/manual-key-rotation");
var _manualKeyRotationDefault = parcelHelpers.interopDefault(_manualKeyRotation);
var _viewMultiSigEventLogs = require("../generic/view-multi-sig-event-logs/view-multi-sig-event-logs");
var _viewMultiSigEventLogsDefault = parcelHelpers.interopDefault(_viewMultiSigEventLogs);
var _viewNewCredential = require("../generic/view-new-credential/view-new-credential"); // Images
var _viewNewCredentialDefault = parcelHelpers.interopDefault(_viewNewCredential);
var _addNewContactsPng = require("../../src/assets/img/add-new-contacts.png");
var _addNewContactsPngDefault = parcelHelpers.interopDefault(_addNewContactsPng);
var _secureMessagingPng = require("../../src/assets/img/secure-messaging.png");
var _secureMessagingPngDefault = parcelHelpers.interopDefault(_secureMessagingPng);
var _loanApprovedPng = require("../../src/assets/img/loan-approved.png");
var _loanApprovedPngDefault = parcelHelpers.interopDefault(_loanApprovedPng);
var _createYourPasscodePng = require("../../src/assets/img/create-your-passcode.png");
var _createYourPasscodePngDefault = parcelHelpers.interopDefault(_createYourPasscodePng);
var _createIdentifierPng = require("../../src/assets/img/create-identifier.png");
var _createIdentifierPngDefault = parcelHelpers.interopDefault(_createIdentifierPng);
var _declineRequestPng = require("../../src/assets/img/decline-request.png");
var _declineRequestPngDefault = parcelHelpers.interopDefault(_declineRequestPng);
var _verifyCredentialsPng = require("../../src/assets/img/verify-credentials.png");
var _verifyCredentialsPngDefault = parcelHelpers.interopDefault(_verifyCredentialsPng);
var _projectPlanningPng = require("../../src/assets/img/project-planning.png");
var _projectPlanningPngDefault = parcelHelpers.interopDefault(_projectPlanningPng);
var _calendarPng = require("../../src/assets/img/calendar.png");
var _calendarPngDefault = parcelHelpers.interopDefault(_calendarPng);
const multisigTask = {
    imgSrc: _secureMessagingPngDefault.default,
    label: 'Configure Multi-Sig Group',
    component: {
        view: (vnode)=>{
            return _mithrilDefault.default(_configureMultiSigSetDefault.default, {
                end: vnode.attrs.end
            });
        }
    }
};
const joinMultisigTask = {
    imgSrc: _secureMessagingPngDefault.default,
    label: 'Join Multi-Sig Group',
    component: {
        view: (vnode)=>{
            return _mithrilDefault.default(_joinMultiSigGroupDefault.default, {
                end: vnode.attrs.end
            });
        }
    }
};
const tasks = {
    'create-passcode': [
        {
            imgSrc: _createYourPasscodePngDefault.default,
            label: 'Create Your Passcode',
            component: {
                view: (vnode)=>{
                    return _mithrilDefault.default(_createYourPasscodeDefault.default, {
                        end: vnode.attrs.end
                    });
                }
            }
        },
        {
            imgSrc: _calendarPngDefault.default,
            label: 'Enter Your Passcode',
            component: {
                view: (vnode)=>{
                    return _mithrilDefault.default(_loginDefault.default, {
                        end: vnode.attrs.end
                    });
                }
            }
        }
    ],
    'create-identifier': [
        {
            imgSrc: _createIdentifierPngDefault.default,
            label: 'Incept Local GLEIF Single-Sig AID',
            component: {
                view: (vnode)=>{
                    return _mithrilDefault.default(_createYourAidDefault.default, {
                        welcome: _variablesDefault.default.createYourAid.welcome,
                        creatingAID: _variablesDefault.default.createYourAid.CreateYourAID,
                        stepsToCreate: _variablesDefault.default.createYourAid.stepsToCreate,
                        createYourAlias: _variablesDefault.default.createYourAid.createYourAlias,
                        end: vnode.attrs.end
                    });
                }
            }
        }
    ],
    'create-multisig': [
        new _videoCallDefault.default(true, 'Lead GLEIF External Multi-Sig AID Inception', multisigTask),
        new _videoCallDefault.default(false, 'Join GLEIF External Multi-Sig AID Inception'),
        //   imgSrc: verifyCredentials,
        //   label: 'Multisig BOI',
        //   component: {
        //     view: (vnode) => {
        //       return <ConfigureMultiSigSet end={vnode.attrs.end} />;
        //     },
        //   },
        // },
        {
            imgSrc: _verifyCredentialsPngDefault.default,
            label: 'Perform Manual Key Rotation',
            component: {
                view: (vnode)=>{
                    return _mithrilDefault.default(_manualKeyRotationDefault.default, {
                        end: vnode.attrs.end
                    });
                }
            }
        }
    ],
    'join-multisig': [
        joinMultisigTask
    ],
    'intro-to-role': [
        {
            imgSrc: _createIdentifierPngDefault.default,
            label: 'Intro to Your Role',
            component: {
                view: (vnode)=>{
                    return _mithrilDefault.default(_introToYourRoleDefault.default, {
                        main: _variablesDefault.default.introToYourRole.main,
                        steps: _variablesDefault.default.introToYourRole.steps,
                        end: vnode.attrs.end
                    });
                }
            }
        }
    ],
    'main': [
        {
            imgSrc: _loanApprovedPngDefault.default,
            label: 'Credential Issuance',
            component: {
                view: (vnode)=>{
                    return _mithrilDefault.default(_credentialIssuanceDefault.default, {
                        end: vnode.attrs.end
                    });
                }
            }
        },
        {
            imgSrc: _declineRequestPngDefault.default,
            label: 'Credential Revocation',
            component: {
                view: (vnode)=>{
                    return _mithrilDefault.default(_credentialRevocationDefault.default, {
                        end: vnode.attrs.end
                    });
                }
            }
        },
        {
            imgSrc: _verifyCredentialsPngDefault.default,
            label: 'Initiate Manual Key Rotation',
            component: {
                view: (vnode)=>{
                    return _mithrilDefault.default(_manualKeyRotationDefault.default, {
                        end: vnode.attrs.end
                    });
                }
            }
        },
        {
            imgSrc: _verifyCredentialsPngDefault.default,
            label: 'Join Manual Key Rotation',
            component: {
                view: (vnode)=>{
                    return _mithrilDefault.default(_manualKeyRotationDefault.default, {
                        end: vnode.attrs.end
                    });
                }
            }
        },
        {
            imgSrc: _calendarPngDefault.default,
            label: 'View Multi-Sig Event Logs',
            component: {
                view: (vnode)=>{
                    return _mithrilDefault.default(_viewMultiSigEventLogsDefault.default, {
                        end: vnode.attrs.end
                    });
                }
            }
        }
    ]
};
module.exports = tasks;

},{"mithril":"1zcoP","./variables":"jn4Xr","../generic/configure-multi-sig-set/configure-multi-sig-set":"c3a1x","../generic/create-your-aid/create-your-aid":"7wdof","../generic/create-your-passcode/create-your-passcode":"6SUrR","../generic/credential-issuance/credential-issuance":"7BPNb","../generic/credential-revocation/credential-revocation":"7BKx6","../generic/identity-authentication-issue/identity-authentication-issue":"giGND","../generic/identity-authentication-receive/identity-authentication-receive":"i71kh","../generic/video-call/video-call":"7UBCM","../generic/intro-to-your-role/intro-to-your-role":"lTLJc","../generic/join-multi-sig-group/join-multi-sig-group":"1JmBC","../generic/login/login":"5C7mf","../generic/manual-key-rotation/manual-key-rotation":"9Hyim","../generic/view-multi-sig-event-logs/view-multi-sig-event-logs":"9WLnE","../generic/view-new-credential/view-new-credential":"gcDEa","../../src/assets/img/add-new-contacts.png":"eJ7hD","../../src/assets/img/secure-messaging.png":"6ZVTs","../../src/assets/img/loan-approved.png":"bJjPK","../../src/assets/img/create-your-passcode.png":"3PgQv","../../src/assets/img/create-identifier.png":"7RAOR","../../src/assets/img/decline-request.png":"FbsGw","../../src/assets/img/verify-credentials.png":"aSCsU","../../src/assets/img/project-planning.png":"jYGFL","../../src/assets/img/calendar.png":"4C9KU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jn4Xr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../src/app/components");
var _addNewContactsPng = require("../../src/assets/img/add-new-contacts.png");
var _addNewContactsPngDefault = parcelHelpers.interopDefault(_addNewContactsPng);
var _verifyCredentialsPng = require("../../src/assets/img/verify-credentials.png");
var _verifyCredentialsPngDefault = parcelHelpers.interopDefault(_verifyCredentialsPng);
const ExternalGarVariables = {
    createYourAid: {
        welcome: {
            title: _mithrilDefault.default('[', null, "Welcome to your External ", _mithrilDefault.default(_components.TextTooltip, {
                label: _mithrilDefault.default("u", null, "GAR")
            }, "GLEIF Authorized Representative"), ' ', "Software"),
            paragraph: _mithrilDefault.default('[', null, "This software is designed to help you complete verification of authorized representatives on behalf of GLEIF and also as a storage place for all of your credentials.", _mithrilDefault.default("br", null), _mithrilDefault.default("br", null), "The first step will be to create your Delegated AID, then you will receive a short tutorial, You may skip the tutorial by selecting the \u201Cskip\u201D button.")
        },
        creatingAID: {
            title: _mithrilDefault.default('[', null, "Creating your ", _mithrilDefault.default(_components.TextTooltip, {
                label: _mithrilDefault.default("u", null, "AID")
            }, "AID is your identifier for your GRAC software.")),
            paragraph: _mithrilDefault.default('[', null, "In order to provide authorization, you will first have to create your own GLEIF Delegated AID within the software and GLEIF will verify you as an authorized representative (GAR) to act on their behalf.")
        },
        stepsToCreate: {
            title: 'Steps to Create Your GLEIF AID'
        },
        createYourAlias: {
            paragraph: _mithrilDefault.default('[', null, "The alias should be an easy to remember name for your GLEIF Delegated AID as a member of the GLEIF Root AID signing group (e.g. My Qualified vLEI Authorized Representative Identifier).")
        }
    },
    introToYourRole: {
        main: {
            title: 'Intro to the GRAC Role',
            paragraph: _mithrilDefault.default('[', null, "You have now created your GLEIF Delegated AID! While you are waiting for your GLEIF credentials, here is a brief introduction to some of the tasks you can complete in your role.")
        },
        steps: [
            {
                title: 'Complete Identity Assurance',
                image: _addNewContactsPngDefault.default,
                paragraph: _mithrilDefault.default('[', null, "Once you are authorized to act on behalf of GLEIF, you perform identity assurance of a person serving in the role of QAR. A GAR and the QAR will complete a real-time OOBI session in which the GAR and the QAR are present.")
            },
            {
                title: 'Grant Credentials',
                image: _verifyCredentialsPngDefault.default,
                paragraph: _mithrilDefault.default('[', null, "The GAR approves the issuance of the QVI vLEI Credential and the QVI receives the credential in its credential wallet. The QVI vLEI Credential may be added or revoked at any time.")
            }
        ]
    },
    identityAuthentication: {
        steps: {
            paragraph: _mithrilDefault.default('[', null, "This module will take you through the steps of how to authenticate a QAR's identity. Below are the steps for how to complete the process:"),
            list: [
                _mithrilDefault.default('[', null, "Initiate a Video Call."),
                _mithrilDefault.default('[', null, "Use an OOBI protocol to obtain the QAR's AID."),
                _mithrilDefault.default('[', null, "Send a Challenge Message to the QAR."),
                _mithrilDefault.default('[', null, "QAR signs and returns Challenge Message."),
                _mithrilDefault.default('[', null, "You verify signature and issue credentials.")
            ]
        },
        acceptOobi: {
            paragraph: _mithrilDefault.default('[', null, "While on the Video Call, make sure to obtain the QAR's ", _mithrilDefault.default("b", null, "Alias and OOBI"), ". When you have both for each party, please press continue."),
            alias: _mithrilDefault.default('[', null, _mithrilDefault.default("strong", null, "Alias:"))
        }
    }
};
module.exports = ExternalGarVariables;

},{"mithril":"1zcoP","../../src/app/components":"iBBNK","../../src/assets/img/add-new-contacts.png":"eJ7hD","../../src/assets/img/verify-credentials.png":"aSCsU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eJ7hD":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "add-new-contacts.82f45e47.png" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"aSCsU":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "verify-credentials.501d66a1.png" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"c3a1x":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../../src/app/components");
var _services = require("../../../src/app/services");
var _configureMultiSigSetScss = require("./configure-multi-sig-set.scss");
var _secureMessagingPng = require("../../../src/assets/img/secure-messaging.png");
var _secureMessagingPngDefault = parcelHelpers.interopDefault(_secureMessagingPng);
var _greenCheckMarkSvg = require("../../../src/assets/img/green-check-mark.svg");
var _greenCheckMarkSvgDefault = parcelHelpers.interopDefault(_greenCheckMarkSvg);
var _redXSvg = require("../../../src/assets/img/red-x.svg");
var _redXSvgDefault = parcelHelpers.interopDefault(_redXSvg);
class ConfigureMultiSigSet {
    constructor(){
        this.currentState = 'configure-multi-sig-index'; // this.currentState = 'setup-complete';
        this.groupAlias = '';
        this.status = '';
        this.fractionallyWeighted = false;
        this.numSigners = 0; // Used only if fractionallyWeighted is false
        this.wits = _services.Witnesses.witnessPools[0].wits;
        _services.MultiSig.participants = [
            {
                id: '',
                alias: '',
                weight: '',
                signed: false
            }
        ];
        this.default = _services.Profile.getDefaultAID();
        this.weight = '1/2';
        _services.Contacts.requestList();
    }
    ensureMultiSigSigned() {
        new Promise(function(resolve, reject) {
            setTimeout(function waitForSignatures() {
                _services.KERI.getEscrowsForIdentifier(_services.MultiSig.currentEvent['i']).then((escrows)=>{
                    console.log(escrows);
                    if (escrows['partially-signed-events'].length > 0) {
                        let icp = escrows['partially-signed-events'][0];
                        console.log('icp', icp);
                        let sigs = icp['signatures'];
                        console.log('sigs', sigs);
                        sigs.every((sig)=>{
                            let idx = sig.index;
                            console.log(idx);
                            _services.MultiSig.participants[idx].signed = true;
                        });
                        console.log('setting status to participants');
                        this.status = 'Waiting for participant signatures...';
                        _mithrilDefault.default.redraw();
                    } else if (escrows['partially-witnessed-events'].length > 0) {
                        this.status = 'Waiting for witness receipts...';
                        _mithrilDefault.default.redraw();
                    } else {
                        _services.MultiSig.participants.forEach((sig)=>{
                            sig.signed = true;
                        });
                        _services.KERI.listIdentifiers().then((identifiers)=>{
                            let icp = identifiers.find((e)=>e.prefix === _services.MultiSig.currentEvent['i']
                            );
                            if (icp.group.accepted) this.status = 'Inception Complete';
                            else this.status = 'Failed: Event Timeout';
                            _mithrilDefault.default.redraw();
                        }).catch((err)=>{
                            console.log('listIdentifiers', err);
                        });
                        return;
                    }
                    setTimeout(waitForSignatures, 2000);
                }).catch((err)=>{
                    reject();
                    console.log('getContacts', err);
                });
            }, 2000);
        });
    }
    initiateGroupInception() {
        let aids = _services.MultiSig.participants.map((obj)=>{
            return obj.id;
        });
        let inceptData = {
            aids: [
                this.default.prefix,
                ...aids
            ],
            toad: 3,
            wits: _services.Witnesses.witnesses[this.wits]
        };
        if (!this.fractionallyWeighted) {
            let sith = this.numSigners.toString();
            inceptData.isith = sith;
            inceptData.nsith = sith;
        }
        if (this.fractionallyWeighted) {
            let vals = _services.MultiSig.participants.map((obj)=>{
                return obj.weight;
            });
            vals.splice(0, 0, this.weight);
            let sith = vals.join(',');
            inceptData.isith = sith;
            inceptData.nsith = sith;
        }
        _services.MultiSig.participants.splice(0, 0, {
            id: this.default.prefix,
            alias: this.default.name,
            weight: this.weight,
            signed: true
        });
        _services.KERI.initiateGroupInception(this.groupAlias, inceptData).then((incept)=>{
            this.status = 'Event Submitted';
            _services.MultiSig.currentEvent = incept;
            this.ensureMultiSigSigned();
        }).catch((err)=>{
            this.status = 'Failed: Invalid Event';
            console.log('initiateGroupInception', err);
        });
    }
    view(vnode) {
        return _mithrilDefault.default('[', null, this.currentState === 'configure-multi-sig-index' && _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _secureMessagingPngDefault.default,
            style: {
                width: '268px',
                margin: '4rem 0 1rem 0'
            }
        }), _mithrilDefault.default("h3", null, "Configure Multi-Sig Group"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0'
            }
        }, "If you are seeing this, it is because you have verified contacts and can now configure the multi-sig group. You will now be tasked with creating the multi-sig group. Once this is completed, make sure that all members of the multi-sig group are available to sign the inception event of the multisig identifier."), _mithrilDefault.default("div", {
            class: "flex flex-justify-end"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: ()=>{
                this.currentState = 'create-group-alias';
            }
        }))), this.currentState === 'create-group-alias' && _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "Create Your Multi-Sig Group Alias"), _mithrilDefault.default("img", {
            src: _secureMessagingPngDefault.default,
            style: {
                width: '268px',
                margin: '4rem 0 2rem 0'
            }
        }), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }, "The alias should be an easy to remember name for your multi-sig group."), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }, "What would you like your group's alias to be?"), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            fluid: true,
            value: this.groupAlias,
            oninput: (e)=>{
                this.groupAlias = e.target.value;
            }
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-between",
            style: {
                marginTop: '4rem'
            }
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: ()=>{
                this.currentState = 'configure-multi-sig-index';
            }
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            disabled: !this.groupAlias,
            onclick: ()=>{
                this.currentState = 'configure-multisig-group';
            }
        }))), this.currentState === 'configure-multisig-group' && _mithrilDefault.default('[', null, _mithrilDefault.default("h3", {
            style: {
                marginBottom: '2rem'
            }
        }, "Configure Multi-Sig Group"), _mithrilDefault.default("p", {
            class: "p-tag-bold"
        }, "Select your witness pool:"), _mithrilDefault.default(_components.Select, {
            value: this.wits,
            options: _services.Witnesses.witnessPools,
            style: {
                width: '300px'
            },
            selectedChange: (wits)=>{
                this.wits = wits;
            }
        }), _mithrilDefault.default("p", {
            class: "p-tag-bold"
        }, "Are your signatures fractionally weighted?"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "ex. Each signer equals 1/3 of the group."), _mithrilDefault.default("div", {
            class: "flex flex-align-center"
        }, _mithrilDefault.default("div", {
            class: "flex flex-align-center",
            style: {
                marginRight: '2rem'
            }
        }, _mithrilDefault.default(_components.Radio, {
            id: "weighted-yes",
            name: "weighted",
            checked: this.fractionallyWeighted,
            onclick: ()=>{
                this.fractionallyWeighted = true;
            }
        }), _mithrilDefault.default("label", {
            class: "font-weight--bold font-color--battleship",
            for: "weighted-yes"
        }, "Yes")), _mithrilDefault.default("div", {
            class: "flex flex-align-center"
        }, _mithrilDefault.default(_components.Radio, {
            id: "weighted-no",
            name: "weighted",
            checked: !this.fractionallyWeighted,
            onclick: ()=>{
                this.fractionallyWeighted = false;
            }
        }), _mithrilDefault.default("label", {
            class: "font-weight--bold font-color--battleship",
            for: "weighted-no"
        }, "No"))), _mithrilDefault.default("div", {
            class: "flex",
            style: {
                alignItems: 'center',
                margin: '1rem 0'
            }
        }, _mithrilDefault.default(_components.Checkbox, {
            checked: true,
            disabled: true
        }), _mithrilDefault.default("label", {
            class: "font-weight--medium font-color--battleship"
        }, "Create Credential Registry")), !this.fractionallyWeighted && _mithrilDefault.default('[', null, _mithrilDefault.default("label", null, _mithrilDefault.default("p", {
            class: "p-tag-bold"
        }, "How many signers are required to sign?")), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            type: "number",
            style: {
                marginBottom: '2rem'
            },
            value: this.numSigners,
            oninput: (e)=>{
                this.numSigners = parseInt(e.target.value);
            }
        })), _mithrilDefault.default("div", {
            class: "flex flex-align-center flex-justify-between"
        }, _mithrilDefault.default("label", {
            class: "font-color--battleship"
        }, _mithrilDefault.default('[', null, _mithrilDefault.default("b", null, "Enter Signers "), _mithrilDefault.default(_components.TextTooltip, {
            label: _mithrilDefault.default("u", null, _mithrilDefault.default("b", null, "(in order):"))
        }, "Order must be consistent (same exact list everytime). If fractionally weighted it should be highest to lowest weight."))), _mithrilDefault.default("div", {
            class: "flex-1"
        }), this.fractionallyWeighted && _mithrilDefault.default("b", {
            class: "font-color--battleship"
        }, "Weight"), _mithrilDefault.default("div", {
            style: {
                width: '48px',
                height: '48px',
                marginLeft: '1rem'
            }
        })), _mithrilDefault.default("div", {
            style: {
                marginBottom: '1rem',
                maxHeight: '320px',
                overflowY: 'auto'
            }
        }, _mithrilDefault.default("div", {
            className: "flex flex-align-center flex-justify-between",
            style: {
                margin: '1rem 0'
            }
        }, _mithrilDefault.default("p", {
            class: "font-color--battleship"
        }, _mithrilDefault.default("b", null, this.default.name), " (Your local identifier)"), _mithrilDefault.default("div", {
            class: "flex-1"
        }), this.fractionallyWeighted && _mithrilDefault.default(_components.TextField, {
            outlined: true,
            style: {
                width: '75px'
            },
            placeholder: "1/3",
            value: this.weight,
            oninput: (e)=>{
                this.weight = e.target.value;
            }
        }), _mithrilDefault.default("div", {
            style: {
                width: '48px',
                height: '48px',
                marginLeft: '1rem'
            }
        })), _services.MultiSig.participants.map((signer, index)=>{
            return _mithrilDefault.default("div", {
                class: "flex flex-align-center flex-justify-between",
                style: {
                    margin: '1rem 0'
                }
            }, _mithrilDefault.default(_components.Select, {
                options: _services.Contacts.list.map((contact)=>{
                    return {
                        label: contact.alias,
                        value: contact.id
                    };
                }),
                selectedChange: (id)=>{
                    let contact = _services.Contacts.filterById(id)[0];
                    signer.id = contact.id;
                    signer.alias = contact.alias;
                }
            }), _mithrilDefault.default("div", {
                class: "flex-1"
            }), this.fractionallyWeighted && _mithrilDefault.default(_components.TextField, {
                outlined: true,
                style: {
                    width: '75px'
                },
                placeholder: "1/3",
                value: signer.weight,
                oninput: (e)=>{
                    signer.weight = e.target.value;
                }
            }), _mithrilDefault.default(_components.IconButton, {
                icon: "close",
                style: {
                    marginLeft: '1rem'
                },
                onclick: ()=>{
                    this.signers.splice(index, 1);
                }
            }));
        })), _mithrilDefault.default(_components.Button, {
            raised: true,
            class: "button--no-transform button--gray",
            label: "Add Another",
            iconLeading: "add",
            onclick: ()=>{
                _services.MultiSig.participants.push({
                    id: '',
                    alias: '',
                    weight: '',
                    signed: false
                });
            }
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-between",
            style: {
                marginTop: '4rem'
            }
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: ()=>{
                this.currentState = 'create-group-alias';
            }
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            disabled: _services.MultiSig.participants.filter((signer)=>{
                return signer.id !== '';
            }).length < 1,
            onclick: ()=>{
                this.currentState = 'review-and-confirm';
            }
        }))), this.currentState === 'review-and-confirm' && _mithrilDefault.default('[', null, _mithrilDefault.default("h3", {
            style: {
                marginBottom: '2rem'
            }
        }, "Review and Confirm"), _mithrilDefault.default("p", {
            class: "font-weight--bold font-color--battleship"
        }, "Group Alias"), _mithrilDefault.default("div", {
            class: "uneditable-value"
        }, this.groupAlias), _mithrilDefault.default("h4", null, "Witness Pool:"), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            fluid: true,
            value: _services.Witnesses.witnessPools.find((p)=>p.value = this.wits
            ).label
        }), _mithrilDefault.default("p", {
            class: "font-color--battleship",
            style: {
                margin: '2rem 0'
            }
        }, "Review signers to make sure the list is complete."), _mithrilDefault.default("p", {
            class: "font-weight--bold font-color--battleship"
        }, "Signers (in order):"), _mithrilDefault.default("div", {
            class: "flex flex-align-center flex-justify-between",
            style: {
                margin: '1rem 0'
            }
        }, _mithrilDefault.default("div", {
            class: "flex-1 uneditable-value",
            style: {
                marginRight: '1rem'
            }
        }, this.default.name), this.fractionallyWeighted && _mithrilDefault.default("div", {
            class: "uneditable-value"
        }, this.weight)), _services.MultiSig.participants.map((signer)=>{
            return _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
                class: "flex flex-align-center flex-justify-between",
                style: {
                    margin: '1rem 0'
                }
            }, _mithrilDefault.default("div", {
                class: "flex-1 uneditable-value",
                style: {
                    marginRight: '1rem'
                }
            }, signer.alias), this.fractionallyWeighted && _mithrilDefault.default("div", {
                class: "uneditable-value"
            }, signer.weight)));
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-between",
            style: {
                marginTop: '4rem'
            }
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: ()=>{
                this.currentState = 'create-group-alias';
            }
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Complete",
            onclick: ()=>{
                this.initiateGroupInception();
                this.currentState = 'setup-complete';
            }
        }))), this.currentState === 'setup-complete' && _mithrilDefault.default(EventDetails, {
            groupAlias: this.groupAlias,
            status: this.status,
            back: ()=>{
                this.currentState = 'event-log';
            },
            continue: vnode.attrs.end
        }));
    }
}
class EventDetails {
    constructor(vnode1){
    /*
     *
     * We have the AIDS.  Use them to get the KELs and to determine
     * the order of the signatures so we can match up with Signatures.
     *
     * */ }
    view(vnode2) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, vnode2.attrs.groupAlias, " Inception:"), _mithrilDefault.default("h4", {
            class: "p-tag",
            style: {
                margin: '0 0 0 0'
            }
        }, "Status: ", vnode2.attrs.status), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 1rem 4.5rem'
            }
        }, "Name:"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 1rem 1rem 0'
            }
        }, "Signed?")), _mithrilDefault.default("div", {
            style: {
                height: '350px',
                overflowY: 'scroll',
                margin: '0 0 1rem 0'
            }
        }, _services.MultiSig.participants.map((sig, i)=>{
            return _mithrilDefault.default("div", {
                class: "flex flex-justify-evenly ",
                style: {
                    alignItems: 'center',
                    margin: '0 0 1rem 0',
                    width: '100%'
                }
            }, _mithrilDefault.default("h4", {
                class: "p-tag",
                style: {
                    margin: '0 0 0 0'
                }
            }, `#${i + 1}`), _mithrilDefault.default("div", {
                class: "flex flex-align-center",
                style: {
                    width: '55%',
                    backgroundColor: 'white',
                    height: '40px',
                    borderRadius: '3px'
                }
            }, _mithrilDefault.default("p", {
                class: "p-tag-bold",
                style: {
                    margin: '0 0 0 .5rem',
                    fontSize: '80%'
                }
            }, sig.alias)), _mithrilDefault.default("div", {
                style: {
                    margin: '0 0 0 .5rem'
                }
            }, sig.signed ? _mithrilDefault.default("img", {
                src: _greenCheckMarkSvgDefault.default,
                style: {
                    width: '80%'
                }
            }) : _mithrilDefault.default("img", {
                src: _redXSvgDefault.default,
                style: {
                    width: '80%'
                }
            })));
        })), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: vnode2.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: vnode2.attrs.continue
        })));
    }
}
module.exports = ConfigureMultiSigSet;

},{"mithril":"1zcoP","../../../src/app/components":"iBBNK","../../../src/app/services":"i9qdV","./configure-multi-sig-set.scss":"7CWZP","../../../src/assets/img/secure-messaging.png":"6ZVTs","../../../src/assets/img/green-check-mark.svg":"lfenU","../../../src/assets/img/red-x.svg":"8QwFL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7CWZP":[function() {},{}],"6ZVTs":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "secure-messaging.d6ec66cb.png" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"lfenU":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "green-check-mark.b804060a.svg" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"8QwFL":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "red-x.3cf8a3c1.svg" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"7wdof":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../../src/app/components");
var _services = require("../../../src/app/services");
var _createIdentifierPng = require("../../../src/assets/img/create-identifier.png");
var _createIdentifierPngDefault = parcelHelpers.interopDefault(_createIdentifierPng);
var _configureIdentifierPng = require("../../../src/assets/img/configure-identifier.png");
var _configureIdentifierPngDefault = parcelHelpers.interopDefault(_configureIdentifierPng);
var _approveRequestPng = require("../../../src/assets/img/approve-request.png");
var _approveRequestPngDefault = parcelHelpers.interopDefault(_approveRequestPng);
var _uploadImagePng = require("../../../src/assets/img/upload-image.png");
var _uploadImagePngDefault = parcelHelpers.interopDefault(_uploadImagePng);
class CreateYourAID {
    constructor(){
        this.currentState = 'welcome';
        this.alias = '';
        this.aliasPhoto = null;
        this.wits = 'local';
    }
    createAID(vnode) {
        let wits = _services.Witnesses.witnesses[this.wits];
        _services.KERI.createIdentifier(this.alias, wits).then(()=>{
            _services.Profile.loadIdentifiers();
            _services.KERI.listIdentifiers().then((ids)=>{
                if (ids.length === 1) {
                    _services.Profile.setDefaultAID(ids[0]);
                    vnode.attrs.end();
                }
            }).catch((err)=>{
                console.log('listIdentfiers', err);
            });
        }).catch((err)=>{
            console.log('createIdentifier', err);
        });
    }
    view(vnode1) {
        return _mithrilDefault.default('[', null, this.currentState === 'welcome' && _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, vnode1.attrs.welcome ? vnode1.attrs.welcome.title : 'Welcome To KEEP'), _mithrilDefault.default("img", {
            src: _createIdentifierPngDefault.default,
            style: {
                display: 'block',
                margin: '5rem auto 0',
                width: '270px'
            }
        }), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '4rem 0 4rem 0'
            }
        }, vnode1.attrs.welcome ? vnode1.attrs.welcome.paragraph : _mithrilDefault.default('[', null, "This software is designed to help you complete verification of authorized representatives and also as a storage place for all of your credentials.", _mithrilDefault.default("br", null), _mithrilDefault.default("br", null), "The first step will be to create your Delegated AID, then you will receive a short tutorial, you may skip the tutorial by selecting the \u201Cskip\u201D button.")), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Skip",
            onclick: ()=>{
                this.currentState = 'create-your-alias';
            }
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: ()=>{
                this.currentState = 'creating-aid';
            }
        }))), this.currentState === 'creating-aid' && _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, vnode1.attrs.creatingAID ? vnode1.attrs.creatingAID.title : 'Creating Your AID'), _mithrilDefault.default("img", {
            src: _createIdentifierPngDefault.default,
            style: {
                display: 'block',
                margin: '5rem auto 0',
                width: '270px'
            }
        }), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '4rem 0 4rem 0'
            }
        }, vnode1.attrs.creatingAID ? vnode1.attrs.creatingAID.paragraph : _mithrilDefault.default('[', null, "In order to provide authorization, you will first have to create your own AID within the software and be verified as an authorized representative.")), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Skip",
            onclick: ()=>{
                this.currentState = 'create-your-alias';
            }
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: ()=>{
                this.currentState = 'steps-to-create';
            }
        }))), this.currentState === 'steps-to-create' && _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, vnode1.attrs.stepsToCreate ? vnode1.attrs.stepsToCreate.title : 'Steps to Create Your AID'), _mithrilDefault.default("img", {
            src: _approveRequestPngDefault.default,
            style: {
                display: 'block',
                margin: '5rem auto 0',
                width: '244px'
            }
        }), _mithrilDefault.default("ol", {
            class: "styled-ol",
            style: {
                margin: '2rem 0 4rem 0'
            }
        }, _mithrilDefault.default("li", null, "Configure your AID"), _mithrilDefault.default("li", null, "Create an Alias"), _mithrilDefault.default("li", null, "Select a photo for your Alias")), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Skip",
            onclick: ()=>{
                this.currentState = 'create-your-alias';
            }
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: ()=>{
                this.currentState = 'create-your-alias';
            }
        }))), this.currentState === 'create-your-alias' && _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "Create Your Alias"), _mithrilDefault.default("img", {
            src: _configureIdentifierPngDefault.default,
            style: {
                display: 'block',
                margin: '5rem auto 0',
                width: '172px'
            }
        }), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                marginTop: '2rem',
                marginBottom: '2rem'
            }
        }, vnode1.attrs.createYourAlias ? vnode1.attrs.createYourAlias.paragraph : 'The alias should be an easy to remember name for your Delegated AID.', _mithrilDefault.default("br", null), _mithrilDefault.default("br", null), _mithrilDefault.default("p", {
            className: "p-tag-bold"
        }, "What would you like your alias to be?")), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            fluid: true,
            style: {
                margin: '0 0 0 0'
            },
            oninput: (e)=>{
                this.alias = e.target.value;
            },
            value: this.alias
        }), _mithrilDefault.default("p", {
            className: "p-tag-bold"
        }, "Select your witness pool:"), _mithrilDefault.default(_components.Select, {
            value: this.wits,
            style: {
                width: '300px',
                margin: '0 0 3.5rem 0'
            },
            options: _services.Witnesses.witnessPools,
            selectedChange: (wits)=>{
                this.wits = wits;
            }
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: ()=>{
                this.currentState = 'steps-to-create';
            }
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            disabled: this.alias.length === 0,
            onclick: ()=>{
                this.currentState = 'select-photo';
            }
        }))), this.currentState === 'select-photo' && _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _uploadImagePngDefault.default,
            style: {
                width: '172px'
            }
        }), _mithrilDefault.default("h3", {
            style: {
                margin: '2rem 0'
            }
        }, "Select a Photo for the Alias"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 0 0'
            }
        }, "If you would like your alias to have a photo instead of the default icon, please upload a photo."), _mithrilDefault.default("div", {
            class: "flex flex-justify-evenly",
            style: {
                alignItems: 'center',
                margin: '4rem 0 4rem 0'
            }
        }, _mithrilDefault.default('[', null, _mithrilDefault.default("input", {
            type: "file",
            style: {
                margin: '4rem 0 4rem 0'
            },
            id: "actual-upload",
            onchange: (e)=>{
                this.aliasPhoto = URL.createObjectURL(e.target.files[0]);
            },
            hidden: true
        }), _mithrilDefault.default("label", {
            for: "actual-upload",
            style: {
                backgroundColor: '#c4c4c4',
                padding: '5px 25px 0px 25px',
                color: 'white',
                // width: '81px',
                fontSize: '250%',
                cursor: 'pointer'
            }
        }, "+")), _mithrilDefault.default("p", {
            style: {
                fontSize: '150%',
                color: '#737b7d'
            }
        }, "Upload Photo")), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: ()=>{
                this.currentState = 'create-your-alias';
            }
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            disabled: !this.aliasPhoto,
            onclick: ()=>{
                this.currentState = 'review-and-confirm';
            }
        }))), this.currentState === 'review-and-confirm' && _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "Review and Confirm"), _mithrilDefault.default("div", {
            class: "flex flex-justify-between",
            style: {
                alignItems: 'baseline',
                margin: '2rem 0'
            }
        }, _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Alias:"), _mithrilDefault.default(_components.Button, {
            class: "button--gray button--small button--no-transform",
            raised: true,
            label: "Edit",
            onclick: ()=>{
                this.currentState = 'create-your-alias';
            }
        })), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            fluid: true,
            value: this.alias
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-between",
            style: {
                alignItems: 'baseline',
                margin: '2rem 0'
            }
        }, _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Alias Photo:"), _mithrilDefault.default(_components.Button, {
            class: "button--gray button--small button--no-transform",
            raised: true,
            label: "Edit",
            onclick: ()=>{
                this.currentState = 'select-photo';
            }
        })), _mithrilDefault.default("img", {
            src: this.aliasPhoto,
            style: {
                height: '100px',
                marginBottom: '4rem',
                width: '100px'
            }
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-end"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: (e)=>{
                this.createAID(vnode1);
            }
        }))));
    }
}
module.exports = CreateYourAID;

},{"mithril":"1zcoP","../../../src/app/components":"iBBNK","../../../src/app/services":"i9qdV","../../../src/assets/img/create-identifier.png":"7RAOR","../../../src/assets/img/configure-identifier.png":"cwAYb","../../../src/assets/img/approve-request.png":"2YmqE","../../../src/assets/img/upload-image.png":"eplTl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7RAOR":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "create-identifier.54b7faed.png" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"2YmqE":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "approve-request.34eaf5ac.png" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"6SUrR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../../src/app/components");
var _services = require("../../../src/app/services");
var _createYourPasscodePng = require("../../../src/assets/img/create-your-passcode.png");
var _createYourPasscodePngDefault = parcelHelpers.interopDefault(_createYourPasscodePng);
var _passcodePng = require("../../../src/assets/img/passcode.png");
var _passcodePngDefault = parcelHelpers.interopDefault(_passcodePng);
var _waitPng = require("../../../src/assets/img/wait.png");
var _waitPngDefault = parcelHelpers.interopDefault(_waitPng);
class WelcomeToKEEP {
    view(vnode) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "Welcome to KEEP"), _mithrilDefault.default("div", {
            class: "flex flex-justify-center",
            style: {
                margin: '4.5rem 0'
            }
        }, _mithrilDefault.default("img", {
            src: _createYourPasscodePngDefault.default,
            style: {
                width: '205px'
            }
        })), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }, "To get started and enter the software, you will need to generate a passcode.", _mithrilDefault.default("br", null), _mithrilDefault.default("br", null), "Make sure to store your password somewhere safe: a password management app, or printed and in a safe deposit box."), _mithrilDefault.default("div", {
            class: "flex flex-justify-end"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--no-transform button--big",
            raised: true,
            label: "Continue",
            onclick: vnode.attrs.continue
        })));
    }
}
class GeneratePasscode {
    constructor(){
        this.passcode = '';
        this.copied = false;
        this.savePassModalOpen = false;
        this.generatePasscode();
    }
    copyPasscode() {
        this.copied = false;
        navigator.clipboard.writeText(this.passcode).then(()=>{
            this.copied = true;
            _mithrilDefault.default.redraw();
        }, ()=>{
            this.copied = false;
            _mithrilDefault.default.redraw();
        });
    }
    generatePasscode() {
        this.copied = false;
        _services.KERI.generatePasscode().then((resp)=>{
            this.passcode = resp.passcode;
        }).catch((err)=>{
            console.log('generatePasscode', err);
        });
    }
    view(vnode1) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default(_components.Modal, {
            isOpen: this.savePassModalOpen,
            onClose: ()=>{
                this.savePassModalOpen = false;
            },
            style: {
                width: '680px'
            },
            header: _mithrilDefault.default("h1", {
                class: "font-weight--medium"
            }, "Wait! Did you save your passcode?"),
            content: _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
                class: "flex flex-align-center flex-justify-center"
            }, _mithrilDefault.default("img", {
                style: {
                    marginRight: '2rem'
                },
                src: _waitPngDefault.default
            }), _mithrilDefault.default("h3", {
                class: "font-weight--light font-color--battleship",
                style: {
                    maxWidth: '280px'
                }
            }, "If you forget your passcode, you lose access to your wallet. Make sure that you store it someplace safe."))),
            footer: _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
                class: "flex flex-justify-center",
                style: {
                    marginTop: '2rem'
                }
            }, _mithrilDefault.default(_components.Button, {
                raised: true,
                class: "button--big button--extraPadding",
                label: "I Saved My Passcode",
                onclick: ()=>{
                    this.savePassModalOpen = false;
                    vnode1.attrs.continue();
                }
            })))
        }), _mithrilDefault.default("h3", null, "Generate Your Passcode"), _mithrilDefault.default("div", {
            class: "flex flex-justify-center",
            style: {
                margin: '3rem 0 2rem 0'
            }
        }, _mithrilDefault.default("img", {
            src: _createYourPasscodePngDefault.default,
            style: {
                width: '205px'
            }
        })), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '0 0 2.5rem 0'
            }
        }, "Generate your passcode here or in your password management app such as 1Password or Last Pass to encrypt your desktop software and then copy into the following screen."), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            fluid: true,
            placeholder: "xxxx-xxxxx-xxxxx-xxxx-xxxxx",
            value: this.passcode,
            oninput: (e)=>{
                this.passcode = e.target.value;
            },
            iconTrailing: {
                icon: 'content_copy',
                onclick: ()=>{
                    this.copyPasscode();
                }
            }
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-between",
            style: {
                margin: '2.5rem 0 3rem 0'
            }
        }, _mithrilDefault.default("p", {
            class: "font-color--green font-weight--medium"
        }, this.copied ? 'Passcode copied!' : _mithrilDefault.default("br", null)), _mithrilDefault.default(_components.Button, {
            raised: true,
            class: "button--no-transform button--gray button--big",
            label: "Generate New",
            onclick: ()=>{
                this.generatePasscode();
            }
        })), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            raised: true,
            class: "button--no-transform button--gray-dk button--big",
            label: "Go Back",
            onclick: vnode1.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            raised: true,
            class: "button--no-transform button--big",
            label: "Continue",
            onclick: ()=>{
                this.savePassModalOpen = true;
            }
        })));
    }
}
class EnterPasscode {
    constructor(){
        this.passcode = '';
        this.showPasscode = false;
    }
    initializeAgent(vnode2) {
        _services.KERI.initializeAgent(`keep${"5723"}`, this.passcode).then(vnode2.attrs.continue).catch((err)=>{
            console.log('initializeAgent', err);
        });
    }
    view(vnode3) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "Please Enter Your Passcode"), _mithrilDefault.default("div", {
            class: "flex flex-justify-center",
            style: {
                margin: '5rem 0 4rem 0'
            }
        }, _mithrilDefault.default("img", {
            src: _passcodePngDefault.default,
            style: {
                width: '205px'
            }
        })), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '0 0 4rem 0'
            }
        }, "You can find your 22-character passcode by referring back to your storage spot (1Password, Last Pass, Safe Deposit Box) and entering it into the box below."), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            fluid: true,
            type: this.showPasscode ? 'text' : 'password',
            value: this.passcode,
            oninput: (e)=>{
                this.passcode = e.target.value;
            },
            iconTrailing: {
                icon: this.showPasscode ? 'visibility' : 'visibility_off',
                onclick: ()=>{
                    this.showPasscode = !this.showPasscode;
                }
            }
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-between",
            style: {
                marginTop: '4rem'
            }
        }, _mithrilDefault.default(_components.Button, {
            raised: true,
            class: "button--no-transform button--gray-dk button--big",
            label: "Go Back",
            onclick: vnode3.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            raised: true,
            class: "button--no-transform button--big",
            label: "Continue",
            onclick: ()=>{
                this.initializeAgent(vnode3);
            }
        })));
    }
}
class CreateYourPasscode {
    constructor(){
        this.currentState = 'welcome';
    }
    view(vnode4) {
        return _mithrilDefault.default('[', null, this.currentState === 'welcome' && _mithrilDefault.default(WelcomeToKEEP, {
            continue: ()=>{
                this.currentState = 'create-passcode';
            }
        }), this.currentState === 'create-passcode' && _mithrilDefault.default(GeneratePasscode, {
            back: ()=>{
                this.currentState = 'welcome';
            },
            continue: ()=>{
                this.currentState = 'enter-passcode';
            }
        }), this.currentState === 'enter-passcode' && _mithrilDefault.default(EnterPasscode, {
            back: ()=>{
                this.currentState = 'create-passcode';
            },
            continue: vnode4.attrs.end
        }));
    }
}
module.exports = CreateYourPasscode;

},{"mithril":"1zcoP","../../../src/app/components":"iBBNK","../../../src/app/services":"i9qdV","../../../src/assets/img/create-your-passcode.png":"3PgQv","../../../src/assets/img/passcode.png":"c9yf6","../../../src/assets/img/wait.png":"2xdb0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2xdb0":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "wait.3e4bbb6a.png" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"7BPNb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../../src/app/components");
var _approveRequestPng = require("../../../src/assets/img/approve-request.png");
var _approveRequestPngDefault = parcelHelpers.interopDefault(_approveRequestPng);
var _githubLogoPng = require("../../../src/assets/img/github-logo.png");
var _githubLogoPngDefault = parcelHelpers.interopDefault(_githubLogoPng);
class IssueCreds {
    constructor(vnode){
    }
    view(vnode1) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "Issue Credentials"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Contact"), _mithrilDefault.default(_components.TextField, {
            filled: true,
            fluid: true,
            placeholder: "Jane Smith",
            iconTrailing: {
                icon: 'search'
            }
        }), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Credentials"), _mithrilDefault.default(_components.TextField, {
            filled: true,
            fluid: true,
            placeholder: "QAR for QVI Corp.",
            iconTrailing: {
                icon: 'arrow_drop_down'
            }
        }), _mithrilDefault.default("br", null), _mithrilDefault.default("br", null), _mithrilDefault.default("br", null), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            raised: true,
            class: "button--no-transform button--gray-dk button--big",
            label: "Go Back",
            onclick: vnode1.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Submit",
            onclick: vnode1.attrs.continue
        })));
    }
}
class CredsAreIssued {
    constructor(vnode2){
    }
    view(vnode3) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _approveRequestPngDefault.default,
            style: {
                width: '50%',
                margin: '1.5rem 0 2rem 0'
            }
        }), _mithrilDefault.default("h3", null, "Credentials are Issued"), _mithrilDefault.default("div", {
            class: "flex flex-justify-between",
            style: {
                alignItems: 'center'
            }
        }, _mithrilDefault.default("img", {
            src: _githubLogoPngDefault.default,
            style: {
                width: '10%',
                height: '10%',
                margin: '0 0 0 0'
            }
        }), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Octocat verified at 1:23pm on 12/7/21")), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "The GAR approves the issuance of Jane Smith\u2019s vLEI Credential. The vLEI Credential is now in their credential wallet."), _mithrilDefault.default("br", null), _mithrilDefault.default("div", {
            class: "flex flex-justify-end"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Close",
            onclick: vnode3.attrs.end
        })));
    }
}
class CredentialIssuance {
    constructor(){
        this.currentState = 'issue-creds';
    }
    view(vnode4) {
        return _mithrilDefault.default('[', null, this.currentState === 'issue-creds' && _mithrilDefault.default(IssueCreds, {
            back: vnode4.attrs.end,
            continue: ()=>{
                this.currentState = 'creds-issued';
            }
        }), this.currentState === 'creds-issued' && _mithrilDefault.default(CredsAreIssued, {
            end: vnode4.attrs.end
        }));
    }
}
module.exports = CredentialIssuance;

},{"mithril":"1zcoP","../../../src/app/components":"iBBNK","../../../src/assets/img/approve-request.png":"2YmqE","../../../src/assets/img/github-logo.png":"91eSZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7BKx6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../../src/app/components");
class RevokeRequest {
    constructor(vnode){
    }
    view(vnode1) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "Request Credential Revocation"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Please select the contact and credentials you would like to revoke."), _mithrilDefault.default(_components.TextField, {
            style: {
                backgroundColor: 'rgba(0, 0, 0, 0.04)',
                height: '3rem',
                margin: '0 0 1.5rem 0',
                width: '75%'
            },
            filled: true,
            fluid: true,
            placeholder: "ACME" // oninput={(e) => {
            ,
            iconLeading: {
                icon: 'search'
            }
        }), _mithrilDefault.default("div", null, _mithrilDefault.default(_components.Card, {
            class: "card--active",
            style: {
                margin: '2rem 0 2rem 0',
                height: '6rem'
            }
        }, _mithrilDefault.default("p", null, "Paul Smith"), _mithrilDefault.default("p", null, "AVR for ACME Corp.")), _mithrilDefault.default(_components.Card, {
            style: {
                margin: '2rem 0 2rem 0',
                height: '6rem'
            }
        }, _mithrilDefault.default("p", null, "Judith Williams"), _mithrilDefault.default("p", null, "AVR for ACME Corp."))), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            vnode: vnode1.attrs.end
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: vnode1.attrs.continue
        })));
    }
}
class ConfirmRevoke {
    constructor(vnode2){
    }
    view(vnode3) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "Request Credential Revocation"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "On submission, a signed request has been sent to the requested user for their review. "), _mithrilDefault.default("div", null, _mithrilDefault.default("p", null, "Contact: Paul Smith"), _mithrilDefault.default("p", null, "Credential: LAR for ACME Corp."), _mithrilDefault.default("br", null), _mithrilDefault.default("br", null)), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: vnode3.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Submit",
            onclick: vnode3.attrs.continue
        })));
    }
}
class RevokeSubmitted {
    constructor(vnode4){
    }
    view(vnode5) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "Revocation Submitted!"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "You will be notified when the credential revocation is completed."), _mithrilDefault.default("div", null, _mithrilDefault.default("p", null, "Contact: Paul Smith"), _mithrilDefault.default("p", null, "Credential: LAR for ACME Corp."), _mithrilDefault.default("br", null), _mithrilDefault.default("br", null)), _mithrilDefault.default("div", {
            class: "flex flex-justify-end"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Close",
            onclick: vnode5.attrs.end
        })));
    }
}
class CredentialRevocation {
    constructor(){
        this.currentState = 'revoke-request';
    }
    view(vnode6) {
        return _mithrilDefault.default('[', null, this.currentState === 'revoke-request' && _mithrilDefault.default(RevokeRequest, {
            end: vnode6.attrs.end,
            continue: ()=>{
                this.currentState = 'confirm-revoke';
            }
        }), this.currentState === 'confirm-revoke' && _mithrilDefault.default(ConfirmRevoke, {
            back: ()=>{
                this.currentState = 'revoke-request';
            },
            continue: ()=>{
                this.currentState = 'revoke-submitted';
            }
        }), this.currentState === 'revoke-submitted' && _mithrilDefault.default(RevokeSubmitted, {
            end: vnode6.attrs.end
        }));
    }
}
module.exports = CredentialRevocation;

},{"mithril":"1zcoP","../../../src/app/components":"iBBNK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"giGND":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../../src/app/components");
var _services = require("../../../src/app/services");
var _addNewContactsPng = require("../../../src/assets/img/add-new-contacts.png");
var _addNewContactsPngDefault = parcelHelpers.interopDefault(_addNewContactsPng);
var _responseMessagePng = require("../../../src/assets/img/response-message.png");
var _responseMessagePngDefault = parcelHelpers.interopDefault(_responseMessagePng);
var _uploadFilePng = require("../../../src/assets/img/upload-file.png");
var _uploadFilePngDefault = parcelHelpers.interopDefault(_uploadFilePng);
var _waitPng = require("../../../src/assets/img/wait.png");
var _waitPngDefault = parcelHelpers.interopDefault(_waitPng);
class WaitModal {
    view(vnode) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default(_components.Modal, {
            isOpen: vnode.attrs.isOpen,
            backdropClose: false,
            onClose: vnode.attrs.onClose,
            style: {
                width: '560px'
            },
            header: _mithrilDefault.default("h3", {
                class: "font-weight--medium"
            }, "Wait! Did you complete Identity Assurance?"),
            content: _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
                class: "flex flex-align-center flex-justify-center"
            }, _mithrilDefault.default("img", {
                style: {
                    width: '150px',
                    margin: '2rem 5rem 0 0'
                },
                src: _waitPngDefault.default
            }), _mithrilDefault.default("p", {
                class: "font-weight--light font-color--battleship",
                style: {
                    lineHeight: '2',
                    letterSpacing: '0.15px'
                }
            }, "Verification is a two-step process. Before authenticating, make sure that Identity Assurance is completed."))),
            footer: _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
                class: "flex flex-justify-center",
                style: {
                    marginTop: '3rem'
                }
            }, _mithrilDefault.default(_components.Button, {
                raised: true,
                class: "button--big button--extraPadding",
                label: "Identity Assurance is Done",
                onclick: vnode.attrs.onClose
            })))
        }));
    }
}
class StepsToAuthenticate {
    constructor(vnode1){
        this.waitModalOpen = true;
        _services.Profile.isLead = true;
    }
    view(vnode2) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default(WaitModal, {
            isOpen: this.waitModalOpen,
            onClose: ()=>{
                this.waitModalOpen = false;
            }
        }), _mithrilDefault.default("h3", null, "Identity Authentication"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, vnode2.attrs.steps ? vnode2.attrs.steps.paragraph : _mithrilDefault.default('[', null, "This module will take you through the steps of how to authenticate a user's identity. Below are the steps for how to complete the process:")), _mithrilDefault.default("h3", null, "Steps to Identity Authentication"), _mithrilDefault.default("ol", {
            class: "styled-ol",
            style: {
                margin: '2rem 0'
            }
        }, vnode2.attrs.steps ? vnode2.attrs.steps.list.map((element)=>{
            return _mithrilDefault.default("li", null, element);
        }) : _mithrilDefault.default('[', null, _mithrilDefault.default("li", null, "Join a Video Call"), _mithrilDefault.default("li", null, "Use an OOBI protocol to obtain the user's AID"), _mithrilDefault.default("li", null, "Use an OOBI protocol to share your AID"), _mithrilDefault.default("li", null, "Obtain and sign a Challenge Message"), _mithrilDefault.default("li", null, "Generate and send a Challenge Message"), _mithrilDefault.default("li", null, "User signs and returns Challenge Message"), _mithrilDefault.default("li", null, "You verify signature and issue credentials"))), _mithrilDefault.default("div", {
            class: "flex flex-justify-end"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: vnode2.attrs.continue
        })));
    }
}
class JoinVideoCall {
    view(vnode3) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "Initiate a Video Call"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "In order to start the authentication process, you will need to complete an real-time OOBI session in which you and the user you wish to verify are present, You will accept their OOBI on a Video Call so that you can receive their identifying information."), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: vnode3.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: vnode3.attrs.continue
        })));
    }
}
class ResolveOOBI {
    constructor(){
        this.alias = '';
        this.oobi = {
            alias: '',
            url: ''
        };
    }
    resolveOOBI(vnode4) {
        _services.KERI.listIdentifiers().then((identifiers)=>{
            this.alias = identifiers[0].name;
            _services.KERI.resolveOOBI(this.alias, this.oobi.alias, this.oobi.url).then(()=>{
                vnode4.attrs.continue();
            }).catch((err)=>{
                console.log('resolveOOBI', err);
            });
        }).catch((err)=>{
            console.log('listIdentifiers', err);
        });
    }
    view(vnode5) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _addNewContactsPngDefault.default,
            style: {
                width: '40%',
                margin: '1.5rem 0 0 0'
            }
        }), _mithrilDefault.default("h3", null, "Accept", ' ', _mithrilDefault.default(_components.TextTooltip, {
            label: _mithrilDefault.default("u", null, "OOBI")
        }, "OOBI is an Out Of Band (meaning outside this software) interaction.")), _mithrilDefault.default("p", {
            class: "p-tag"
        }, vnode5.attrs.acceptOobi ? vnode5.attrs.acceptOobi.paragraph : _mithrilDefault.default('[', null, "While on the Video Call, make sure to obtain the other party's ", _mithrilDefault.default("b", null, "URL and OOBI"), ". When you have both for each party, please press continue.")), _mithrilDefault.default("label", null, vnode5.attrs.acceptOobi ? vnode5.attrs.acceptOobi.alias : _mithrilDefault.default('[', null, _mithrilDefault.default("strong", null, "Alias:"))), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            fluid: true,
            style: {
                margin: '0 0 2rem 0'
            },
            value: this.oobi.alias,
            iconTrailing: {
                icon: 'content_copy'
            },
            oninput: (e)=>{
                this.oobi.alias = e.target.value;
            }
        }), _mithrilDefault.default("label", null, _mithrilDefault.default("strong", null, "URL:")), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            fluid: true,
            style: {
                margin: '0 0 4rem 0'
            },
            iconTrailing: {
                icon: 'content_copy'
            },
            value: this.oobi.url,
            oninput: (e)=>{
                this.oobi.url = e.target.value;
            }
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: vnode5.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            disabled: !this.oobi.alias || !this.oobi.url,
            onclick: ()=>{
                this.resolveOOBI(vnode5);
            }
        })));
    }
}
class SendOOBI {
    constructor(){
        this.oobi = {
            alias: '',
            url: ''
        };
    }
    oninit() {
        _services.KERI.listIdentifiers().then((identifiers)=>{
            this.oobi.alias = identifiers[0].name;
            _services.KERI.getOOBI(identifiers[0].name, 'witness').then((oobi)=>{
                this.oobi.url = oobi.oobis[0];
            }).catch((err)=>{
                console.log('getOOBI', err);
            });
        }).catch((err)=>{
            console.log('listIdentifiers', err);
        });
    }
    view(vnode6) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _addNewContactsPngDefault.default,
            style: {
                width: '40%',
                margin: '1.5rem 0 0 0'
            }
        }), _mithrilDefault.default("h3", null, "Send OOBI"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }, "Copy this OOBI (AID + URL) to share your identifying information and paste it into the ideo Call."), _mithrilDefault.default("label", null, "Alias:"), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            fluid: true,
            iconTrailing: {
                icon: 'content_copy'
            },
            style: {
                margin: '0 0 4rem 0'
            },
            value: this.oobi.alias
        }), _mithrilDefault.default("label", null, "URL:"), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            fluid: true,
            iconTrailing: {
                icon: 'content_copy'
            },
            style: {
                margin: '0 0 4rem 0'
            },
            value: this.oobi.url
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: vnode6.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: vnode6.attrs.continue
        })));
    }
}
class IdentityVerificationInProgress {
    view(vnode7) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _uploadFilePngDefault.default,
            style: {
                width: '50%',
                margin: '1.5rem 0 2rem 0'
            }
        }), _mithrilDefault.default("h3", null, "Identity Verification in Progress"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }, "Remain in the Video Call until the user has resolved your OOBI."), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: vnode7.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: vnode7.attrs.continue
        })));
    }
}
class SignChallengeMessage {
    constructor(){
        this.challengeMessage = '';
    }
    signChallengeMessage(vnode8) {
        _services.KERI.listIdentifiers().then((identifiers)=>{
            _services.KERI.getContacts().then((contacts)=>{
                _services.KERI.signChallengeMessage(identifiers[0].name, contacts[0].id, this.challengeMessage.split(' ')).then(()=>{
                    vnode8.attrs.continue();
                }).catch((err)=>{
                    console.log('signChallengeMessage', err);
                });
            }).catch((err)=>{
                console.log('getContacts', err);
            });
        }).catch((err)=>{
            console.log('listIdentifiers', err);
        });
    }
    view(vnode9) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _responseMessagePngDefault.default,
            style: {
                width: '50%',
                margin: '1.5rem 0 2rem 0'
            }
        }), _mithrilDefault.default("h3", null, "Send Challenge Message"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }, "Enter the 12-word challenge message into the chat and send to the credential issuer."), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            textarea: true,
            fluid: true,
            style: {
                margin: '0 0 4rem 0'
            },
            value: this.challengeMessage,
            oninput: (e)=>{
                this.challengeMessage = e.target.value;
            }
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: vnode9.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: ()=>{
                this.signChallengeMessage(vnode9);
            }
        })));
    }
}
class GenerateChallengeMessage {
    view(vnode10) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _responseMessagePngDefault.default,
            style: {
                width: '50%',
                margin: '1.5rem 0 2rem 0'
            }
        }), _mithrilDefault.default("h3", null, "Generate Challenge Message"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "The Challenge Message generated will be sent for verification purposes."), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: vnode10.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Generate",
            onclick: vnode10.attrs.continue
        })));
    }
}
class CopyChallengeMessage {
    constructor(){
        this.challangeMessage = '';
    }
    oninit() {
        _services.KERI.generateChallengeMessage().then((res)=>{
            this.challangeMessage = res.words.join(' ');
        }).catch((err)=>{
            console.log('generateChallengeMessage', err);
        });
    }
    view(vnode11) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _responseMessagePngDefault.default,
            style: {
                width: '50%',
                margin: '1.5rem 0 2rem 0'
            }
        }), _mithrilDefault.default("h3", null, "Copy Challenge Message"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Copy the Challenge Message into the chat box while on the Video Call."), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            textarea: true,
            fluid: true,
            style: {
                margin: '0 0 4rem 0'
            },
            value: this.challangeMessage
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: vnode11.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: vnode11.attrs.continue
        })));
    }
}
class ChallengeMessageInProgress {
    view(vnode12) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _uploadFilePngDefault.default,
            style: {
                width: '60%',
                margin: '1.5rem 0 2rem 0'
            }
        }), _mithrilDefault.default("h3", null, "Challenge Message in Progress"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "You will be notified when the user signs and returns the Challenge Message."), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: vnode12.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Close",
            onclick: vnode12.attrs.end
        })));
    }
}
class IdentityAuthenticationIssue {
    constructor(){
        this.currentState = 'steps-to-authenticate';
    }
    view(vnode13) {
        return _mithrilDefault.default('[', null, this.currentState === 'steps-to-authenticate' && _mithrilDefault.default(StepsToAuthenticate, {
            steps: vnode13.attrs.steps,
            continue: ()=>{
                this.currentState = 'join-video-call';
            }
        }), this.currentState === 'join-video-call' && _mithrilDefault.default(JoinVideoCall, {
            back: ()=>{
                this.currentState = 'steps-to-authenticate';
            },
            continue: ()=>{
                this.currentState = 'resolve-oobi';
            }
        }), this.currentState === 'resolve-oobi' && _mithrilDefault.default(ResolveOOBI, {
            acceptOobi: vnode13.attrs.acceptOobi,
            back: ()=>{
                this.currentState = 'join-video-call';
            },
            continue: ()=>{
                this.currentState = 'send-oobi';
            }
        }), this.currentState === 'send-oobi' && _mithrilDefault.default(SendOOBI, {
            back: ()=>{
                this.currentState = 'resolve-oobi';
            },
            continue: ()=>{
                this.currentState = 'identity-verification';
            }
        }), this.currentState === 'identity-verification' && _mithrilDefault.default(IdentityVerificationInProgress, {
            back: ()=>{
                this.currentState = 'send-oobi';
            },
            continue: ()=>{
                this.currentState = 'sign-challenge-message';
            }
        }), this.currentState === 'sign-challenge-message' && _mithrilDefault.default(SignChallengeMessage, {
            back: ()=>{
                this.currentState = 'identity-verification';
            },
            continue: ()=>{
                this.currentState = 'generate-challenge-message';
            }
        }), this.currentState === 'generate-challenge-message' && _mithrilDefault.default(GenerateChallengeMessage, {
            back: ()=>{
                this.currentState = 'sign-challenge-message';
            },
            continue: ()=>{
                this.currentState = 'copy-challenge-message';
            }
        }), this.currentState === 'copy-challenge-message' && _mithrilDefault.default(CopyChallengeMessage, {
            back: ()=>{
                this.currentState = 'generate-challenge-message';
            },
            continue: ()=>{
                this.currentState = 'challenge-message-in-process';
            }
        }), this.currentState === 'challenge-message-in-process' && _mithrilDefault.default(ChallengeMessageInProgress, {
            back: ()=>{
                this.currentState = 'copy-challenge-message';
            },
            end: vnode13.attrs.end
        }));
    }
}
module.exports = IdentityAuthenticationIssue;

},{"mithril":"1zcoP","../../../src/app/components":"iBBNK","../../../src/app/services":"i9qdV","../../../src/assets/img/add-new-contacts.png":"eJ7hD","../../../src/assets/img/response-message.png":"617JD","../../../src/assets/img/upload-file.png":"feq0O","../../../src/assets/img/wait.png":"2xdb0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"617JD":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "response-message.80a713bd.png" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"feq0O":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "upload-file.de27654a.png" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"i71kh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../../src/app/components");
var _services = require("../../../src/app/services");
var _approveRequestPng = require("../../../src/assets/img/approve-request.png");
var _approveRequestPngDefault = parcelHelpers.interopDefault(_approveRequestPng);
var _addNewContactsPng = require("../../../src/assets/img/add-new-contacts.png");
var _addNewContactsPngDefault = parcelHelpers.interopDefault(_addNewContactsPng);
var _uploadFilePng = require("../../../src/assets/img/upload-file.png");
var _uploadFilePngDefault = parcelHelpers.interopDefault(_uploadFilePng);
var _verifyCredentialsPng = require("../../../src/assets/img/verify-credentials.png");
var _verifyCredentialsPngDefault = parcelHelpers.interopDefault(_verifyCredentialsPng);
var _responseMessagePng = require("../../../src/assets/img/response-message.png");
var _responseMessagePngDefault = parcelHelpers.interopDefault(_responseMessagePng);
class StepsToAuthenticate {
    constructor(vnode){
    }
    view(vnode1) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "Identity Authentication"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "This module will take you through the steps of how to complete the verification process and receive a vLEI Credential."), _mithrilDefault.default("h3", null, "Steps to Identity Authentication"), _mithrilDefault.default("ol", {
            class: "styled-ol",
            style: {
                margin: '2rem 0'
            }
        }, _mithrilDefault.default("li", null, "Join a Video Call"), _mithrilDefault.default("li", null, "Use an OOBI protocol to share your AID"), _mithrilDefault.default("li", null, "Use an OOBI protocol to obtain the user's AID"), _mithrilDefault.default("li", null, "Generate and send a Challenge Message"), _mithrilDefault.default("li", null, "User signs and returns Challenge Message"), _mithrilDefault.default("li", null, "Receive and sign a Challenge Message"), _mithrilDefault.default("li", null, "Receive notification of your newly issued credentials in your credential wallet")), _mithrilDefault.default("div", {
            class: "flex flex-justify-end"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: vnode1.attrs.continue
        })));
    }
}
class JoinVideoCall {
    view(vnode2) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "Join a Video Call"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "In order to start the authentication process, you will need to complete an real-time OOBI session, sharing your OOBI on a Video Call so that you can provide your information."), _mithrilDefault.default("h3", null, "Generate", ' ', _mithrilDefault.default(_components.TextTooltip, {
            label: _mithrilDefault.default("u", null, "OOBI")
        }, "OOBI is an out of band (meaning outside this software) interaction.")), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: vnode2.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: vnode2.attrs.continue
        })));
    }
}
class SendOOBI {
    constructor(){
        this.oobi = {
            alias: '',
            url: ''
        };
    }
    oninit() {
        _services.KERI.listIdentifiers().then((identifiers)=>{
            this.oobi.alias = identifiers[0].name;
            _services.KERI.getOOBI(identifiers[0].name, 'witness').then((oobi)=>{
                this.oobi.url = oobi.oobis[0];
            }).catch((err)=>{
                console.log('getOOBI', err);
            });
        }).catch((err)=>{
            console.log('listIdentifiers', err);
        });
    }
    view(vnode3) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _addNewContactsPngDefault.default,
            style: {
                width: '40%',
                margin: '1.5rem 0 0 0'
            }
        }), _mithrilDefault.default("h3", null, "Send OOBI"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }, "Copy this OOBI (Alias + URL) to share your identifying information and paste it into the Video Call."), _mithrilDefault.default("label", null, "Alias:"), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            fluid: true,
            iconTrailing: {
                icon: 'content_copy'
            },
            style: {
                margin: '0 0 4rem 0'
            },
            value: this.oobi.alias
        }), _mithrilDefault.default("label", null, "URL:"), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            fluid: true,
            iconTrailing: {
                icon: 'content_copy'
            },
            style: {
                margin: '0 0 4rem 0'
            },
            value: this.oobi.url
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: vnode3.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: vnode3.attrs.continue
        })));
    }
}
class IdentityVerificationInProgress {
    view(vnode4) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _uploadFilePngDefault.default,
            style: {
                width: '50%',
                margin: '1.5rem 0 2rem 0'
            }
        }), _mithrilDefault.default("h3", null, "Identity Verification in Progress"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }, "Remain in the Video Call. An OOBI sent to you for verification purposes."), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: vnode4.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: vnode4.attrs.continue
        })));
    }
}
class ResolveOOBI {
    constructor(){
        this.alias = '';
        this.oobi = {
            alias: '',
            url: ''
        };
    }
    resolveOOBI(vnode5) {
        _services.KERI.listIdentifiers().then((identifiers)=>{
            this.alias = identifiers[0].name;
            _services.KERI.resolveOOBI(this.alias, this.oobi.alias, this.oobi.url).then(()=>{
                vnode5.attrs.continue();
            }).catch((err)=>{
                console.log('resolveOOBI', err);
            });
        }).catch((err)=>{
            console.log('listIdentifiers', err);
        });
    }
    view(vnode6) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _addNewContactsPngDefault.default,
            style: {
                width: '40%',
                margin: '1.5rem 0 0 0'
            }
        }), _mithrilDefault.default("h3", null, "Accept", ' ', _mithrilDefault.default(_components.TextTooltip, {
            label: _mithrilDefault.default("u", null, "OOBI")
        }, "OOBI is an Out Of Band (meaning outside this software) interaction.")), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "While on the Video Call, make sure to obtain the other party's ", _mithrilDefault.default("b", null, "URL and OOBI"), ". When you have both for each party, please press continue."), _mithrilDefault.default("label", null, "Alias:"), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            fluid: true,
            style: {
                margin: '0 0 2rem 0'
            },
            value: this.oobi.alias,
            oninput: (e)=>{
                this.oobi.alias = e.target.value;
            }
        }), _mithrilDefault.default("label", null, "URL:"), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            fluid: true,
            style: {
                margin: '0 0 4rem 0'
            },
            value: this.oobi.url,
            oninput: (e)=>{
                this.oobi.url = e.target.value;
            }
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: vnode6.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: ()=>{
                this.resolveOOBI(vnode6);
            }
        })));
    }
}
class GenerateChallengeMessage {
    view(vnode7) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _responseMessagePngDefault.default,
            style: {
                width: '50%',
                margin: '1.5rem 0 2rem 0'
            }
        }), _mithrilDefault.default("h3", null, "Generate Challenge Message"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "The Challenge Message generated will be sent for verification purposes."), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: vnode7.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Generate",
            onclick: vnode7.attrs.continue
        })));
    }
}
class CopyChallengeMessage {
    constructor(){
        this.challangeMessage = '';
    }
    oninit() {
        _services.KERI.generateChallengeMessage().then((res)=>{
            this.challangeMessage = res.words.join(' ');
        }).catch((err)=>{
            console.log('generateChallengeMessage', err);
        });
    }
    view(vnode8) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _responseMessagePngDefault.default,
            style: {
                width: '50%',
                margin: '1.5rem 0 2rem 0'
            }
        }), _mithrilDefault.default("h3", null, "Copy Challenge Message"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Copy the Challenge Message into the chat box while on the Video Call."), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            textarea: true,
            fluid: true,
            style: {
                margin: '0 0 4rem 0'
            },
            value: this.challangeMessage
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: vnode8.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: vnode8.attrs.continue
        })));
    }
}
class VerificationInProgress {
    view(vnode9) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _uploadFilePngDefault.default,
            style: {
                width: '60%',
                margin: '1.5rem 0 2rem 0'
            }
        }), _mithrilDefault.default("h3", null, "Verification in Progress"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }, "You will be notified when your signature is verified and approved, and credentials are issued."), _mithrilDefault.default("div", {
            class: "flex flex-justify-end"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Close",
            onclick: vnode9.attrs.continue
        })));
    }
}
class SignChallengeMessage {
    constructor(){
        this.challengeMessage = '';
    }
    signChallengeMessage(vnode10) {
        _services.KERI.listIdentifiers().then((identifiers)=>{
            _services.KERI.getContacts().then((contacts)=>{
                _services.KERI.signChallengeMessage(identifiers[0].name, contacts[0].id, this.challengeMessage.split(' ')).then(()=>{
                    vnode10.attrs.end();
                }).catch((err)=>{
                    console.log('signChallengeMessage', err);
                });
            }).catch((err)=>{
                console.log('getContacts', err);
            });
        }).catch((err)=>{
            console.log('listIdentifiers', err);
        });
    }
    view(vnode11) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _responseMessagePngDefault.default,
            style: {
                width: '50%',
                margin: '1.5rem 0 2rem 0'
            }
        }), _mithrilDefault.default("h3", null, "Send Challenge Message"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }, "Enter the 12-word challenge message into the chat and send to the credential issuer."), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            textarea: true,
            fluid: true,
            style: {
                margin: '0 0 4rem 0'
            },
            value: this.challengeMessage,
            oninput: (e)=>{
                this.challengeMessage = e.target.value;
            }
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back"
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Close",
            onclick: ()=>{
                this.signChallengeMessage(vnode11);
            }
        })));
    }
}
class IdentityAuthenticationReceive {
    constructor(){
        // this.currentState = 'send-oobi';
        this.currentState = 'steps-to-authenticate';
    }
    view(vnode12) {
        return _mithrilDefault.default('[', null, this.currentState === 'steps-to-authenticate' && _mithrilDefault.default(StepsToAuthenticate, {
            continue: ()=>{
                this.currentState = 'join-video-call';
            }
        }), this.currentState === 'join-video-call' && _mithrilDefault.default(JoinVideoCall, {
            back: ()=>{
                this.currentState = 'steps-to-authenticate';
            },
            continue: ()=>{
                this.currentState = 'send-oobi';
            }
        }), this.currentState === 'send-oobi' && _mithrilDefault.default(SendOOBI, {
            back: ()=>{
                this.currentState = 'join-video-call';
            },
            continue: ()=>{
                this.currentState = 'resolve-oobi';
            }
        }), this.currentState === 'identity-verification' && _mithrilDefault.default(IdentityVerificationInProgress, {
            back: ()=>{
                this.currentState = 'send-oobi';
            },
            continue: ()=>{
                this.currentState = 'generate-challenge-message';
            }
        }), this.currentState === 'resolve-oobi' && _mithrilDefault.default(ResolveOOBI, {
            back: ()=>{
                this.currentState = 'identity-verification';
            },
            continue: ()=>{
                this.currentState = 'identity-verification';
            }
        }), this.currentState === 'generate-challenge-message' && _mithrilDefault.default(GenerateChallengeMessage, {
            back: ()=>{
                this.currentState = 'resolve-oobi';
            },
            continue: ()=>{
                this.currentState = 'copy-challenge-message';
            }
        }), this.currentState === 'copy-challenge-message' && _mithrilDefault.default(CopyChallengeMessage, {
            back: ()=>{
                this.currentState = 'generate-challenge-message';
            },
            continue: ()=>{
                this.currentState = 'verification';
            }
        }), this.currentState === 'verification' && _mithrilDefault.default(VerificationInProgress, {
            back: ()=>{
                this.currentState = 'copy-challenge-message';
            },
            continue: ()=>{
                this.currentState = 'sign-challenge-message';
            }
        }), this.currentState === 'sign-challenge-message' && _mithrilDefault.default(SignChallengeMessage, {
            back: ()=>{
                this.currentState = 'verification';
            },
            end: vnode12.attrs.end
        }));
    }
}
module.exports = IdentityAuthenticationReceive;

},{"mithril":"1zcoP","../../../src/app/components":"iBBNK","../../../src/app/services":"i9qdV","../../../src/assets/img/approve-request.png":"2YmqE","../../../src/assets/img/add-new-contacts.png":"eJ7hD","../../../src/assets/img/upload-file.png":"feq0O","../../../src/assets/img/verify-credentials.png":"aSCsU","../../../src/assets/img/response-message.png":"617JD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7UBCM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../../src/app/components");
var _services = require("../../../src/app/services");
var _forms = require("../../../forms");
var _addNewContactsPng = require("../../../src/assets/img/add-new-contacts.png");
var _addNewContactsPngDefault = parcelHelpers.interopDefault(_addNewContactsPng);
var _projectPlanningPng = require("../../../src/assets/img/project-planning.png");
var _projectPlanningPngDefault = parcelHelpers.interopDefault(_projectPlanningPng);
var _responseMessagePng = require("../../../src/assets/img/response-message.png");
var _responseMessagePngDefault = parcelHelpers.interopDefault(_responseMessagePng);
var _uploadFilePng = require("../../../src/assets/img/upload-file.png");
var _uploadFilePngDefault = parcelHelpers.interopDefault(_uploadFilePng);
class VideoCallTask {
    constructor(initiate, label, next){
        this._label = label;
        this.initiate = initiate;
        this.next = next;
        this.currentState = 'intro';
        this._component = {
            view: (vnode)=>{
                return _mithrilDefault.default(VideoCall, {
                    end: vnode.attrs.end,
                    parent: this
                });
            }
        };
        this.sendOOBIPanel = {
            view: (vnode)=>{
                return _mithrilDefault.default(SendOOBIPanel, {
                    end: vnode.attrs.end,
                    identifiers: _services.Profile.identifiers,
                    parent: this
                });
            }
        };
        this.copyChallengePanel = {
            view: (vnode)=>{
                return _mithrilDefault.default(CopyChallengePanel, null);
            }
        };
    }
    get lead() {
        return this.initiate;
    }
    get imgSrc() {
        if (this.initiate === true) return _projectPlanningPngDefault.default;
        else return _addNewContactsPngDefault.default;
    }
    get label() {
        return this._label;
    }
    get component() {
        return this._component;
    }
    get lcomponent() {
        switch(this.currentState){
            case 'send-oobi':
                return this.sendOOBIPanel;
            case 'challenge-messages':
                return this.copyChallengePanel;
            default:
                return undefined;
        }
    }
}
class VideoCall {
    constructor(vnode){
    }
    view(vnode1) {
        return _mithrilDefault.default('[', null, vnode1.attrs.parent.currentState === 'intro' && _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "Identity Authentication"), _mithrilDefault.default("p", {
            className: "p-tag",
            style: {
                margin: '2rem 0'
            }
        }, vnode1.attrs.steps ? vnode1.attrs.steps.paragraph : _mithrilDefault.default('[', null, "This module will take you through the steps of how to authenticate a user's identity. Below are the steps for how to complete the process:")), _mithrilDefault.default("h3", null, "Steps to Identity Authentication"), _mithrilDefault.default("ol", {
            className: "styled-ol",
            style: {
                margin: '2rem 0'
            }
        }, vnode1.attrs.steps ? vnode1.attrs.steps.list.map((element)=>{
            return _mithrilDefault.default("li", null, element);
        }) : _mithrilDefault.default('[', null, _mithrilDefault.default("li", null, vnode1.attrs.parent.initiate ? 'Initiate' : 'Join', " a Video Call"), _mithrilDefault.default("li", null, "Use an OOBI protocol to obtain the user's AID"), _mithrilDefault.default("li", null, "Use an OOBI protocol to share your AID"), _mithrilDefault.default("li", null, "Obtain and sign a Challenge Message"), _mithrilDefault.default("li", null, "Generate and send a Challenge Message"), _mithrilDefault.default("li", null, "User signs and returns Challenge Message"), vnode1.attrs.parent.initiate && _mithrilDefault.default("li", null, "You initiate the Multi-Sig Group for all participants"), !vnode1.attrs.parent.initiate && _mithrilDefault.default("li", null, "Wait for invitation to join Multi-Sig Group"))), _mithrilDefault.default("div", {
            className: "flex flex-justify-end",
            style: {
                marginTop: '4rem'
            }
        }, _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: ()=>{
                if (vnode1.attrs.parent.initiate) vnode1.attrs.parent.currentState = 'video-call';
                else vnode1.attrs.parent.currentState = 'join-call';
            }
        }))), vnode1.attrs.parent.currentState === 'video-call' && _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _responseMessagePngDefault.default,
            style: {
                marginBottom: '2rem',
                width: '240px'
            }
        }), _mithrilDefault.default("h3", null, "Initiate a Video Call"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0'
            }
        }, "In order to start the authentication process, you will need to initiate an real-time Out of Band Interaction (OOBI) session in which you and the other users are present. You will accept all their OOBI URLs on a Video Call so that you can receive their identifying information."), _mithrilDefault.default("div", {
            class: "flex flex-justify-between",
            style: {
                marginTop: '4rem'
            }
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: ()=>{
                vnode1.attrs.parent.currentState = 'intro';
            }
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: ()=>{
                vnode1.attrs.parent.currentState = 'send-oobi';
            }
        }))), vnode1.attrs.parent.currentState === 'join-call' && _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _responseMessagePngDefault.default,
            style: {
                marginBottom: '2rem',
                width: '240px'
            }
        }), _mithrilDefault.default("h3", null, "Join a Video Call"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0'
            }
        }, "In order to participate in the authentication process, you will need to join an real-time Out of Band Interaction (OOBI) session initiated by the Lead in which you and the other users are present. You will accept all their OOBI URLs on a Video Call so that you can receive their identifier information."), _mithrilDefault.default("div", {
            class: "flex flex-justify-between",
            style: {
                marginTop: '4rem'
            }
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: ()=>{
                vnode1.attrs.parent.currentState = 'intro';
            }
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: ()=>{
                vnode1.attrs.parent.currentState = 'send-oobi';
            }
        }))), vnode1.attrs.parent.currentState === 'send-oobi' && _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "Accept OOBI from other person(s)"), _mithrilDefault.default(_forms.EnterOOBIsForm, {
            identifiers: _services.Profile.identifiers
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-end",
            style: {
                marginTop: '4rem'
            }
        }, _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            disabled: !_services.Participants.oobisResolved(),
            onclick: ()=>{
                vnode1.attrs.parent.currentState = 'generate-challenge';
            }
        }))), vnode1.attrs.parent.currentState === 'generate-challenge' && _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _responseMessagePngDefault.default,
            style: {
                width: '240px',
                margin: '1.5rem 0 2rem 0'
            }
        }), _mithrilDefault.default("h3", null, "Generate and Send Challenge Message"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }, "Click the Generate Button to create a Challenge Messages to each member of the signing group."), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: ()=>{
                vnode1.attrs.parent.currentState = 'send-oobi';
            }
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Generate",
            onclick: ()=>{
                vnode1.attrs.parent.currentState = 'challenge-messages';
            }
        }))), vnode1.attrs.parent.currentState === 'challenge-messages' && _mithrilDefault.default('[', null, _mithrilDefault.default(_forms.EnterChallengesForm, {
            identifiers: _services.Profile.identifiers
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: ()=>{
                vnode1.attrs.parent.currentState = 'generate-challenge';
            }
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Next",
            disabled: !(_services.Participants.oobisVerified() && _services.Participants.oobisConfirmed()),
            onclick: ()=>{
                if (vnode1.attrs.parent.initiate && vnode1.attrs.parent.next !== undefined) _services.Tasks.active = vnode1.attrs.parent.next;
                else vnode1.attrs.parent.currentState = 'waiting-for-multisig';
            }
        }))), vnode1.attrs.parent.currentState === 'waiting-for-multisig' && _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _uploadFilePngDefault.default,
            style: {
                width: '240px',
                margin: '1.5rem 0 2rem 0'
            }
        }), _mithrilDefault.default("h3", null, "Waiting for Multi-Sig Group Initiation"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }, "You will be notified when the Lead External GAR initiates the creation of the Multi-Sig Group for the GLEIF External AID. Clicking on the notification will allow you to participate in the inception event."), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: ()=>{
                vnode1.attrs.parent.currentState = 'challenge-messages';
            }
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Close",
            onclick: vnode1.attrs.end
        }))));
    }
}
class SendOOBIPanel {
    constructor(){
    }
    view(vnode2) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _addNewContactsPngDefault.default,
            style: {
                width: '200px',
                margin: '0 0 1rem 0'
            },
            alt: ""
        }), _mithrilDefault.default("h3", null, "Send OOBI for your ", vnode2.attrs.identifiers[0].name, " AID"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }, "Copy this OOBI URL for your default AID and paste it into the Video Call to share your identifying information. To use another AID for this transaction, go to your profile and set another default AID before continuing."), _mithrilDefault.default(_forms.SendOOBIForm, {
            identifiers: vnode2.attrs.identifiers
        }));
    }
}
class CopyChallengePanel {
    constructor(vnode3){
        this.signers = vnode3.attrs.signers;
    }
    view(vnode4) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
            className: "flex flex-align-center flex-justify-between"
        }, _mithrilDefault.default("img", {
            src: _addNewContactsPngDefault.default,
            style: {
                width: '120px',
                margin: '1.5rem 0 1rem 0'
            }
        }), _mithrilDefault.default("h3", null, "Challenge Message Recipients")), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }, "Paste the message into the video chat so that your contact(s) can be verified", _mithrilDefault.default("br", null), _mithrilDefault.default("br", null), _mithrilDefault.default("strong", null, "Important! Don't use a challenge message from another session, it should be unique to this session taking place today.")), _mithrilDefault.default(_forms.SendChallengeForm, null), _mithrilDefault.default("div", {
            className: "flex flex-align-center flex-justify-between"
        }, _mithrilDefault.default("p", {
            class: "font-color--battleship"
        }, "Participant"), _mithrilDefault.default("p", {
            class: "font-color--battleship"
        }, "Status")), _services.Participants.oobis.map((signer, index)=>{
            return _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
                className: "flex flex-align-center flex-justify-between"
            }, _mithrilDefault.default("p", null, signer.alias), !signer.verified && _mithrilDefault.default("p", {
                class: "font-color--blue"
            }, "In Progress"), signer.verified && _mithrilDefault.default("p", {
                class: "font-color--green"
            }, "Verified!")));
        }));
    }
}
module.exports = VideoCallTask;

},{"mithril":"1zcoP","../../../src/app/components":"iBBNK","../../../src/app/services":"i9qdV","../../../forms":"8l9t6","../../../src/assets/img/add-new-contacts.png":"eJ7hD","../../../src/assets/img/project-planning.png":"jYGFL","../../../src/assets/img/response-message.png":"617JD","../../../src/assets/img/upload-file.png":"feq0O","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8l9t6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _enterChallengesJsx = require("./enter-challenges/enter-challenges.jsx");
var _enterChallengesJsxDefault = parcelHelpers.interopDefault(_enterChallengesJsx);
var _enterOobisJsx = require("./enter-oobis/enter-oobis.jsx");
var _enterOobisJsxDefault = parcelHelpers.interopDefault(_enterOobisJsx);
var _sendChallengeJsx = require("./send-challenge/send-challenge.jsx");
var _sendChallengeJsxDefault = parcelHelpers.interopDefault(_sendChallengeJsx);
var _sendOobiJsx = require("./send-oobi/send-oobi.jsx");
var _sendOobiJsxDefault = parcelHelpers.interopDefault(_sendOobiJsx);
module.exports = {
    EnterChallengesForm: _enterChallengesJsxDefault.default,
    EnterOOBIsForm: _enterOobisJsxDefault.default,
    SendChallengeForm: _sendChallengeJsxDefault.default,
    SendOOBIForm: _sendOobiJsxDefault.default
};

},{"./enter-challenges/enter-challenges.jsx":"6dKJj","./enter-oobis/enter-oobis.jsx":"tKXxK","./send-challenge/send-challenge.jsx":"5Wnf0","./send-oobi/send-oobi.jsx":"9f04Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6dKJj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../src/app/components");
var _services = require("../../src/app/services");
/*
 * EnterChallengesForm
 *
 * attrs
 * identifiers - an array of agent identifiers
 */ class EnterChallengesForm {
    constructor(vnode){
        this.alias = vnode.attrs.identifiers[0].name;
        this.aliases = _services.Participants.oobis.map((oobi)=>{
            return oobi.alias;
        });
    }
    signChallengePromise(signer1) {
        return _services.KERI.signChallengeMessage(this.alias, signer1.id, signer1.challengeMessage.split(' '));
    }
    view(vnode1) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
            style: {
                maxHeight: '512px',
                overflowY: 'auto',
                margin: '0 0 1rem 0',
                paddingRight: '1rem'
            }
        }, _services.Participants.oobis.map((signer, index)=>{
            return _mithrilDefault.default('[', null, _mithrilDefault.default(_components.Card, {
                class: "card--fluid",
                style: {
                    margin: '0 0 1.5rem 0'
                }
            }, _mithrilDefault.default("div", {
                class: "flex flex-align-center"
            }, _mithrilDefault.default("h5", {
                style: {
                    minWidth: '100px'
                }
            }, "Alias:"), _mithrilDefault.default("p", {
                class: "p-tag-bold"
            }, signer.alias)), _mithrilDefault.default("div", {
                class: "flex flex-align-center flex-justify-between"
            }, _mithrilDefault.default("h5", {
                style: {
                    minWidth: '100px'
                }
            }, "Message:"), _mithrilDefault.default(_components.TextField, {
                outlined: true,
                fluid: true,
                textarea: true,
                style: {
                    backgroundColor: 'rgba(0, 0, 0, 0.04)'
                },
                value: signer.challengeMessage,
                oninput: (e)=>{
                    signer.challengeMessage = e.target.value;
                }
            })), !signer.sent ? _mithrilDefault.default("div", {
                class: "flex flex-justify-end",
                style: {
                    marginTop: '1rem'
                }
            }, _mithrilDefault.default(_components.Button, {
                class: "button--no-transform",
                raised: true,
                label: "Send",
                onclick: ()=>{
                    this.signChallengePromise(signer).then(()=>{
                        signer.sent = true;
                    }).catch((err)=>{
                        console.log('signChallengePromise', err);
                    });
                }
            })) : _mithrilDefault.default("div", {
                class: "flex flex-align-center flex-justify-end",
                style: {
                    marginTop: '1.5rem'
                }
            }, _mithrilDefault.default("label", {
                class: "font-color--battleship",
                style: {
                    fontWeight: 'bold',
                    textDecoration: 'underline'
                }
            }, "Out of Band Confirmation"), _mithrilDefault.default(_components.Checkbox, {
                checked: signer.confirmed,
                onclick: ()=>{
                    signer.confirmed = !signer.confirmed;
                }
            }))));
        })));
    }
}
module.exports = EnterChallengesForm;

},{"mithril":"1zcoP","../../src/app/components":"iBBNK","../../src/app/services":"i9qdV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"tKXxK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../src/app/components");
var _services = require("../../src/app/services");
/*
 * EnterOOBIsForm
 *
 * attrs
 * identifiers - an array of agent identifiers
 */ class EnterOOBIsForm {
    constructor(vnode){
        this.complete = false;
        this.alias = vnode.attrs.identifiers[0].name;
    }
    resolveOOBIPromise(oobi1) {
        return _services.KERI.resolveOOBI(this.alias, oobi1.alias, oobi1.url);
    }
    resolveAllOOBIs(vnode1) {
        let promises = _services.Participants.oobis.filter((oobi)=>{
            return oobi.alias && oobi.url;
        }).map((oobi)=>{
            oobi.status = 'started';
            return this.resolveOOBIPromise(oobi);
        });
        return Promise.all(promises).then(()=>{
            this.ensureOOBIsResolved(_services.Participants.oobis).then(()=>{
                _services.Participants.oobis.filter((oobi)=>{
                    return oobi.alias && oobi.url;
                });
            });
        }).catch((err)=>{
            console.log('resolveAllOOBIs', err);
        });
    }
    ensureOOBIsResolved(oobis) {
        let aliases = oobis.map((oobi)=>{
            return oobi.alias;
        });
        return new Promise(function(resolve, reject) {
            setTimeout(function waitForOOBI() {
                _services.KERI.getContactsByAliases(aliases).then((contacts)=>{
                    let done = oobis.every((oobi)=>{
                        return contacts.some((contact)=>{
                            if (contact.alias === oobi.alias) {
                                oobi.status = 'resolved';
                                oobi.id = contact.id;
                                return true;
                            }
                            return false;
                        });
                    });
                    if (done) return resolve();
                    setTimeout(waitForOOBI, 700);
                }).catch((err)=>{
                    reject();
                    console.log('getContacts', err);
                });
            }, 700);
        });
    }
    view(vnode2) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("div", {
            style: {
                maxHeight: '512px',
                overflowY: 'auto',
                margin: '0 0 1rem 0',
                paddingRight: '1rem'
            }
        }, _mithrilDefault.default("div", {
            class: "flex flex-justify-between",
            style: {
                alignItems: 'baseline'
            }
        }, _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }, "While on the Video Call make sure to obtain each participant's ", _mithrilDefault.default("b", null, "URL"), " and give them an Alias that makes sense to you:")), _services.Participants.oobis.map((oobi)=>{
            return _mithrilDefault.default(_components.Card, {
                class: "card--fluid",
                style: {
                    margin: '0 0 1.5rem 0'
                }
            }, _mithrilDefault.default(_components.IconButton, {
                class: "close-icon",
                icon: "close",
                onclick: ()=>{
                    _services.Participants.oobis.splice(_services.Participants.oobis.indexOf(oobi), 1);
                }
            }), _mithrilDefault.default("div", {
                className: "flex flex-align-center"
            }, _mithrilDefault.default("h5", {
                style: {
                    minWidth: '100px'
                }
            }, "Status:"), oobi.status === 'none' && _mithrilDefault.default("p", {
                className: "font-color--battleship font-weight--medium"
            }, "Not Started"), oobi.status === 'started' && _mithrilDefault.default("p", {
                className: "font-color--blue font-weight--medium"
            }, "In Progress"), oobi.status === 'resolved' && _mithrilDefault.default("p", {
                className: "font-color--green font-weight--medium"
            }, "Complete!")), _mithrilDefault.default("div", {
                class: "flex flex-align-center flex-justify-between"
            }, _mithrilDefault.default("h5", {
                style: {
                    minWidth: '100px'
                }
            }, "Alias:"), _mithrilDefault.default(_components.TextField, {
                outlined: true,
                fluid: true,
                style: {
                    backgroundColor: 'rgba(0, 0, 0, 0.04)',
                    height: '44px'
                },
                value: oobi.alias,
                oninput: (e)=>{
                    oobi.alias = e.target.value;
                }
            })), _mithrilDefault.default("div", {
                class: "flex flex-align-center flex-justify-between"
            }, _mithrilDefault.default("h5", {
                style: {
                    minWidth: '100px'
                }
            }, "URL:"), _mithrilDefault.default(_components.TextField, {
                outlined: true,
                fluid: true,
                style: {
                    backgroundColor: 'rgba(0, 0, 0, 0.04)',
                    height: '44px'
                },
                value: oobi.url,
                oninput: (e)=>{
                    oobi.url = e.target.value;
                }
            })));
        })), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            raised: true,
            class: "button--no-transform button--gray",
            label: "Add Another",
            iconLeading: "add",
            onclick: ()=>{
                _services.Participants.addOOBI('', '');
            }
        }), _mithrilDefault.default(_components.Button, {
            raised: true,
            class: "button--no-transform",
            label: "Resolve OOBIs",
            onclick: ()=>{
                this.resolveAllOOBIs(vnode2);
            }
        })));
    }
}
module.exports = EnterOOBIsForm;

},{"mithril":"1zcoP","../../src/app/components":"iBBNK","../../src/app/services":"i9qdV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Wnf0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../src/app/components");
var _services = require("../../src/app/services");
class SendChallengeForm {
    constructor(){
        this.challengeMessage = '';
        this.copied = false;
    }
    copyMessage() {
        navigator.clipboard.writeText(this.challengeMessage).then(()=>{
            this.copied = true;
            _services.Participants.updateWords(this.challengeMessage.split(' '));
            _mithrilDefault.default.redraw();
        }, ()=>{
            this.copied = false;
            _mithrilDefault.default.redraw();
        });
    }
    oninit() {
        _services.KERI.generateChallengeMessage().then((res)=>{
            this.challengeMessage = res.words.join(' ');
        }).catch((err)=>{
            console.log('generateChallengeMessage', err);
        });
    }
    view(vnode) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h4", null, "Copy Challenge Message"), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            textarea: true,
            rows: 2,
            fluid: true,
            style: {
                backgroundColor: 'rgba(0, 0, 0, 0.04)',
                margin: '0 0 0 0'
            },
            value: this.challengeMessage
        }), _mithrilDefault.default("div", {
            class: "flex flex-align-center flex-justify-between",
            style: {
                margin: '1rem 0'
            }
        }, _mithrilDefault.default(_components.Button, {
            raised: true,
            class: "button--no-transform button--gray",
            label: "Copy",
            iconLeading: "content_copy",
            onclick: (e)=>{
                this.copyMessage();
            }
        }), _mithrilDefault.default("p", {
            class: "font-color--green font-weight--medium"
        }, this.copied ? 'Challenge message copied!' : _mithrilDefault.default("br", null))));
    }
}
module.exports = SendChallengeForm;

},{"mithril":"1zcoP","../../src/app/components":"iBBNK","../../src/app/services":"i9qdV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9f04Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../src/app/components");
var _services = require("../../src/app/services");
/*
 * SendOOBIForm
 *
 * attrs
 * identifiers - an array of agent identifiers
 */ class SendOOBIForm {
    constructor(vnode){
        this.copied = false;
        this.oobi = {
            alias: '',
            url: ''
        };
    }
    oninit(vnode1) {
        this.oobi.alias = vnode1.attrs.identifiers[0].name;
        _services.KERI.getOOBI(vnode1.attrs.identifiers[0].name, 'witness').then((oobi)=>{
            this.oobi.url = oobi.oobis[0];
        }).catch((err)=>{
            console.log('getOOBI', err);
        });
    }
    copyURL() {
        navigator.clipboard.writeText(this.oobi.url).then(()=>{
            this.copied = true;
            _mithrilDefault.default.redraw();
        }, ()=>{
            this.copied = false;
            _mithrilDefault.default.redraw();
        });
    }
    view(vnode2) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "URL:"), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            fluid: true,
            style: {
                margin: '0 0 2rem 0',
                backgroundColor: 'rgba(0, 0, 0, 0.04)'
            },
            value: this.oobi.url,
            iconTrailing: {
                icon: 'content_copy',
                onclick: (e)=>{
                    this.copyURL();
                }
            }
        }), _mithrilDefault.default("p", {
            className: "font-color--green font-weight--medium"
        }, this.copied ? 'OOBI copied!' : _mithrilDefault.default("br", null)));
    }
}
module.exports = SendOOBIForm;

},{"mithril":"1zcoP","../../src/app/components":"iBBNK","../../src/app/services":"i9qdV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jYGFL":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "project-planning.11a54c5d.png" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"lTLJc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../../src/app/components");
var _approveRequestPng = require("../../../src/assets/img/approve-request.png");
var _approveRequestPngDefault = parcelHelpers.interopDefault(_approveRequestPng);
class IntroToYourRole {
    constructor(vnode){
        this.step = 0;
        this.steps = [
            _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, vnode.attrs.main ? vnode.attrs.main.title : 'Intro to your Role'), _mithrilDefault.default("img", {
                src: _approveRequestPngDefault.default,
                style: {
                    display: 'block',
                    margin: '5rem auto',
                    width: '244px'
                }
            }), _mithrilDefault.default("p", {
                class: "p-tag",
                style: {
                    margin: '0 0 7rem'
                }
            }, vnode.attrs.main ? vnode.attrs.main.paragraph : _mithrilDefault.default('[', null, "You have now created your Delegated AID! While you are waiting for your credentials, here is a brief introduction to some of the tasks you can complete in your role.")), _mithrilDefault.default("div", {
                class: "flex flex-justify-between"
            }, _mithrilDefault.default(_components.Button, {
                class: "button--gray-dk button--big button--no-transform",
                raised: true,
                label: "Skip",
                onclick: (e)=>{
                    vnode.attrs.end();
                }
            }), _mithrilDefault.default(_components.Button, {
                class: "button--big button--no-transform",
                raised: true,
                label: "Continue",
                onclick: ()=>{
                    this.nextOrEnd(vnode);
                }
            })))
        ];
        if (vnode.attrs.steps) vnode.attrs.steps.forEach((step)=>{
            this.steps.push(_mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, step.title), _mithrilDefault.default("img", {
                src: step.image,
                style: {
                    width: '60%',
                    margin: '4rem 0 4rem 4rem'
                }
            }), _mithrilDefault.default("p", {
                class: "p-tag"
            }, step.paragraph), _mithrilDefault.default("div", {
                class: "flex flex-justify-between"
            }, _mithrilDefault.default(_components.Button, {
                class: "button--gray-dk button--big button--no-transform",
                raised: true,
                label: "Skip",
                onclick: (e)=>{
                    vnode.attrs.end();
                }
            }), _mithrilDefault.default(_components.Button, {
                class: "button--big button--no-transform",
                raised: true,
                label: "Continue",
                onclick: ()=>{
                    this.nextOrEnd(vnode);
                }
            }))));
        });
    }
    nextOrEnd(vnode1) {
        if (this.step + 1 >= this.steps.length) {
            sessionStorage.setItem('seenIntro', true);
            vnode1.attrs.end();
            return;
        }
        this.step++;
    }
    view() {
        return _mithrilDefault.default('[', null, this.steps[this.step]);
    }
}
module.exports = IntroToYourRole;

},{"mithril":"1zcoP","../../../src/app/components":"iBBNK","../../../src/assets/img/approve-request.png":"2YmqE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1JmBC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../../src/app/components");
var _services = require("../../../src/app/services");
var _toDoListPng = require("../../../src/assets/img/to-do-list.png");
var _toDoListPngDefault = parcelHelpers.interopDefault(_toDoListPng);
var _secureMessagingPng = require("../../../src/assets/img/secure-messaging.png"); // {
var _secureMessagingPngDefault = parcelHelpers.interopDefault(_secureMessagingPng);
//   "data": {
//       "src": "E-4-PsMBN0YEKyTl3zL0zulWcBehdaaG6Go5cMc0BzQ8",
//       "r": "/icp/init",
//       "aids": [
//           "E-4-PsMBN0YEKyTl3zL0zulWcBehdaaG6Go5cMc0BzQ8",
//           "EozYHef4je02EkMOA1IKM65WkIdSjfrL7XWDk_JzJL9o"
//       ],
//       "ked": {
//           "v": "KERI10JSON000215_",
//           "t": "icp",
//           "d": "EoZCKXPW7bG_Il3pfzjKZYzS80bCTZXTZja5ZS4-85jY",
//           "i": "EoZCKXPW7bG_Il3pfzjKZYzS80bCTZXTZja5ZS4-85jY",
//           "s": "0",
//           "kt": "1",
//           "k": [
//               "D-U6Sc6VqQC3rDuD2wLF3oR8C4xQyWOTMp4zbJyEnRlE",
//               "DQKeRX-2dXdSWS-EiwYyiQdeIwesvubEqnUYC5vsEyjo"
//           ],
//           "nt": "1",
//           "n": [
//               "E6UpCouA9mZA03hMFJLrhA0SvwR4HVNqf2wrZM-ydTSI",
//               "ENVtv0_G68psQhfWB-ZyVH1lndLli2LSmfSxxszNufoI"
//           ],
//           "bt": "3",
//           "b": [
//               "BGKVzj4ve0VSd8z_AmvhLg4lqcC_9WYX90k03q-R_Ydo",
//               "BuyRFMideczFZoapylLIyCjSdhtqVb31wZkRKvPfNqkw",
//               "Bgoq68HCmYNUDgOz4Skvlu306o_NY-NrYuKAVhk3Zh9c"
//           ],
//           "c": [],
//           "a": []
//       }
//   }
// }
class JoinMultiSigGroup {
    constructor(){
        this.currentState = 'new-multi-sig-group';
        this.aid = _services.Profile.getDefaultAID();
        _services.Contacts.requestList();
        this.groupAlias = '';
        let notif = _services.Notify.findByType("multisig");
        this.aids = notif.data.aids;
        this.ked = notif.data.ked;
        this.fractionallyWeighted = Array.isArray(this.ked.kt);
    }
    confirmAndSign() {
        _services.KERI.participateGroupInception(this.groupAlias, {
            aids: this.aids,
            isith: this.ked.kt,
            nsith: this.ked.nt,
            toad: Number(this.ked.bt),
            wits: this.ked.b
        }).then(()=>{
            console.log('inception complete');
            this.currentState = 'event-complete';
        });
    }
    view(vnode) {
        return _mithrilDefault.default('[', null, this.currentState === 'new-multi-sig-group' && _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _toDoListPngDefault.default,
            style: {
                width: '188px',
                margin: '4rem 0 0 0'
            }
        }), _mithrilDefault.default("h3", null, "New Multi-Sig Set"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "View the multi-sig group and confirm that these individuals are authorized."), _mithrilDefault.default("div", {
            class: "flex flex-justify-end"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "View",
            onclick: ()=>{
                this.currentState = 'review-members';
            }
        }))), this.currentState === 'review-members' && _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "Review and Confirm"), _mithrilDefault.default("p", null, "Review signers to make sure the list is complete."), _mithrilDefault.default("h4", null, "Signers (in order):"), this.aids.map((signer, i)=>{
            console.log(signer);
            let name = "";
            let contact = _services.Contacts.filterById(signer);
            console.log(contact);
            if (contact.length === 1) name = contact[0].alias;
            else if (signer === this.aid.prefix) name = this.aid.name + " (Your AID)";
            else name = "Unknown AID";
            return _mithrilDefault.default('[', null, _mithrilDefault.default(_components.TextField, {
                outlined: true,
                style: {
                    margin: '0 2rem 2rem 0'
                },
                value: name
            }), this.fractionallyWeighted && _mithrilDefault.default(_components.TextField, {
                outlined: true,
                style: {
                    width: '80px'
                },
                value: this.ked.kt[i]
            }));
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: ()=>{
                this.currentState = 'review-members';
            }
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Confirm",
            onclick: ()=>{
                this.currentState = 'create-group-alias';
            }
        }))), this.currentState === 'create-group-alias' && _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "Create Your Multi-Sig Group Alias"), _mithrilDefault.default("img", {
            src: _secureMessagingPngDefault.default,
            style: {
                width: '268px',
                margin: '4rem 0 2rem 0'
            }
        }), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }, "The alias should be an easy to remember name for your multi-sig group?"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }, "What would you like your group's alias to be?"), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            fluid: true,
            value: this.groupAlias,
            oninput: (e)=>{
                this.groupAlias = e.target.value;
            }
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-end",
            style: {
                marginTop: '4rem'
            }
        }, _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            disabled: !this.groupAlias,
            onclick: ()=>{
                this.confirmAndSign();
            }
        }))), this.currentState === 'event-complete' && _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _toDoListPngDefault.default,
            style: {
                width: '188px',
                margin: '4rem 0 0 0'
            }
        }), _mithrilDefault.default("h3", null, "Inception Event Completed"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Thank you for confirming the Inception Event. You will receive a notification when it is completed."), _mithrilDefault.default("div", {
            class: "flex flex-justify-end",
            style: {
                marginTop: '4rem'
            }
        }, _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Close",
            onclick: vnode.attrs.end
        }))));
    }
}
module.exports = JoinMultiSigGroup;

},{"mithril":"1zcoP","../../../src/app/components":"iBBNK","../../../src/app/services":"i9qdV","../../../src/assets/img/to-do-list.png":"fwpcy","../../../src/assets/img/secure-messaging.png":"6ZVTs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fwpcy":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "to-do-list.cf6820b6.png" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"5C7mf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../../src/app/components");
var _services = require("../../../src/app/services");
var _passcodePng = require("../../../src/assets/img/passcode.png");
var _passcodePngDefault = parcelHelpers.interopDefault(_passcodePng);
class Login {
    constructor(){
        this.passcode = '';
        this.showPasscode = false;
    }
    login(vnode) {
        _services.Auth.login(this.passcode).then(()=>{
            vnode.attrs.end();
        }).catch((err)=>{
            console.log('login', err);
        });
    }
    view(vnode1) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "Welcome Back"), _mithrilDefault.default("div", {
            class: "flex flex-justify-center",
            style: {
                margin: '5rem 0'
            }
        }, _mithrilDefault.default("img", {
            src: _passcodePngDefault.default,
            style: {
                width: '192px'
            }
        })), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '0 0 3rem 0'
            }
        }, "Enter your 22 character passcode to login to the portal."), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            fluid: true,
            type: this.showPasscode ? 'text' : 'password',
            value: this.passcode,
            oninput: (e)=>{
                this.passcode = e.target.value;
            },
            iconTrailing: {
                icon: this.showPasscode ? 'visibility' : 'visibility_off',
                onclick: ()=>{
                    this.showPasscode = !this.showPasscode;
                }
            }
        }), _mithrilDefault.default("div", {
            class: "flex flex-justify-end",
            style: {
                marginTop: '4rem'
            }
        }, _mithrilDefault.default(_components.Button, {
            raised: true,
            class: "button--no-transform button--big",
            label: "Login",
            onclick: ()=>{
                this.login(vnode1);
            }
        })));
    }
}
module.exports = Login;

},{"mithril":"1zcoP","../../../src/app/components":"iBBNK","../../../src/app/services":"i9qdV","../../../src/assets/img/passcode.png":"c9yf6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Hyim":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../../src/app/components");
var _approveRequestPng = require("../../../src/assets/img/approve-request.png");
var _approveRequestPngDefault = parcelHelpers.interopDefault(_approveRequestPng);
var _addNewContactsPng = require("../../../src/assets/img/add-new-contacts.png");
var _addNewContactsPngDefault = parcelHelpers.interopDefault(_addNewContactsPng);
var _verifyCredentialsPng = require("../../../src/assets/img/verify-credentials.png");
var _verifyCredentialsPngDefault = parcelHelpers.interopDefault(_verifyCredentialsPng);
var _githubLogoPng = require("../../../src/assets/img/github-logo.png");
var _githubLogoPngDefault = parcelHelpers.interopDefault(_githubLogoPng);
class Notifications {
    constructor(vnode){
    }
    view(vnode1) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "Notifications"), _mithrilDefault.default("div", {
            class: "flex",
            style: {
                borderBottom: '1px solid grey',
                height: '40px',
                justifyContent: 'space-evenly'
            }
        }, _mithrilDefault.default("img", {
            src: _githubLogoPngDefault.default,
            style: {
                width: '10%'
            }
        }), _mithrilDefault.default("p", null, "New Key Rotation Request"), _mithrilDefault.default("p", {
            style: {
                textDecoration: 'underline',
                cursor: 'pointer'
            },
            onclick: vnode1.attrs.continue
        }, "Go To Task")), _mithrilDefault.default("div", {
            class: "flex",
            style: {
                borderBottom: '1px solid grey',
                height: '40px'
            }
        }), _mithrilDefault.default("div", {
            class: "flex",
            style: {
                borderBottom: '1px solid grey',
                height: '40px'
            }
        }), _mithrilDefault.default("div", {
            class: "flex",
            style: {
                borderBottom: '1px solid grey',
                height: '40px'
            }
        }), _mithrilDefault.default("div", {
            class: "flex",
            style: {
                borderBottom: '1px solid grey',
                height: '40px'
            }
        }), _mithrilDefault.default("div", {
            class: "flex",
            style: {
                borderBottom: '1px solid grey',
                height: '40px'
            }
        }), _mithrilDefault.default("div", {
            class: "flex",
            style: {
                borderBottom: '1px solid grey',
                height: '40px'
            }
        }), _mithrilDefault.default("br", null), _mithrilDefault.default("br", null), _mithrilDefault.default("div", {
            class: "flex flex-justify-end"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Close",
            onclick: vnode1.attrs.end
        })));
    }
}
class RequestForKey {
    constructor(vnode2){
    }
    view(vnode3) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _verifyCredentialsPngDefault.default,
            style: {
                width: '50%',
                margin: '0 0 2rem 0'
            }
        }), _mithrilDefault.default("h3", {
            style: {
                margin: '0 0 2rem 0 '
            }
        }, "Triggered Manual Key Rotation"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '0 0 2rem 0'
            }
        }, "A request for a key rotation has been sent from a QVI to GLEIF."), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Contact"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '0 0 2rem 0',
                fontWeight: 'bold'
            }
        }, "Jane Smith"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Credentials"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '0 0 2rem 0',
                fontWeight: 'bold'
            }
        }, "QAR for QVI Corp."), _mithrilDefault.default("br", null), _mithrilDefault.default("br", null), _mithrilDefault.default("br", null), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Close",
            onclick: vnode3.attrs.end
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: vnode3.attrs.continue
        })));
    }
}
class BeforeRotation {
    constructor(vnode4){
    }
    view(vnode5) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _verifyCredentialsPngDefault.default,
            style: {
                width: '50%',
                margin: '0 0 2rem 0'
            }
        }), _mithrilDefault.default("h3", {
            style: {
                margin: '0 0 2rem 0 '
            }
        }, "Triggered Manual Key Rotation"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Before completing the manual key rotation, check with the QAR to determine if any credentials have been issued during the time between occurrence of potential or actual key compromise and the time that potential or actual key compromise has been realized.", _mithrilDefault.default("br", null), _mithrilDefault.default("br", null), "Once this is completed, continue to revoke credentials."), _mithrilDefault.default("br", null), _mithrilDefault.default("br", null), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Close",
            onclick: vnode5.attrs.end
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: vnode5.attrs.continue
        })));
    }
}
class ApproveRequest {
    constructor(vnode6){
    }
    view(vnode7) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _verifyCredentialsPngDefault.default,
            style: {
                width: '50%',
                margin: '0 0 2rem 0'
            }
        }), _mithrilDefault.default("h3", {
            style: {
                margin: '0 0 2rem 0 '
            }
        }, "Triggered Manual Key Rotation"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '0 0 2rem 0'
            }
        }, "Please manually approve the rotation request."), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Contact"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '0 0 2rem 0',
                fontWeight: 'bold'
            }
        }, "Jane Smith"), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Credentials"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '0 0 2rem 0',
                fontWeight: 'bold'
            }
        }, "QAR for QVI Corp."), _mithrilDefault.default("br", null), _mithrilDefault.default("br", null), _mithrilDefault.default("br", null), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Decline",
            onclick: vnode7.attrs.end
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Approve",
            onclick: vnode7.attrs.end
        })));
    }
}
class ManualKeyRotation {
    constructor(){
        this.currentState = 'notifications';
    }
    view(vnode8) {
        return _mithrilDefault.default('[', null, this.currentState === 'notifications' && _mithrilDefault.default(Notifications, {
            end: vnode8.attrs.end,
            continue: ()=>{
                this.currentState = 'request-for-key';
            }
        }), this.currentState === 'request-for-key' && _mithrilDefault.default(RequestForKey, {
            end: vnode8.attrs.end,
            continue: ()=>{
                this.currentState = 'before-rotation';
            }
        }), this.currentState === 'before-rotation' && _mithrilDefault.default(BeforeRotation, {
            end: vnode8.attrs.end,
            continue: ()=>{
                this.currentState = 'approve-request';
            }
        }), this.currentState === 'approve-request' && _mithrilDefault.default(ApproveRequest, {
            end: vnode8.attrs.end
        }));
    }
}
module.exports = ManualKeyRotation;

},{"mithril":"1zcoP","../../../src/app/components":"iBBNK","../../../src/assets/img/approve-request.png":"2YmqE","../../../src/assets/img/add-new-contacts.png":"eJ7hD","../../../src/assets/img/verify-credentials.png":"aSCsU","../../../src/assets/img/github-logo.png":"91eSZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9WLnE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../../src/app/components");
var _greenCheckMarkSvg = require("../../../src/assets/img/green-check-mark.svg");
var _greenCheckMarkSvgDefault = parcelHelpers.interopDefault(_greenCheckMarkSvg);
var _redXSvg = require("../../../src/assets/img/red-x.svg");
var _redXSvgDefault = parcelHelpers.interopDefault(_redXSvg);
var _uploadFilePng = require("../../../src/assets/img/upload-file.png");
var _uploadFilePngDefault = parcelHelpers.interopDefault(_uploadFilePng);
class EventLog {
    eventLogArray = [
        {
            logNumber: 123,
            date: '08/25/1996',
            status: true
        },
        {
            logNumber: 124,
            date: '08/25/1996',
            status: false
        },
        {
            logNumber: 125,
            date: '08/25/1996',
            status: true
        },
        {
            logNumber: 126,
            date: '08/25/1996',
            status: false
        },
        {
            logNumber: 127,
            date: '08/25/1996',
            status: false
        },
        {
            logNumber: 128,
            date: '08/25/1996',
            status: true
        },
        {
            logNumber: 129,
            date: '08/25/1996',
            status: true
        },
        {
            logNumber: 130,
            date: '08/25/1996',
            status: false
        },
        {
            logNumber: 131,
            date: '08/25/1996',
            status: true
        },
        {
            logNumber: 132,
            date: '08/25/1996',
            status: true
        }
    ];
    constructor(vnode){
    }
    view(vnode1) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "Event Log"), _mithrilDefault.default(_components.TextField, {
            outlined: true,
            fluid: true,
            iconTrailing: {
                icon: 'search'
            },
            placeholder: "Search by date or event log number",
            style: {
                backgroundColor: 'rgba(0, 0, 0, 0.04)',
                margin: '2rem 0 2rem 0'
            }
        }), _mithrilDefault.default("br", null), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default("p", {
            class: "p-tag-bold",
            style: {
                fontSize: '80%'
            }
        }, "Event Log Number"), _mithrilDefault.default("p", {
            class: "p-tag-bold",
            style: {
                fontSize: '80%',
                marginRight: '5.2rem'
            }
        }, "Date"), _mithrilDefault.default("p", {
            class: "p-tag-bold",
            style: {
                fontSize: '80%',
                marginRight: '2.8rem'
            }
        }, "Status")), _mithrilDefault.default("div", {
            style: {
                height: '350px',
                overflowY: 'scroll',
                margin: '0 0 2rem 0'
            }
        }, this.eventLogArray.map((event)=>{
            return _mithrilDefault.default("div", {
                class: "flex flex-justify-between divider",
                style: {
                    alignItems: 'center',
                    margin: '0',
                    height: '40px',
                    width: '100%'
                }
            }, _mithrilDefault.default("div", {
                class: "flex flex-justify-between",
                style: {
                    width: '100%'
                }
            }, _mithrilDefault.default("p", {
                class: "p-tag",
                style: {
                    fontSize: '80%'
                }
            }, _mithrilDefault.default("u", {
                onclick: vnode1.attrs.continue,
                style: {
                    cursor: 'pointer'
                }
            }, "Event #", event.logNumber)), _mithrilDefault.default("p", {
                class: "p-tag",
                style: {
                    fontSize: '80%'
                }
            }, event.date), _mithrilDefault.default("div", {
                style: {
                    marginRight: '1rem'
                }
            }, event.status ? _mithrilDefault.default("p", {
                class: "p-tag",
                style: {
                    fontSize: '80%'
                }
            }, "Completed") : _mithrilDefault.default("p", {
                class: "p-tag",
                style: {
                    fontSize: '80%',
                    color: '#aa3737'
                }
            }, "Incomplete"))));
        })), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: vnode1.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "close",
            onclick: vnode1.attrs.end
        })));
    }
}
class EventDetails {
    tempMultiSigArray = [
        {
            number: 1,
            name: 'Jane Smith',
            signed: true
        },
        {
            number: 2,
            name: 'Michael Williams',
            signed: true
        },
        {
            number: 3,
            name: 'ZG4jvw9bTmVd5X92iKYmfT',
            signed: true
        },
        {
            number: 4,
            name: 'OG8jvw9bTmUd5J92iKYmfU',
            signed: true
        },
        {
            number: 5,
            name: 'Joe Roberts',
            signed: false
        },
        {
            number: 6,
            name: 'OG8jvw9bTmUd5J92iKYmfU',
            signed: false
        },
        {
            number: 7,
            name: 'OG8jvw9bTmUd5J92iKYmfU',
            signed: false
        },
        {
            number: 8,
            name: 'OG8jvw9bTmUd5J92iKYmfU',
            signed: false
        }
    ];
    constructor(vnode2){
    }
    view(vnode3) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("h3", null, "Event #130"), _mithrilDefault.default("h4", {
            class: "p-tag",
            style: {
                margin: '0 0 0 0'
            }
        }, "Status: Multi-Sig Verification in Progress"), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 1rem 4.5rem'
            }
        }, "Name:"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 1rem 1rem 0'
            }
        }, "Signed?")), _mithrilDefault.default("div", {
            style: {
                height: '350px',
                overflowY: 'scroll',
                margin: '0 0 1rem 0'
            }
        }, this.tempMultiSigArray.map((sig)=>{
            return _mithrilDefault.default("div", {
                class: "flex flex-justify-evenly ",
                style: {
                    alignItems: 'center',
                    margin: '0 0 1rem 0',
                    width: '100%'
                }
            }, _mithrilDefault.default("h4", {
                class: "p-tag",
                style: {
                    margin: '0 0 0 0'
                }
            }, `#${sig.number}`), _mithrilDefault.default("div", {
                class: "flex flex-align-center",
                style: {
                    width: '55%',
                    backgroundColor: 'white',
                    height: '40px',
                    borderRadius: '3px'
                }
            }, _mithrilDefault.default("p", {
                class: "p-tag-bold",
                style: {
                    margin: '0 0 0 .5rem',
                    fontSize: '80%'
                }
            }, sig.name)), _mithrilDefault.default("div", {
                style: {
                    margin: '0 0 0 .5rem'
                }
            }, sig.signed ? _mithrilDefault.default("img", {
                src: _greenCheckMarkSvgDefault.default,
                style: {
                    width: '80%'
                }
            }) : _mithrilDefault.default("img", {
                src: _redXSvgDefault.default,
                style: {
                    width: '80%'
                }
            })));
        })), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--gray-dk button--big button--no-transform",
            raised: true,
            label: "Go Back",
            onclick: vnode3.attrs.back
        }), _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "Continue",
            onclick: vnode3.attrs.continue
        })));
    }
}
class MultiSigVerProg {
    constructor(vnode4){
    }
    view(vnode5) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _uploadFilePngDefault.default,
            style: {
                width: '50%',
                margin: '4rem 0 0 0'
            }
        }), _mithrilDefault.default("h3", null, "Multi-Signature Verification in Progress"), _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                margin: '2rem 0 2rem 0'
            }
        }, "You will be notified when the GRACs verify that the Root AID witnesses their signature on the Root AID Inception Event."), _mithrilDefault.default("div", {
            class: "flex flex-justify-end"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "View Progress",
            onclick: vnode5.attrs.end
        })));
    }
}
class ViewMultiSigEventLogs {
    constructor(){
        this.currentState = 'event-log';
    }
    view(vnode6) {
        return _mithrilDefault.default('[', null, this.currentState === 'event-log' && _mithrilDefault.default(EventLog, {
            continue: ()=>{
                this.currentState = 'event-details';
            }
        }), this.currentState === 'event-details' && _mithrilDefault.default(EventDetails, {
            back: ()=>{
                this.currentState = 'event-log';
            },
            continue: ()=>{
                this.currentState = 'multi-sig-ver';
            }
        }), this.currentState === 'multi-sig-ver' && _mithrilDefault.default(MultiSigVerProg, {
            end: vnode6.attrs.end
        }));
    }
}
module.exports = ViewMultiSigEventLogs;

},{"mithril":"1zcoP","../../../src/app/components":"iBBNK","../../../src/assets/img/green-check-mark.svg":"lfenU","../../../src/assets/img/red-x.svg":"8QwFL","../../../src/assets/img/upload-file.png":"feq0O","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gcDEa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _components = require("../../../src/app/components");
var _approveRequestPng = require("../../../src/assets/img/approve-request.png");
var _approveRequestPngDefault = parcelHelpers.interopDefault(_approveRequestPng);
var _addNewContactsPng = require("../../../src/assets/img/add-new-contacts.png");
var _addNewContactsPngDefault = parcelHelpers.interopDefault(_addNewContactsPng);
var _verifyCredentialsPng = require("../../../src/assets/img/verify-credentials.png");
var _verifyCredentialsPngDefault = parcelHelpers.interopDefault(_verifyCredentialsPng);
var _githubLogoPng = require("../../../src/assets/img/github-logo.png");
var _githubLogoPngDefault = parcelHelpers.interopDefault(_githubLogoPng);
class ViewCreds {
    constructor(vnode){
    }
    view(vnode1) {
        return _mithrilDefault.default('[', null, _mithrilDefault.default("img", {
            src: _approveRequestPngDefault.default,
            style: {
                width: '50%',
                margin: '2rem 0 2rem 0'
            }
        }), _mithrilDefault.default("h3", null, "View New Credentials"), _mithrilDefault.default("div", {
            class: "flex flex-justify-between"
        }, _mithrilDefault.default("img", {
            src: _githubLogoPngDefault.default,
            style: {
                width: '30%',
                borderRadius: '50%'
            }
        }), _mithrilDefault.default("div", {
            style: {
                width: '60%'
            }
        }, _mithrilDefault.default("p", {
            class: "p-tag",
            style: {
                fontSize: '120%'
            }
        }, "Ocotcat verified at 1:23pm on 12/7/21"))), _mithrilDefault.default("p", {
            class: "p-tag"
        }, "Your credentials have been issued and are now in your credential wallet.", _mithrilDefault.default("br", null), _mithrilDefault.default("br", null)), _mithrilDefault.default("div", {
            class: "flex flex-justify-end"
        }, _mithrilDefault.default(_components.Button, {
            class: "button--big button--no-transform",
            raised: true,
            label: "View Credentials",
            onclick: vnode1.attrs.continue
        })));
    }
}
class ViewNewCredential {
    constructor(){
        this.currentState = 'view-new';
    }
    view(vnode2) {
        return _mithrilDefault.default('[', null, this.currentState === 'view-new' && _mithrilDefault.default(ViewCreds, null));
    }
}
module.exports = ViewNewCredential;

},{"mithril":"1zcoP","../../../src/app/components":"iBBNK","../../../src/assets/img/approve-request.png":"2YmqE","../../../src/assets/img/add-new-contacts.png":"eJ7hD","../../../src/assets/img/verify-credentials.png":"aSCsU","../../../src/assets/img/github-logo.png":"91eSZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bJjPK":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "loan-approved.84eb0d3f.png" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"FbsGw":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "decline-request.6f2db35a.png" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"4C9KU":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('bBETt') + "calendar.ef7f82f7.png" + "?" + Date.now();

},{"./helpers/bundle-url":"lgJ39"}],"gijJP":[function() {},{}],"9xOQR":[function() {},{}],"1OQwU":[function() {},{}],"79aXD":[function() {},{}]},["ed9V9","i3Ovo"], "i3Ovo", "parcelRequire29f5")

//# sourceMappingURL=index.5437dead.js.map
